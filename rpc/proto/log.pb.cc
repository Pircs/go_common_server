// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* logPlayerLoginLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logPlayerLoginLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogPlayerRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlayerRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogPlayerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlayerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogPlayerLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlayerLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMoneyFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMoneyFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogMoneyFlow_ADDORREDUCE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogSnsFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSnsFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogSnsFlow_SNSTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogRoundFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRoundFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogRoundFlow_BATTLETYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEBATTLEMODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEAUTOMODE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogBuildingUpgradeFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogBuildingUpgradeFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogTaskFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogTaskFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogTrainingFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogTrainingFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogUpdateCharFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogUpdateCharFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSelfBattleFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSelfBattleFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogHeroFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogHeroFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogHeroUpdateFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogHeroUpdateFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogClanFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogClanFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogClanDonateFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogClanDonateFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogPlayerLevelFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlayerLevelFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSignInFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSignInFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOnlineNumbers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOnlineNumbers_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogShareBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogShareBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogViewShareBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogViewShareBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogActivityFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogActivityFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogFriendDonateRequestFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogFriendDonateRequestFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogGameSvrState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogGameSvrState_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogBuildingSpeedUpFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogBuildingSpeedUpFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogBuildingSpeedUpFlow_SpeedUpSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogSpellCreateFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSpellCreateFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStrategyCreateFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStrategyCreateFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSuperLeagueFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSuperLeagueFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSpellUseFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSpellUseFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStrategyUseFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStrategyUseFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogReceiveCharFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogReceiveCharFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogReceiveCharFlow_ReceiveSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogFriendHouseFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogFriendHouseFlow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogFriendHouseFlow_ResType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogCommonFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogCommonFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TpLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TpLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TpLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TpLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* TpDataRecv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TpDataRecv_reflection_ = NULL;
const ::google::protobuf::Descriptor* TpDataSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TpDataSend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2eproto() {
  protobuf_AddDesc_log_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log.proto");
  GOOGLE_CHECK(file != NULL);
  logPlayerLoginLogout_descriptor_ = file->message_type(0);
  static const int logPlayerLoginLogout_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, ip_),
  };
  logPlayerLoginLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logPlayerLoginLogout_descriptor_,
      logPlayerLoginLogout::default_instance_,
      logPlayerLoginLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logPlayerLoginLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logPlayerLoginLogout));
  LogPlayerRegister_descriptor_ = file->message_type(1);
  static const int LogPlayerRegister_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lclientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lsystemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, ltelecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lnetwork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lregchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, lzoneid_),
  };
  LogPlayerRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlayerRegister_descriptor_,
      LogPlayerRegister::default_instance_,
      LogPlayerRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlayerRegister));
  LogPlayerLogin_descriptor_ = file->message_type(2);
  static const int LogPlayerLogin_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lplayerfriendsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lclientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lsystemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, ltelecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lnetwork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lloginchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, lzoneid_),
  };
  LogPlayerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlayerLogin_descriptor_,
      LogPlayerLogin::default_instance_,
      LogPlayerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlayerLogin));
  LogPlayerLogout_descriptor_ = file->message_type(3);
  static const int LogPlayerLogout_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lplayerfriendsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lclientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lsystemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, ltelecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lnetwork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, lzoneid_),
  };
  LogPlayerLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlayerLogout_descriptor_,
      LogPlayerLogout::default_instance_,
      LogPlayerLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlayerLogout));
  LogMoneyFlow_descriptor_ = file->message_type(4);
  static const int LogMoneyFlow_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, limoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, laddorreduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, limoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, lzoneid_),
  };
  LogMoneyFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMoneyFlow_descriptor_,
      LogMoneyFlow::default_instance_,
      LogMoneyFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMoneyFlow));
  LogMoneyFlow_ADDORREDUCE_descriptor_ = LogMoneyFlow_descriptor_->enum_type(0);
  LogSnsFlow_descriptor_ = file->message_type(5);
  static const int LogSnsFlow_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lactoropenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lrecnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lsnstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lsnssubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, lzoneid_),
  };
  LogSnsFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSnsFlow_descriptor_,
      LogSnsFlow::default_instance_,
      LogSnsFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSnsFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSnsFlow));
  LogSnsFlow_SNSTYPE_descriptor_ = LogSnsFlow_descriptor_->enum_type(0);
  LogRoundFlow_descriptor_ = file->message_type(6);
  static const int LogRoundFlow_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lbattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lbattletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lpvebattlemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lroundscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lroundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lfood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lwuhun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lipveautomode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, liechartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, liechartypefrag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, liechartypefragnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lvdstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, lzoneid_),
  };
  LogRoundFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRoundFlow_descriptor_,
      LogRoundFlow::default_instance_,
      LogRoundFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRoundFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRoundFlow));
  LogRoundFlow_BATTLETYPE_descriptor_ = LogRoundFlow_descriptor_->enum_type(0);
  LogRoundFlow_PVEBATTLEMODE_descriptor_ = LogRoundFlow_descriptor_->enum_type(1);
  LogRoundFlow_PVEAUTOMODE_descriptor_ = LogRoundFlow_descriptor_->enum_type(2);
  LogBuildingUpgradeFlow_descriptor_ = file->message_type(7);
  static const int LogBuildingUpgradeFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lbuildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, liid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, lzoneid_),
  };
  LogBuildingUpgradeFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogBuildingUpgradeFlow_descriptor_,
      LogBuildingUpgradeFlow::default_instance_,
      LogBuildingUpgradeFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingUpgradeFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogBuildingUpgradeFlow));
  LogTaskFlow_descriptor_ = file->message_type(8);
  static const int LogTaskFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, litasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, liid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, lzoneid_),
  };
  LogTaskFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogTaskFlow_descriptor_,
      LogTaskFlow::default_instance_,
      LogTaskFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTaskFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogTaskFlow));
  LogTrainingFlow_descriptor_ = file->message_type(9);
  static const int LogTrainingFlow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lchartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lcharlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, lzoneid_),
  };
  LogTrainingFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogTrainingFlow_descriptor_,
      LogTrainingFlow::default_instance_,
      LogTrainingFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogTrainingFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogTrainingFlow));
  LogUpdateCharFlow_descriptor_ = file->message_type(10);
  static const int LogUpdateCharFlow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lchartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lcharlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, lzoneid_),
  };
  LogUpdateCharFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogUpdateCharFlow_descriptor_,
      LogUpdateCharFlow::default_instance_,
      LogUpdateCharFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogUpdateCharFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogUpdateCharFlow));
  LogSelfBattleFlow_descriptor_ = file->message_type(11);
  static const int LogSelfBattleFlow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lcenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, lzoneid_),
  };
  LogSelfBattleFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSelfBattleFlow_descriptor_,
      LogSelfBattleFlow::default_instance_,
      LogSelfBattleFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSelfBattleFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSelfBattleFlow));
  LogHeroFlow_descriptor_ = file->message_type(12);
  static const int LogHeroFlow_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lchartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, laddorreduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lgainreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, lzoneid_),
  };
  LogHeroFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogHeroFlow_descriptor_,
      LogHeroFlow::default_instance_,
      LogHeroFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogHeroFlow));
  LogHeroUpdateFlow_descriptor_ = file->message_type(13);
  static const int LogHeroUpdateFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lchartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, lzoneid_),
  };
  LogHeroUpdateFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogHeroUpdateFlow_descriptor_,
      LogHeroUpdateFlow::default_instance_,
      LogHeroUpdateFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogHeroUpdateFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogHeroUpdateFlow));
  LogClanFlow_descriptor_ = file->message_type(14);
  static const int LogClanFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lcreateordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lclanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, ltargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, lzoneid_),
  };
  LogClanFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogClanFlow_descriptor_,
      LogClanFlow::default_instance_,
      LogClanFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogClanFlow));
  LogClanDonateFlow_descriptor_ = file->message_type(15);
  static const int LogClanDonateFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lclanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lchartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lcharlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, lzoneid_),
  };
  LogClanDonateFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogClanDonateFlow_descriptor_,
      LogClanDonateFlow::default_instance_,
      LogClanDonateFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClanDonateFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogClanDonateFlow));
  LogPlayerLevelFlow_descriptor_ = file->message_type(16);
  static const int LogPlayerLevelFlow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, llevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, lzoneid_),
  };
  LogPlayerLevelFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlayerLevelFlow_descriptor_,
      LogPlayerLevelFlow::default_instance_,
      LogPlayerLevelFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerLevelFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlayerLevelFlow));
  LogSignInFlow_descriptor_ = file->message_type(17);
  static const int LogSignInFlow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, ldays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, lzoneid_),
  };
  LogSignInFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSignInFlow_descriptor_,
      LogSignInFlow::default_instance_,
      LogSignInFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSignInFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSignInFlow));
  LogOnlineNumbers_descriptor_ = file->message_type(18);
  static const int LogOnlineNumbers_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, linumbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, lzoneid_),
  };
  LogOnlineNumbers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogOnlineNumbers_descriptor_,
      LogOnlineNumbers::default_instance_,
      LogOnlineNumbers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnlineNumbers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOnlineNumbers));
  LogShareBattle_descriptor_ = file->message_type(19);
  static const int LogShareBattle_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, liesharebattletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lvbattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, lzoneid_),
  };
  LogShareBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogShareBattle_descriptor_,
      LogShareBattle::default_instance_,
      LogShareBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogShareBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogShareBattle));
  LogViewShareBattle_descriptor_ = file->message_type(20);
  static const int LogViewShareBattle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lvbattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, lzoneid_),
  };
  LogViewShareBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogViewShareBattle_descriptor_,
      LogViewShareBattle::default_instance_,
      LogViewShareBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogViewShareBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogViewShareBattle));
  LogActivityFlow_descriptor_ = file->message_type(21);
  static const int LogActivityFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, liactivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, liactivitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lvaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, lzoneid_),
  };
  LogActivityFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogActivityFlow_descriptor_,
      LogActivityFlow::default_instance_,
      LogActivityFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogActivityFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogActivityFlow));
  LogFriendDonateRequestFlow_descriptor_ = file->message_type(22);
  static const int LogFriendDonateRequestFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lvfrienduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lichartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, licharlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, lzoneid_),
  };
  LogFriendDonateRequestFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogFriendDonateRequestFlow_descriptor_,
      LogFriendDonateRequestFlow::default_instance_,
      LogFriendDonateRequestFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendDonateRequestFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogFriendDonateRequestFlow));
  LogGameSvrState_descriptor_ = file->message_type(23);
  static const int LogGameSvrState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameSvrState, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameSvrState, lvgameip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameSvrState, lzoneid_),
  };
  LogGameSvrState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogGameSvrState_descriptor_,
      LogGameSvrState::default_instance_,
      LogGameSvrState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameSvrState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameSvrState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogGameSvrState));
  LogBuildingSpeedUpFlow_descriptor_ = file->message_type(24);
  static const int LogBuildingSpeedUpFlow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, libuildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lispeedupsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, lzoneid_),
  };
  LogBuildingSpeedUpFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogBuildingSpeedUpFlow_descriptor_,
      LogBuildingSpeedUpFlow::default_instance_,
      LogBuildingSpeedUpFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuildingSpeedUpFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogBuildingSpeedUpFlow));
  LogBuildingSpeedUpFlow_SpeedUpSource_descriptor_ = LogBuildingSpeedUpFlow_descriptor_->enum_type(0);
  LogSpellCreateFlow_descriptor_ = file->message_type(25);
  static const int LogSpellCreateFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lispelltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lispelllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, lzoneid_),
  };
  LogSpellCreateFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSpellCreateFlow_descriptor_,
      LogSpellCreateFlow::default_instance_,
      LogSpellCreateFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellCreateFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSpellCreateFlow));
  LogStrategyCreateFlow_descriptor_ = file->message_type(26);
  static const int LogStrategyCreateFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, listrategytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, listrategylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, lzoneid_),
  };
  LogStrategyCreateFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStrategyCreateFlow_descriptor_,
      LogStrategyCreateFlow::default_instance_,
      LogStrategyCreateFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyCreateFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStrategyCreateFlow));
  LogSuperLeagueFlow_descriptor_ = file->message_type(27);
  static const int LogSuperLeagueFlow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lioldseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, linewseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, lzoneid_),
  };
  LogSuperLeagueFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSuperLeagueFlow_descriptor_,
      LogSuperLeagueFlow::default_instance_,
      LogSuperLeagueFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSuperLeagueFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSuperLeagueFlow));
  LogSpellUseFlow_descriptor_ = file->message_type(28);
  static const int LogSpellUseFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lispelltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lispelllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, libattletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, lzoneid_),
  };
  LogSpellUseFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSpellUseFlow_descriptor_,
      LogSpellUseFlow::default_instance_,
      LogSpellUseFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSpellUseFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSpellUseFlow));
  LogStrategyUseFlow_descriptor_ = file->message_type(29);
  static const int LogStrategyUseFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, listrategytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, listrategylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, libattletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, lzoneid_),
  };
  LogStrategyUseFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStrategyUseFlow_descriptor_,
      LogStrategyUseFlow::default_instance_,
      LogStrategyUseFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStrategyUseFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStrategyUseFlow));
  LogReceiveCharFlow_descriptor_ = file->message_type(30);
  static const int LogReceiveCharFlow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lichartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, licharlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lisource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, lzoneid_),
  };
  LogReceiveCharFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogReceiveCharFlow_descriptor_,
      LogReceiveCharFlow::default_instance_,
      LogReceiveCharFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReceiveCharFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogReceiveCharFlow));
  LogReceiveCharFlow_ReceiveSource_descriptor_ = LogReceiveCharFlow_descriptor_->enum_type(0);
  LogFriendHouseFlow_descriptor_ = file->message_type(31);
  static const int LogFriendHouseFlow_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lgamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, ldteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lvgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, licenterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lirestype1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, liresnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lirestype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, liresnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lirestype3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, liresnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lirestype4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, liresnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, lzoneid_),
  };
  LogFriendHouseFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogFriendHouseFlow_descriptor_,
      LogFriendHouseFlow::default_instance_,
      LogFriendHouseFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogFriendHouseFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogFriendHouseFlow));
  LogFriendHouseFlow_ResType_descriptor_ = LogFriendHouseFlow_descriptor_->enum_type(0);
  LogCommonFlow_descriptor_ = file->message_type(32);
  static const int LogCommonFlow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCommonFlow, ldetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCommonFlow, lzoneid_),
  };
  LogCommonFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogCommonFlow_descriptor_,
      LogCommonFlow::default_instance_,
      LogCommonFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCommonFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCommonFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogCommonFlow));
  TpLogin_descriptor_ = file->message_type(33);
  static const int TpLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, tvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, nchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, nconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, tclientver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, tclientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, lzoneid_),
  };
  TpLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TpLogin_descriptor_,
      TpLogin::default_instance_,
      TpLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TpLogin));
  TpLogout_descriptor_ = file->message_type(34);
  static const int TpLogout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogout, tvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogout, nchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogout, lzoneid_),
  };
  TpLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TpLogout_descriptor_,
      TpLogout::default_instance_,
      TpLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TpLogout));
  TpDataRecv_descriptor_ = file->message_type(35);
  static const int TpDataRecv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, tvopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, nchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, tdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, lzoneid_),
  };
  TpDataRecv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TpDataRecv_descriptor_,
      TpDataRecv::default_instance_,
      TpDataRecv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataRecv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TpDataRecv));
  TpDataSend_descriptor_ = file->message_type(36);
  static const int TpDataSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataSend, nconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataSend, tdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataSend, lzoneid_),
  };
  TpDataSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TpDataSend_descriptor_,
      TpDataSend::default_instance_,
      TpDataSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpDataSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TpDataSend));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logPlayerLoginLogout_descriptor_, &logPlayerLoginLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlayerRegister_descriptor_, &LogPlayerRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlayerLogin_descriptor_, &LogPlayerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlayerLogout_descriptor_, &LogPlayerLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMoneyFlow_descriptor_, &LogMoneyFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSnsFlow_descriptor_, &LogSnsFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRoundFlow_descriptor_, &LogRoundFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogBuildingUpgradeFlow_descriptor_, &LogBuildingUpgradeFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogTaskFlow_descriptor_, &LogTaskFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogTrainingFlow_descriptor_, &LogTrainingFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogUpdateCharFlow_descriptor_, &LogUpdateCharFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSelfBattleFlow_descriptor_, &LogSelfBattleFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogHeroFlow_descriptor_, &LogHeroFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogHeroUpdateFlow_descriptor_, &LogHeroUpdateFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogClanFlow_descriptor_, &LogClanFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogClanDonateFlow_descriptor_, &LogClanDonateFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlayerLevelFlow_descriptor_, &LogPlayerLevelFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSignInFlow_descriptor_, &LogSignInFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOnlineNumbers_descriptor_, &LogOnlineNumbers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogShareBattle_descriptor_, &LogShareBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogViewShareBattle_descriptor_, &LogViewShareBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogActivityFlow_descriptor_, &LogActivityFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogFriendDonateRequestFlow_descriptor_, &LogFriendDonateRequestFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogGameSvrState_descriptor_, &LogGameSvrState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogBuildingSpeedUpFlow_descriptor_, &LogBuildingSpeedUpFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSpellCreateFlow_descriptor_, &LogSpellCreateFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStrategyCreateFlow_descriptor_, &LogStrategyCreateFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSuperLeagueFlow_descriptor_, &LogSuperLeagueFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSpellUseFlow_descriptor_, &LogSpellUseFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStrategyUseFlow_descriptor_, &LogStrategyUseFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogReceiveCharFlow_descriptor_, &LogReceiveCharFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogFriendHouseFlow_descriptor_, &LogFriendHouseFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogCommonFlow_descriptor_, &LogCommonFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TpLogin_descriptor_, &TpLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TpLogout_descriptor_, &TpLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TpDataRecv_descriptor_, &TpDataRecv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TpDataSend_descriptor_, &TpDataSend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2eproto() {
  delete logPlayerLoginLogout::default_instance_;
  delete logPlayerLoginLogout_reflection_;
  delete LogPlayerRegister::default_instance_;
  delete LogPlayerRegister_reflection_;
  delete LogPlayerLogin::default_instance_;
  delete LogPlayerLogin_reflection_;
  delete LogPlayerLogout::default_instance_;
  delete LogPlayerLogout_reflection_;
  delete LogMoneyFlow::default_instance_;
  delete LogMoneyFlow_reflection_;
  delete LogSnsFlow::default_instance_;
  delete LogSnsFlow_reflection_;
  delete LogRoundFlow::default_instance_;
  delete LogRoundFlow_reflection_;
  delete LogBuildingUpgradeFlow::default_instance_;
  delete LogBuildingUpgradeFlow_reflection_;
  delete LogTaskFlow::default_instance_;
  delete LogTaskFlow_reflection_;
  delete LogTrainingFlow::default_instance_;
  delete LogTrainingFlow_reflection_;
  delete LogUpdateCharFlow::default_instance_;
  delete LogUpdateCharFlow_reflection_;
  delete LogSelfBattleFlow::default_instance_;
  delete LogSelfBattleFlow_reflection_;
  delete LogHeroFlow::default_instance_;
  delete LogHeroFlow_reflection_;
  delete LogHeroUpdateFlow::default_instance_;
  delete LogHeroUpdateFlow_reflection_;
  delete LogClanFlow::default_instance_;
  delete LogClanFlow_reflection_;
  delete LogClanDonateFlow::default_instance_;
  delete LogClanDonateFlow_reflection_;
  delete LogPlayerLevelFlow::default_instance_;
  delete LogPlayerLevelFlow_reflection_;
  delete LogSignInFlow::default_instance_;
  delete LogSignInFlow_reflection_;
  delete LogOnlineNumbers::default_instance_;
  delete LogOnlineNumbers_reflection_;
  delete LogShareBattle::default_instance_;
  delete LogShareBattle_reflection_;
  delete LogViewShareBattle::default_instance_;
  delete LogViewShareBattle_reflection_;
  delete LogActivityFlow::default_instance_;
  delete LogActivityFlow_reflection_;
  delete LogFriendDonateRequestFlow::default_instance_;
  delete LogFriendDonateRequestFlow_reflection_;
  delete LogGameSvrState::default_instance_;
  delete LogGameSvrState_reflection_;
  delete LogBuildingSpeedUpFlow::default_instance_;
  delete LogBuildingSpeedUpFlow_reflection_;
  delete LogSpellCreateFlow::default_instance_;
  delete LogSpellCreateFlow_reflection_;
  delete LogStrategyCreateFlow::default_instance_;
  delete LogStrategyCreateFlow_reflection_;
  delete LogSuperLeagueFlow::default_instance_;
  delete LogSuperLeagueFlow_reflection_;
  delete LogSpellUseFlow::default_instance_;
  delete LogSpellUseFlow_reflection_;
  delete LogStrategyUseFlow::default_instance_;
  delete LogStrategyUseFlow_reflection_;
  delete LogReceiveCharFlow::default_instance_;
  delete LogReceiveCharFlow_reflection_;
  delete LogFriendHouseFlow::default_instance_;
  delete LogFriendHouseFlow_reflection_;
  delete LogCommonFlow::default_instance_;
  delete LogCommonFlow_reflection_;
  delete TpLogin::default_instance_;
  delete TpLogin_reflection_;
  delete TpLogout::default_instance_;
  delete TpLogout_reflection_;
  delete TpDataRecv::default_instance_;
  delete TpDataRecv_reflection_;
  delete TpDataSend::default_instance_;
  delete TpDataSend_reflection_;
}

void protobuf_AddDesc_log_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlog.proto\022\003rpc\"R\n\024logPlayerLoginLogout"
    "\022\020\n\010playerid\030\001 \002(\t\022\014\n\004time\030\002 \002(\003\022\016\n\006logo"
    "ut\030\003 \002(\010\022\n\n\002ip\030\004 \002(\t\"\364\001\n\021LogPlayerRegist"
    "er\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002"
    " \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002"
    "(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\026\n\016LClientVersion\030\006"
    " \002(\t\022\027\n\017LSystemHardware\030\007 \002(\t\022\024\n\014LTeleco"
    "mOper\030\010 \002(\t\022\020\n\010LNetwork\030\t \002(\t\022\023\n\013LRegCha"
    "nnel\030\n \002(\005\022\017\n\007LZoneID\030\013 \001(\t\"\236\002\n\016LogPlaye"
    "rLogin\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTi"
    "me\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID"
    "\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\016\n\006LLevel\030\006 \002(\005"
    "\022\031\n\021LPlayerFriendsNum\030\007 \002(\005\022\026\n\016LClientVe"
    "rsion\030\010 \002(\t\022\027\n\017LSystemHardware\030\t \002(\t\022\024\n\014"
    "LTelecomOper\030\n \002(\t\022\020\n\010LNetwork\030\013 \002(\t\022\025\n\r"
    "LLoginChannel\030\014 \002(\005\022\017\n\007LZoneID\030\r \001(\t\"\235\002\n"
    "\017LogPlayerLogout\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014"
    "LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022"
    "\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\023\n\013LO"
    "nlineTime\030\006 \002(\005\022\016\n\006LLevel\030\007 \002(\005\022\031\n\021LPlay"
    "erFriendsNum\030\010 \002(\005\022\026\n\016LClientVersion\030\t \002"
    "(\t\022\027\n\017LSystemHardware\030\n \002(\t\022\024\n\014LTelecomO"
    "per\030\013 \002(\t\022\020\n\010LNetwork\030\014 \002(\t\022\017\n\007LZoneID\030\r"
    " \001(\t\"\313\002\n\014LogMoneyFlow\022\022\n\nLGameSvrId\030\001 \002("
    "\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\021\n\tLSequence\030\003 \001"
    "(\005\022\023\n\013LvGameAppid\030\004 \002(\t\022\017\n\007LPlatID\030\005 \002(\005"
    "\022\020\n\010Lvopenid\030\006 \002(\t\022\016\n\006LLevel\030\007 \002(\005\022\017\n\007Li"
    "Money\030\010 \002(\005\022\017\n\007LReason\030\t \002(\005\0223\n\014LAddOrRe"
    "duce\030\n \002(\0162\035.rpc.LogMoneyFlow.ADDORREDUC"
    "E\022\023\n\013LiMoneyType\030\013 \002(\005\022\025\n\rLiCenterLevel\030"
    "\014 \002(\005\022\017\n\007LZoneID\030\r \001(\t\"\"\n\013ADDORREDUCE\022\007\n"
    "\003ADD\020\000\022\n\n\006REDUCE\020\001\"\267\003\n\nLogSnsFlow\022\022\n\nLGa"
    "meSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013L"
    "vGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\024\n\014LAc"
    "torOpenID\030\005 \002(\t\022\017\n\007LRecNum\030\006 \001(\005\022\016\n\006LCou"
    "nt\030\007 \002(\005\022\020\n\010LSNSType\030\010 \002(\005\022\023\n\013LSNSSubTyp"
    "e\030\t \001(\005\022\025\n\rLiCenterLevel\030\n \002(\005\022\017\n\007LZoneI"
    "D\030\013 \001(\t\"\322\001\n\007SNSTYPE\022\013\n\007SHOWOFF\020\000\022\n\n\006INVI"
    "TE\020\001\022\r\n\tSENDHEART\020\002\022\020\n\014RECEIVEHEART\020\003\022\r\n"
    "\tSENDEMAIL\020\004\022\020\n\014RECEIVEEMAIL\020\005\022\t\n\005SHARE\020"
    "\006\022\013\n\007SpeedUp\020\007\022\017\n\013ReleaseTime\020\010\022\020\n\014Speed"
    "Up_Help\020\t\022\024\n\020ReleaseTime_Help\020\n\022\t\n\005OTHER"
    "\020\013\022\020\n\014FriendDonate\020\014\"\344\004\n\014LogRoundFlow\022\022\n"
    "\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022"
    "\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n"
    "\010Lvopenid\030\005 \002(\t\022\021\n\tLBattleID\030\006 \002(\005\022\023\n\013LB"
    "attleType\030\007 \002(\005\022\026\n\016LPVEBattleMode\030\010 \002(\005\022"
    "\023\n\013LRoundScore\030\t \002(\005\022\022\n\nLRoundTime\030\n \002(\005"
    "\022\017\n\007LResult\030\013 \002(\005\022\r\n\005LGold\030\014 \002(\005\022\r\n\005LFoo"
    "d\030\r \002(\005\022\016\n\006LWuhun\030\016 \002(\005\022\020\n\010LPercent\030\017 \002("
    "\005\022\025\n\rLiPVEAUTOMODE\030\020 \002(\005\022\023\n\013LiECHARTYPE\030"
    "\021 \002(\005\022\027\n\017LiECHARTYPEFrag\030\022 \002(\005\022\032\n\022LiECHA"
    "RTYPEFragNum\030\023 \002(\005\022\017\n\007LvDstId\030\024 \002(\t\022\017\n\007L"
    "ZoneID\030\025 \001(\t\"D\n\nBATTLETYPE\022\007\n\003PVE\020\000\022\007\n\003P"
    "VP\020\001\022\007\n\003TTT\020\002\022\t\n\005OTHER\020\003\022\020\n\014FRIENDATTACK"
    "\020\004\"@\n\rPVEBATTLEMODE\022\n\n\006NORMAL\020\000\022\010\n\004HARD\020"
    "\001\022\r\n\tNIGHTMARE\020\002\022\n\n\006BETRAY\020\003\"-\n\013PVEAUTOM"
    "ODE\022\017\n\013PVEAMNORMAL\020\000\022\r\n\tPVEAMAUTO\020\001\"\321\001\n\026"
    "LogBuildingUpgradeFlow\022\022\n\nLGameSvrId\030\001 \002"
    "(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030"
    "\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t"
    "\022\016\n\006LLevel\030\006 \002(\005\022\025\n\rLBUILDINGTYPE\030\007 \002(\005\022"
    "\014\n\004LiId\030\010 \002(\005\022\017\n\007LiLevel\030\t \002(\005\022\017\n\007LZoneI"
    "D\030\n \001(\t\"\262\001\n\013LogTaskFlow\022\022\n\nLGameSvrId\030\001 "
    "\002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid"
    "\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002("
    "\t\022\016\n\006LLevel\030\006 \002(\005\022\022\n\nLiTaskType\030\007 \002(\005\022\014\n"
    "\004LiId\030\010 \002(\005\022\017\n\007LZoneID\030\t \001(\t\"\253\001\n\017LogTrai"
    "ningFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEvent"
    "Time\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlat"
    "ID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\021\n\tLchartype\030"
    "\006 \002(\005\022\022\n\nLcharlevel\030\007 \002(\005\022\017\n\007LZoneID\030\010 \001"
    "(\t\"\255\001\n\021LogUpdateCharFlow\022\022\n\nLGameSvrId\030\001"
    " \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppi"
    "d\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002"
    "(\t\022\021\n\tLchartype\030\006 \002(\005\022\022\n\nLcharlevel\030\007 \002("
    "\005\022\017\n\007LZoneID\030\010 \001(\t\"\234\001\n\021LogSelfBattleFlow"
    "\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002"
    "(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005"
    "\022\020\n\010Lvopenid\030\005 \002(\t\022\024\n\014Lcenterlevel\030\006 \002(\005"
    "\022\017\n\007LZoneID\030\007 \001(\t\"\346\001\n\013LogHeroFlow\022\022\n\nLGa"
    "meSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013L"
    "vGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvo"
    "penid\030\005 \002(\t\022\021\n\tLchartype\030\006 \002(\005\022\024\n\014LAddOr"
    "Reduce\030\007 \002(\005\022\023\n\013LGainReason\030\010 \002(\005\022\025\n\rLiC"
    "enterLevel\030\t \002(\005\022\017\n\007LiLevel\030\n \002(\005\022\017\n\007LZo"
    "neID\030\013 \001(\t\"\300\001\n\021LogHeroUpdateFlow\022\022\n\nLGam"
    "eSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013Lv"
    "GameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvop"
    "enid\030\005 \002(\t\022\021\n\tLchartype\030\006 \002(\005\022\016\n\006LLevel\030"
    "\007 \002(\005\022\025\n\rLiCenterLevel\030\010 \002(\005\022\017\n\007LZoneID\030"
    "\t \001(\t\"\274\001\n\013LogClanFlow\022\022\n\nLGameSvrId\030\001 \002("
    "\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003"
    " \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022"
    "\024\n\014LCreateOrDel\030\006 \002(\005\022\021\n\tLClanName\030\007 \002(\t"
    "\022\021\n\tLTargetId\030\010 \002(\t\022\017\n\007LZoneID\030\t \001(\t\"\327\001\n"
    "\021LogClanDonateFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024"
    "\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002("
    "\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\021\n\t"
    "LClanName\030\006 \002(\t\022\021\n\tLCharType\030\007 \002(\005\022\022\n\nLC"
    "harLevel\030\010 \002(\005\022\025\n\rLiCenterLevel\030\t \002(\005\022\017\n"
    "\007LZoneID\030\n \001(\t\"\227\001\n\022LogPlayerLevelFlow\022\022\n"
    "\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022"
    "\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n"
    "\010Lvopenid\030\005 \002(\t\022\016\n\006LLevel\030\006 \002(\005\022\017\n\007LZone"
    "ID\030\007 \001(\t\"\221\001\n\rLogSignInFlow\022\022\n\nLGameSvrId"
    "\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAp"
    "pid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005"
    " \002(\t\022\r\n\005Ldays\030\006 \002(\005\022\017\n\007LZoneID\030\007 \001(\t\"u\n\020"
    "LogOnlineNumbers\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014"
    "LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022"
    "\021\n\tLiNumbers\030\004 \002(\005\022\017\n\007LZoneID\030\005 \001(\t\"\263\001\n\016"
    "LogShareBattle\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014Ld"
    "tEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n"
    "\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\032\n\022LiES"
    "hareBattleType\030\006 \002(\005\022\022\n\nLvBattleId\030\007 \002(\t"
    "\022\017\n\007LZoneID\030\010 \001(\t\"\233\001\n\022LogViewShareBattle"
    "\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002"
    "(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005"
    "\022\020\n\010Lvopenid\030\005 \002(\t\022\022\n\nLvBattleId\030\006 \002(\t\022\017"
    "\n\007LZoneID\030\007 \001(\t\"\333\001\n\017LogActivityFlow\022\022\n\nL"
    "GameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n"
    "\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010L"
    "vopenid\030\005 \002(\t\022\024\n\014LiActivityId\030\006 \002(\005\022\027\n\017L"
    "iActivityLevel\030\007 \002(\005\022\017\n\007LvAward\030\010 \002(\t\022\025\n"
    "\rLiCenterLevel\030\t \002(\005\022\017\n\007LZoneID\030\n \001(\t\"\315\001"
    "\n\032LogFriendDonateRequestFlow\022\022\n\nLGameSvr"
    "Id\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGame"
    "Appid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid"
    "\030\005 \002(\t\022\023\n\013LvFriendUid\030\006 \002(\t\022\022\n\nLiCharTyp"
    "e\030\007 \002(\005\022\023\n\013LiCharLevel\030\010 \002(\005\022\017\n\007LZoneID\030"
    "\t \001(\t\"J\n\017LogGameSvrState\022\024\n\014LdtEventTime"
    "\030\001 \002(\t\022\020\n\010LvGameIP\030\002 \002(\t\022\017\n\007LZoneID\030\003 \001("
    "\t\"\376\001\n\026LogBuildingSpeedUpFlow\022\022\n\nLGameSvr"
    "Id\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGame"
    "Appid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid"
    "\030\005 \002(\t\022\026\n\016LiBuildingType\030\006 \002(\005\022\027\n\017LiSpee"
    "dUpSource\030\007 \002(\005\022\017\n\007LZoneID\030\010 \001(\t\"@\n\rSpee"
    "dUpSource\022\010\n\004Task\020\001\022\n\n\006Friend\020\002\022\020\n\014Syste"
    "mFriend\020\003\022\007\n\003Gem\020\004\"\311\001\n\022LogSpellCreateFlo"
    "w\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 "
    "\002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002("
    "\005\022\020\n\010Lvopenid\030\005 \002(\t\022\025\n\rLiCenterLevel\030\006 \002"
    "(\005\022\023\n\013LiSpellType\030\007 \002(\005\022\024\n\014LiSpellLevel\030"
    "\010 \002(\005\022\017\n\007LZoneID\030\t \001(\t\"\322\001\n\025LogStrategyCr"
    "eateFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEvent"
    "Time\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlat"
    "ID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\025\n\rLiCenterLe"
    "vel\030\006 \002(\005\022\026\n\016LiStrategyType\030\007 \002(\005\022\027\n\017LiS"
    "trategyLevel\030\010 \002(\005\022\017\n\007LZoneID\030\t \001(\t\"\302\001\n\022"
    "LogSuperLeagueFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024"
    "\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002("
    "\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\025\n\r"
    "LiCenterLevel\030\006 \002(\005\022\020\n\010LiOldSeg\030\007 \002(\005\022\020\n"
    "\010LiNewSeg\030\010 \002(\005\022\017\n\007LZoneID\030\t \001(\t\"\334\001\n\017Log"
    "SpellUseFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtE"
    "ventTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007L"
    "PlatID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\025\n\rLiCent"
    "erLevel\030\006 \002(\005\022\023\n\013LiSpellType\030\007 \002(\005\022\024\n\014Li"
    "SpellLevel\030\010 \002(\005\022\024\n\014LiBattleType\030\t \002(\005\022\017"
    "\n\007LZoneID\030\n \001(\t\"\345\001\n\022LogStrategyUseFlow\022\022"
    "\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t"
    "\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020"
    "\n\010Lvopenid\030\005 \002(\t\022\025\n\rLiCenterLevel\030\006 \002(\005\022"
    "\026\n\016LiStrategyType\030\007 \002(\005\022\027\n\017LiStrategyLev"
    "el\030\010 \002(\005\022\024\n\014LiBattleType\030\t \002(\005\022\017\n\007LZoneI"
    "D\030\n \001(\t\"\200\002\n\022LogReceiveCharFlow\022\022\n\nLGameS"
    "vrId\030\001 \002(\t\022\024\n\014LdtEventTime\030\002 \002(\t\022\023\n\013LvGa"
    "meAppid\030\003 \002(\t\022\017\n\007LPlatID\030\004 \002(\005\022\020\n\010Lvopen"
    "id\030\005 \002(\t\022\022\n\nLichartype\030\006 \002(\005\022\023\n\013Licharle"
    "vel\030\007 \002(\005\022\020\n\010Lisource\030\010 \002(\005\022\025\n\rLiCenterL"
    "evel\030\t \002(\005\022\017\n\007LZoneID\030\n \001(\t\"%\n\rReceiveSo"
    "urce\022\n\n\006Friend\020\001\022\010\n\004Clan\020\002\"\246\003\n\022LogFriend"
    "HouseFlow\022\022\n\nLGameSvrId\030\001 \002(\t\022\024\n\014LdtEven"
    "tTime\030\002 \002(\t\022\023\n\013LvGameAppid\030\003 \002(\t\022\017\n\007LPla"
    "tID\030\004 \002(\005\022\020\n\010Lvopenid\030\005 \002(\t\022\025\n\rLiCenterL"
    "evel\030\006 \002(\005\022\025\n\nLiResType1\030\007 \001(\005:\0010\022\024\n\tLiR"
    "esNum1\030\010 \001(\005:\0010\022\025\n\nLiResType2\030\t \001(\005:\0010\022\024"
    "\n\tLiResNum2\030\n \001(\005:\0010\022\025\n\nLiResType3\030\013 \001(\005"
    ":\0010\022\024\n\tLiResNum3\030\014 \001(\005:\0010\022\025\n\nLiResType4\030"
    "\r \001(\005:\0010\022\024\n\tLiResNum4\030\016 \001(\005:\0010\022\017\n\007LZoneI"
    "D\030\017 \001(\t\"R\n\007ResType\022\010\n\004Gold\020\001\022\010\n\004Food\020\002\022\007"
    "\n\003Gem\020\003\022\t\n\005Wuhun\020\004\022\010\n\004Tili\020\005\022\n\n\006Dragon\020\006"
    "\022\t\n\005Pekka\020\007\"1\n\rLogCommonFlow\022\017\n\007LDetail\030"
    "\001 \002(\t\022\017\n\007LZoneID\030\002 \001(\t\"v\n\007TpLogin\022\020\n\010TvO"
    "penid\030\001 \002(\t\022\020\n\010nChannel\030\002 \002(\005\022\017\n\007nConnId"
    "\030\003 \002(\004\022\022\n\nTClientVer\030\004 \002(\005\022\021\n\tTClientIp\030"
    "\005 \002(\r\022\017\n\007LZoneID\030\006 \001(\t\"\?\n\010TpLogout\022\020\n\010Tv"
    "Openid\030\001 \002(\t\022\020\n\010nChannel\030\002 \002(\005\022\017\n\007LZoneI"
    "D\030\003 \001(\t\"P\n\nTpDataRecv\022\020\n\010TvOpenid\030\001 \002(\t\022"
    "\020\n\010nChannel\030\002 \002(\005\022\r\n\005TData\030\003 \002(\014\022\017\n\007LZon"
    "eID\030\004 \001(\t\"=\n\nTpDataSend\022\017\n\007nConnId\030\001 \002(\004"
    "\022\r\n\005TData\030\002 \002(\014\022\017\n\007LZoneID\030\003 \001(\t", 7712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
  logPlayerLoginLogout::default_instance_ = new logPlayerLoginLogout();
  LogPlayerRegister::default_instance_ = new LogPlayerRegister();
  LogPlayerLogin::default_instance_ = new LogPlayerLogin();
  LogPlayerLogout::default_instance_ = new LogPlayerLogout();
  LogMoneyFlow::default_instance_ = new LogMoneyFlow();
  LogSnsFlow::default_instance_ = new LogSnsFlow();
  LogRoundFlow::default_instance_ = new LogRoundFlow();
  LogBuildingUpgradeFlow::default_instance_ = new LogBuildingUpgradeFlow();
  LogTaskFlow::default_instance_ = new LogTaskFlow();
  LogTrainingFlow::default_instance_ = new LogTrainingFlow();
  LogUpdateCharFlow::default_instance_ = new LogUpdateCharFlow();
  LogSelfBattleFlow::default_instance_ = new LogSelfBattleFlow();
  LogHeroFlow::default_instance_ = new LogHeroFlow();
  LogHeroUpdateFlow::default_instance_ = new LogHeroUpdateFlow();
  LogClanFlow::default_instance_ = new LogClanFlow();
  LogClanDonateFlow::default_instance_ = new LogClanDonateFlow();
  LogPlayerLevelFlow::default_instance_ = new LogPlayerLevelFlow();
  LogSignInFlow::default_instance_ = new LogSignInFlow();
  LogOnlineNumbers::default_instance_ = new LogOnlineNumbers();
  LogShareBattle::default_instance_ = new LogShareBattle();
  LogViewShareBattle::default_instance_ = new LogViewShareBattle();
  LogActivityFlow::default_instance_ = new LogActivityFlow();
  LogFriendDonateRequestFlow::default_instance_ = new LogFriendDonateRequestFlow();
  LogGameSvrState::default_instance_ = new LogGameSvrState();
  LogBuildingSpeedUpFlow::default_instance_ = new LogBuildingSpeedUpFlow();
  LogSpellCreateFlow::default_instance_ = new LogSpellCreateFlow();
  LogStrategyCreateFlow::default_instance_ = new LogStrategyCreateFlow();
  LogSuperLeagueFlow::default_instance_ = new LogSuperLeagueFlow();
  LogSpellUseFlow::default_instance_ = new LogSpellUseFlow();
  LogStrategyUseFlow::default_instance_ = new LogStrategyUseFlow();
  LogReceiveCharFlow::default_instance_ = new LogReceiveCharFlow();
  LogFriendHouseFlow::default_instance_ = new LogFriendHouseFlow();
  LogCommonFlow::default_instance_ = new LogCommonFlow();
  TpLogin::default_instance_ = new TpLogin();
  TpLogout::default_instance_ = new TpLogout();
  TpDataRecv::default_instance_ = new TpDataRecv();
  TpDataSend::default_instance_ = new TpDataSend();
  logPlayerLoginLogout::default_instance_->InitAsDefaultInstance();
  LogPlayerRegister::default_instance_->InitAsDefaultInstance();
  LogPlayerLogin::default_instance_->InitAsDefaultInstance();
  LogPlayerLogout::default_instance_->InitAsDefaultInstance();
  LogMoneyFlow::default_instance_->InitAsDefaultInstance();
  LogSnsFlow::default_instance_->InitAsDefaultInstance();
  LogRoundFlow::default_instance_->InitAsDefaultInstance();
  LogBuildingUpgradeFlow::default_instance_->InitAsDefaultInstance();
  LogTaskFlow::default_instance_->InitAsDefaultInstance();
  LogTrainingFlow::default_instance_->InitAsDefaultInstance();
  LogUpdateCharFlow::default_instance_->InitAsDefaultInstance();
  LogSelfBattleFlow::default_instance_->InitAsDefaultInstance();
  LogHeroFlow::default_instance_->InitAsDefaultInstance();
  LogHeroUpdateFlow::default_instance_->InitAsDefaultInstance();
  LogClanFlow::default_instance_->InitAsDefaultInstance();
  LogClanDonateFlow::default_instance_->InitAsDefaultInstance();
  LogPlayerLevelFlow::default_instance_->InitAsDefaultInstance();
  LogSignInFlow::default_instance_->InitAsDefaultInstance();
  LogOnlineNumbers::default_instance_->InitAsDefaultInstance();
  LogShareBattle::default_instance_->InitAsDefaultInstance();
  LogViewShareBattle::default_instance_->InitAsDefaultInstance();
  LogActivityFlow::default_instance_->InitAsDefaultInstance();
  LogFriendDonateRequestFlow::default_instance_->InitAsDefaultInstance();
  LogGameSvrState::default_instance_->InitAsDefaultInstance();
  LogBuildingSpeedUpFlow::default_instance_->InitAsDefaultInstance();
  LogSpellCreateFlow::default_instance_->InitAsDefaultInstance();
  LogStrategyCreateFlow::default_instance_->InitAsDefaultInstance();
  LogSuperLeagueFlow::default_instance_->InitAsDefaultInstance();
  LogSpellUseFlow::default_instance_->InitAsDefaultInstance();
  LogStrategyUseFlow::default_instance_->InitAsDefaultInstance();
  LogReceiveCharFlow::default_instance_->InitAsDefaultInstance();
  LogFriendHouseFlow::default_instance_->InitAsDefaultInstance();
  LogCommonFlow::default_instance_->InitAsDefaultInstance();
  TpLogin::default_instance_->InitAsDefaultInstance();
  TpLogout::default_instance_->InitAsDefaultInstance();
  TpDataRecv::default_instance_->InitAsDefaultInstance();
  TpDataSend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2eproto {
  StaticDescriptorInitializer_log_2eproto() {
    protobuf_AddDesc_log_2eproto();
  }
} static_descriptor_initializer_log_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int logPlayerLoginLogout::kPlayeridFieldNumber;
const int logPlayerLoginLogout::kTimeFieldNumber;
const int logPlayerLoginLogout::kLogoutFieldNumber;
const int logPlayerLoginLogout::kIpFieldNumber;
#endif  // !_MSC_VER

logPlayerLoginLogout::logPlayerLoginLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void logPlayerLoginLogout::InitAsDefaultInstance() {
}

logPlayerLoginLogout::logPlayerLoginLogout(const logPlayerLoginLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void logPlayerLoginLogout::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  logout_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logPlayerLoginLogout::~logPlayerLoginLogout() {
  SharedDtor();
}

void logPlayerLoginLogout::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void logPlayerLoginLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logPlayerLoginLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logPlayerLoginLogout_descriptor_;
}

const logPlayerLoginLogout& logPlayerLoginLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

logPlayerLoginLogout* logPlayerLoginLogout::default_instance_ = NULL;

logPlayerLoginLogout* logPlayerLoginLogout::New() const {
  return new logPlayerLoginLogout;
}

void logPlayerLoginLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    logout_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logPlayerLoginLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logout;
        break;
      }
      
      // required bool logout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logout_)));
          set_has_logout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void logPlayerLoginLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // required bool logout = 3;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->logout(), output);
  }
  
  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* logPlayerLoginLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // required bool logout = 3;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->logout(), target);
  }
  
  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int logPlayerLoginLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required bool logout = 3;
    if (has_logout()) {
      total_size += 1 + 1;
    }
    
    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logPlayerLoginLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logPlayerLoginLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logPlayerLoginLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logPlayerLoginLogout::MergeFrom(const logPlayerLoginLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logout()) {
      set_logout(from.logout());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logPlayerLoginLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logPlayerLoginLogout::CopyFrom(const logPlayerLoginLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logPlayerLoginLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void logPlayerLoginLogout::Swap(logPlayerLoginLogout* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(time_, other->time_);
    std::swap(logout_, other->logout_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logPlayerLoginLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logPlayerLoginLogout_descriptor_;
  metadata.reflection = logPlayerLoginLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogPlayerRegister::kLGameSvrIdFieldNumber;
const int LogPlayerRegister::kLdtEventTimeFieldNumber;
const int LogPlayerRegister::kLvGameAppidFieldNumber;
const int LogPlayerRegister::kLPlatIDFieldNumber;
const int LogPlayerRegister::kLvopenidFieldNumber;
const int LogPlayerRegister::kLClientVersionFieldNumber;
const int LogPlayerRegister::kLSystemHardwareFieldNumber;
const int LogPlayerRegister::kLTelecomOperFieldNumber;
const int LogPlayerRegister::kLNetworkFieldNumber;
const int LogPlayerRegister::kLRegChannelFieldNumber;
const int LogPlayerRegister::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogPlayerRegister::LogPlayerRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogPlayerRegister::InitAsDefaultInstance() {
}

LogPlayerRegister::LogPlayerRegister(const LogPlayerRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogPlayerRegister::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lregchannel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlayerRegister::~LogPlayerRegister() {
  SharedDtor();
}

void LogPlayerRegister::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete lclientversion_;
  }
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete lsystemhardware_;
  }
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete ltelecomoper_;
  }
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    delete lnetwork_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogPlayerRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlayerRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlayerRegister_descriptor_;
}

const LogPlayerRegister& LogPlayerRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogPlayerRegister* LogPlayerRegister::default_instance_ = NULL;

LogPlayerRegister* LogPlayerRegister::New() const {
  return new LogPlayerRegister;
}

void LogPlayerRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    if (has_lclientversion()) {
      if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
        lclientversion_->clear();
      }
    }
    if (has_lsystemhardware()) {
      if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
        lsystemhardware_->clear();
      }
    }
    if (has_ltelecomoper()) {
      if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
        ltelecomoper_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lnetwork()) {
      if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
        lnetwork_->clear();
      }
    }
    lregchannel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlayerRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LClientVersion;
        break;
      }
      
      // required string LClientVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lclientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lclientversion().data(), this->lclientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LSystemHardware;
        break;
      }
      
      // required string LSystemHardware = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LSystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lsystemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lsystemhardware().data(), this->lsystemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LTelecomOper;
        break;
      }
      
      // required string LTelecomOper = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LTelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltelecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ltelecomoper().data(), this->ltelecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LNetwork;
        break;
      }
      
      // required string LNetwork = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LNetwork:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lnetwork()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lnetwork().data(), this->lnetwork().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LRegChannel;
        break;
      }
      
      // required int32 LRegChannel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRegChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lregchannel_)));
          set_has_lregchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogPlayerRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required string LClientVersion = 6;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lclientversion(), output);
  }
  
  // required string LSystemHardware = 7;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lsystemhardware(), output);
  }
  
  // required string LTelecomOper = 8;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ltelecomoper(), output);
  }
  
  // required string LNetwork = 9;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lnetwork(), output);
  }
  
  // required int32 LRegChannel = 10;
  if (has_lregchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lregchannel(), output);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogPlayerRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required string LClientVersion = 6;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lclientversion(), target);
  }
  
  // required string LSystemHardware = 7;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lsystemhardware(), target);
  }
  
  // required string LTelecomOper = 8;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ltelecomoper(), target);
  }
  
  // required string LNetwork = 9;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lnetwork(), target);
  }
  
  // required int32 LRegChannel = 10;
  if (has_lregchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lregchannel(), target);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogPlayerRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required string LClientVersion = 6;
    if (has_lclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lclientversion());
    }
    
    // required string LSystemHardware = 7;
    if (has_lsystemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lsystemhardware());
    }
    
    // required string LTelecomOper = 8;
    if (has_ltelecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltelecomoper());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string LNetwork = 9;
    if (has_lnetwork()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lnetwork());
    }
    
    // required int32 LRegChannel = 10;
    if (has_lregchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lregchannel());
    }
    
    // optional string LZoneID = 11;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlayerRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlayerRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlayerRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlayerRegister::MergeFrom(const LogPlayerRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lclientversion()) {
      set_lclientversion(from.lclientversion());
    }
    if (from.has_lsystemhardware()) {
      set_lsystemhardware(from.lsystemhardware());
    }
    if (from.has_ltelecomoper()) {
      set_ltelecomoper(from.ltelecomoper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lnetwork()) {
      set_lnetwork(from.lnetwork());
    }
    if (from.has_lregchannel()) {
      set_lregchannel(from.lregchannel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlayerRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlayerRegister::CopyFrom(const LogPlayerRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlayerRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void LogPlayerRegister::Swap(LogPlayerRegister* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lclientversion_, other->lclientversion_);
    std::swap(lsystemhardware_, other->lsystemhardware_);
    std::swap(ltelecomoper_, other->ltelecomoper_);
    std::swap(lnetwork_, other->lnetwork_);
    std::swap(lregchannel_, other->lregchannel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlayerRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlayerRegister_descriptor_;
  metadata.reflection = LogPlayerRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogPlayerLogin::kLGameSvrIdFieldNumber;
const int LogPlayerLogin::kLdtEventTimeFieldNumber;
const int LogPlayerLogin::kLvGameAppidFieldNumber;
const int LogPlayerLogin::kLPlatIDFieldNumber;
const int LogPlayerLogin::kLvopenidFieldNumber;
const int LogPlayerLogin::kLLevelFieldNumber;
const int LogPlayerLogin::kLPlayerFriendsNumFieldNumber;
const int LogPlayerLogin::kLClientVersionFieldNumber;
const int LogPlayerLogin::kLSystemHardwareFieldNumber;
const int LogPlayerLogin::kLTelecomOperFieldNumber;
const int LogPlayerLogin::kLNetworkFieldNumber;
const int LogPlayerLogin::kLLoginChannelFieldNumber;
const int LogPlayerLogin::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogPlayerLogin::LogPlayerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogPlayerLogin::InitAsDefaultInstance() {
}

LogPlayerLogin::LogPlayerLogin(const LogPlayerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogPlayerLogin::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  llevel_ = 0;
  lplayerfriendsnum_ = 0;
  lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lloginchannel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlayerLogin::~LogPlayerLogin() {
  SharedDtor();
}

void LogPlayerLogin::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete lclientversion_;
  }
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete lsystemhardware_;
  }
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete ltelecomoper_;
  }
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    delete lnetwork_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogPlayerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlayerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlayerLogin_descriptor_;
}

const LogPlayerLogin& LogPlayerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogPlayerLogin* LogPlayerLogin::default_instance_ = NULL;

LogPlayerLogin* LogPlayerLogin::New() const {
  return new LogPlayerLogin;
}

void LogPlayerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    llevel_ = 0;
    lplayerfriendsnum_ = 0;
    if (has_lclientversion()) {
      if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
        lclientversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lsystemhardware()) {
      if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
        lsystemhardware_->clear();
      }
    }
    if (has_ltelecomoper()) {
      if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
        ltelecomoper_->clear();
      }
    }
    if (has_lnetwork()) {
      if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
        lnetwork_->clear();
      }
    }
    lloginchannel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlayerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LPlayerFriendsNum;
        break;
      }
      
      // required int32 LPlayerFriendsNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlayerFriendsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplayerfriendsnum_)));
          set_has_lplayerfriendsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LClientVersion;
        break;
      }
      
      // required string LClientVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lclientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lclientversion().data(), this->lclientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LSystemHardware;
        break;
      }
      
      // required string LSystemHardware = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LSystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lsystemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lsystemhardware().data(), this->lsystemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LTelecomOper;
        break;
      }
      
      // required string LTelecomOper = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LTelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltelecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ltelecomoper().data(), this->ltelecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LNetwork;
        break;
      }
      
      // required string LNetwork = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LNetwork:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lnetwork()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lnetwork().data(), this->lnetwork().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LLoginChannel;
        break;
      }
      
      // required int32 LLoginChannel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLoginChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lloginchannel_)));
          set_has_lloginchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogPlayerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->llevel(), output);
  }
  
  // required int32 LPlayerFriendsNum = 7;
  if (has_lplayerfriendsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lplayerfriendsnum(), output);
  }
  
  // required string LClientVersion = 8;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lclientversion(), output);
  }
  
  // required string LSystemHardware = 9;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lsystemhardware(), output);
  }
  
  // required string LTelecomOper = 10;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ltelecomoper(), output);
  }
  
  // required string LNetwork = 11;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->lnetwork(), output);
  }
  
  // required int32 LLoginChannel = 12;
  if (has_lloginchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lloginchannel(), output);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogPlayerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->llevel(), target);
  }
  
  // required int32 LPlayerFriendsNum = 7;
  if (has_lplayerfriendsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lplayerfriendsnum(), target);
  }
  
  // required string LClientVersion = 8;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lclientversion(), target);
  }
  
  // required string LSystemHardware = 9;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lsystemhardware(), target);
  }
  
  // required string LTelecomOper = 10;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ltelecomoper(), target);
  }
  
  // required string LNetwork = 11;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lnetwork(), target);
  }
  
  // required int32 LLoginChannel = 12;
  if (has_lloginchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lloginchannel(), target);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogPlayerLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LLevel = 6;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LPlayerFriendsNum = 7;
    if (has_lplayerfriendsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplayerfriendsnum());
    }
    
    // required string LClientVersion = 8;
    if (has_lclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lclientversion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string LSystemHardware = 9;
    if (has_lsystemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lsystemhardware());
    }
    
    // required string LTelecomOper = 10;
    if (has_ltelecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltelecomoper());
    }
    
    // required string LNetwork = 11;
    if (has_lnetwork()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lnetwork());
    }
    
    // required int32 LLoginChannel = 12;
    if (has_lloginchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lloginchannel());
    }
    
    // optional string LZoneID = 13;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlayerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlayerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlayerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlayerLogin::MergeFrom(const LogPlayerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_lplayerfriendsnum()) {
      set_lplayerfriendsnum(from.lplayerfriendsnum());
    }
    if (from.has_lclientversion()) {
      set_lclientversion(from.lclientversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lsystemhardware()) {
      set_lsystemhardware(from.lsystemhardware());
    }
    if (from.has_ltelecomoper()) {
      set_ltelecomoper(from.ltelecomoper());
    }
    if (from.has_lnetwork()) {
      set_lnetwork(from.lnetwork());
    }
    if (from.has_lloginchannel()) {
      set_lloginchannel(from.lloginchannel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlayerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlayerLogin::CopyFrom(const LogPlayerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlayerLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void LogPlayerLogin::Swap(LogPlayerLogin* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(llevel_, other->llevel_);
    std::swap(lplayerfriendsnum_, other->lplayerfriendsnum_);
    std::swap(lclientversion_, other->lclientversion_);
    std::swap(lsystemhardware_, other->lsystemhardware_);
    std::swap(ltelecomoper_, other->ltelecomoper_);
    std::swap(lnetwork_, other->lnetwork_);
    std::swap(lloginchannel_, other->lloginchannel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlayerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlayerLogin_descriptor_;
  metadata.reflection = LogPlayerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogPlayerLogout::kLGameSvrIdFieldNumber;
const int LogPlayerLogout::kLdtEventTimeFieldNumber;
const int LogPlayerLogout::kLvGameAppidFieldNumber;
const int LogPlayerLogout::kLPlatIDFieldNumber;
const int LogPlayerLogout::kLvopenidFieldNumber;
const int LogPlayerLogout::kLOnlineTimeFieldNumber;
const int LogPlayerLogout::kLLevelFieldNumber;
const int LogPlayerLogout::kLPlayerFriendsNumFieldNumber;
const int LogPlayerLogout::kLClientVersionFieldNumber;
const int LogPlayerLogout::kLSystemHardwareFieldNumber;
const int LogPlayerLogout::kLTelecomOperFieldNumber;
const int LogPlayerLogout::kLNetworkFieldNumber;
const int LogPlayerLogout::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogPlayerLogout::LogPlayerLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogPlayerLogout::InitAsDefaultInstance() {
}

LogPlayerLogout::LogPlayerLogout(const LogPlayerLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogPlayerLogout::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lonlinetime_ = 0;
  llevel_ = 0;
  lplayerfriendsnum_ = 0;
  lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlayerLogout::~LogPlayerLogout() {
  SharedDtor();
}

void LogPlayerLogout::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete lclientversion_;
  }
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete lsystemhardware_;
  }
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete ltelecomoper_;
  }
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    delete lnetwork_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogPlayerLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlayerLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlayerLogout_descriptor_;
}

const LogPlayerLogout& LogPlayerLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogPlayerLogout* LogPlayerLogout::default_instance_ = NULL;

LogPlayerLogout* LogPlayerLogout::New() const {
  return new LogPlayerLogout;
}

void LogPlayerLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lonlinetime_ = 0;
    llevel_ = 0;
    lplayerfriendsnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lclientversion()) {
      if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
        lclientversion_->clear();
      }
    }
    if (has_lsystemhardware()) {
      if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
        lsystemhardware_->clear();
      }
    }
    if (has_ltelecomoper()) {
      if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
        ltelecomoper_->clear();
      }
    }
    if (has_lnetwork()) {
      if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
        lnetwork_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlayerLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LOnlineTime;
        break;
      }
      
      // required int32 LOnlineTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lonlinetime_)));
          set_has_lonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LPlayerFriendsNum;
        break;
      }
      
      // required int32 LPlayerFriendsNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlayerFriendsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplayerfriendsnum_)));
          set_has_lplayerfriendsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LClientVersion;
        break;
      }
      
      // required string LClientVersion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lclientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lclientversion().data(), this->lclientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LSystemHardware;
        break;
      }
      
      // required string LSystemHardware = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LSystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lsystemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lsystemhardware().data(), this->lsystemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LTelecomOper;
        break;
      }
      
      // required string LTelecomOper = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LTelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltelecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ltelecomoper().data(), this->ltelecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_LNetwork;
        break;
      }
      
      // required string LNetwork = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LNetwork:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lnetwork()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lnetwork().data(), this->lnetwork().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogPlayerLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LOnlineTime = 6;
  if (has_lonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lonlinetime(), output);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->llevel(), output);
  }
  
  // required int32 LPlayerFriendsNum = 8;
  if (has_lplayerfriendsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lplayerfriendsnum(), output);
  }
  
  // required string LClientVersion = 9;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lclientversion(), output);
  }
  
  // required string LSystemHardware = 10;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lsystemhardware(), output);
  }
  
  // required string LTelecomOper = 11;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ltelecomoper(), output);
  }
  
  // required string LNetwork = 12;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lnetwork(), output);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogPlayerLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LOnlineTime = 6;
  if (has_lonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lonlinetime(), target);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->llevel(), target);
  }
  
  // required int32 LPlayerFriendsNum = 8;
  if (has_lplayerfriendsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lplayerfriendsnum(), target);
  }
  
  // required string LClientVersion = 9;
  if (has_lclientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclientversion().data(), this->lclientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lclientversion(), target);
  }
  
  // required string LSystemHardware = 10;
  if (has_lsystemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lsystemhardware().data(), this->lsystemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lsystemhardware(), target);
  }
  
  // required string LTelecomOper = 11;
  if (has_ltelecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltelecomoper().data(), this->ltelecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ltelecomoper(), target);
  }
  
  // required string LNetwork = 12;
  if (has_lnetwork()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lnetwork().data(), this->lnetwork().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lnetwork(), target);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogPlayerLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LOnlineTime = 6;
    if (has_lonlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lonlinetime());
    }
    
    // required int32 LLevel = 7;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LPlayerFriendsNum = 8;
    if (has_lplayerfriendsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplayerfriendsnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string LClientVersion = 9;
    if (has_lclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lclientversion());
    }
    
    // required string LSystemHardware = 10;
    if (has_lsystemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lsystemhardware());
    }
    
    // required string LTelecomOper = 11;
    if (has_ltelecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltelecomoper());
    }
    
    // required string LNetwork = 12;
    if (has_lnetwork()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lnetwork());
    }
    
    // optional string LZoneID = 13;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlayerLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlayerLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlayerLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlayerLogout::MergeFrom(const LogPlayerLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lonlinetime()) {
      set_lonlinetime(from.lonlinetime());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_lplayerfriendsnum()) {
      set_lplayerfriendsnum(from.lplayerfriendsnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lclientversion()) {
      set_lclientversion(from.lclientversion());
    }
    if (from.has_lsystemhardware()) {
      set_lsystemhardware(from.lsystemhardware());
    }
    if (from.has_ltelecomoper()) {
      set_ltelecomoper(from.ltelecomoper());
    }
    if (from.has_lnetwork()) {
      set_lnetwork(from.lnetwork());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlayerLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlayerLogout::CopyFrom(const LogPlayerLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlayerLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void LogPlayerLogout::Swap(LogPlayerLogout* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lonlinetime_, other->lonlinetime_);
    std::swap(llevel_, other->llevel_);
    std::swap(lplayerfriendsnum_, other->lplayerfriendsnum_);
    std::swap(lclientversion_, other->lclientversion_);
    std::swap(lsystemhardware_, other->lsystemhardware_);
    std::swap(ltelecomoper_, other->ltelecomoper_);
    std::swap(lnetwork_, other->lnetwork_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlayerLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlayerLogout_descriptor_;
  metadata.reflection = LogPlayerLogout_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogMoneyFlow_ADDORREDUCE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMoneyFlow_ADDORREDUCE_descriptor_;
}
bool LogMoneyFlow_ADDORREDUCE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow::ADD;
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow::REDUCE;
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow::ADDORREDUCE_MIN;
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow::ADDORREDUCE_MAX;
const int LogMoneyFlow::ADDORREDUCE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogMoneyFlow::kLGameSvrIdFieldNumber;
const int LogMoneyFlow::kLdtEventTimeFieldNumber;
const int LogMoneyFlow::kLSequenceFieldNumber;
const int LogMoneyFlow::kLvGameAppidFieldNumber;
const int LogMoneyFlow::kLPlatIDFieldNumber;
const int LogMoneyFlow::kLvopenidFieldNumber;
const int LogMoneyFlow::kLLevelFieldNumber;
const int LogMoneyFlow::kLiMoneyFieldNumber;
const int LogMoneyFlow::kLReasonFieldNumber;
const int LogMoneyFlow::kLAddOrReduceFieldNumber;
const int LogMoneyFlow::kLiMoneyTypeFieldNumber;
const int LogMoneyFlow::kLiCenterLevelFieldNumber;
const int LogMoneyFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogMoneyFlow::LogMoneyFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMoneyFlow::InitAsDefaultInstance() {
}

LogMoneyFlow::LogMoneyFlow(const LogMoneyFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMoneyFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lsequence_ = 0;
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  llevel_ = 0;
  limoney_ = 0;
  lreason_ = 0;
  laddorreduce_ = 0;
  limoneytype_ = 0;
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMoneyFlow::~LogMoneyFlow() {
  SharedDtor();
}

void LogMoneyFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogMoneyFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMoneyFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMoneyFlow_descriptor_;
}

const LogMoneyFlow& LogMoneyFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogMoneyFlow* LogMoneyFlow::default_instance_ = NULL;

LogMoneyFlow* LogMoneyFlow::New() const {
  return new LogMoneyFlow;
}

void LogMoneyFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    lsequence_ = 0;
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    llevel_ = 0;
    limoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lreason_ = 0;
    laddorreduce_ = 0;
    limoneytype_ = 0;
    licenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMoneyFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LSequence;
        break;
      }
      
      // optional int32 LSequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LSequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lsequence_)));
          set_has_lsequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiMoney;
        break;
      }
      
      // required int32 LiMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limoney_)));
          set_has_limoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LReason;
        break;
      }
      
      // required int32 LReason = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lreason_)));
          set_has_lreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LAddOrReduce;
        break;
      }
      
      // required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LAddOrReduce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::LogMoneyFlow_ADDORREDUCE_IsValid(value)) {
            set_laddorreduce(static_cast< ::rpc::LogMoneyFlow_ADDORREDUCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LiMoneyType;
        break;
      }
      
      // required int32 LiMoneyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiMoneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limoneytype_)));
          set_has_limoneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMoneyFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // optional int32 LSequence = 3;
  if (has_lsequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lsequence(), output);
  }
  
  // required string LvGameAppid = 4;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 5;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lplatid(), output);
  }
  
  // required string Lvopenid = 6;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lvopenid(), output);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->llevel(), output);
  }
  
  // required int32 LiMoney = 8;
  if (has_limoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limoney(), output);
  }
  
  // required int32 LReason = 9;
  if (has_lreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lreason(), output);
  }
  
  // required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
  if (has_laddorreduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->laddorreduce(), output);
  }
  
  // required int32 LiMoneyType = 11;
  if (has_limoneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->limoneytype(), output);
  }
  
  // required int32 LiCenterLevel = 12;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMoneyFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // optional int32 LSequence = 3;
  if (has_lsequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lsequence(), target);
  }
  
  // required string LvGameAppid = 4;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 5;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lplatid(), target);
  }
  
  // required string Lvopenid = 6;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lvopenid(), target);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->llevel(), target);
  }
  
  // required int32 LiMoney = 8;
  if (has_limoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limoney(), target);
  }
  
  // required int32 LReason = 9;
  if (has_lreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lreason(), target);
  }
  
  // required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
  if (has_laddorreduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->laddorreduce(), target);
  }
  
  // required int32 LiMoneyType = 11;
  if (has_limoneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->limoneytype(), target);
  }
  
  // required int32 LiCenterLevel = 12;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 13;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMoneyFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // optional int32 LSequence = 3;
    if (has_lsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lsequence());
    }
    
    // required string LvGameAppid = 4;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 5;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 6;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LLevel = 7;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LiMoney = 8;
    if (has_limoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LReason = 9;
    if (has_lreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lreason());
    }
    
    // required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
    if (has_laddorreduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->laddorreduce());
    }
    
    // required int32 LiMoneyType = 11;
    if (has_limoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limoneytype());
    }
    
    // required int32 LiCenterLevel = 12;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional string LZoneID = 13;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMoneyFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMoneyFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMoneyFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMoneyFlow::MergeFrom(const LogMoneyFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lsequence()) {
      set_lsequence(from.lsequence());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_limoney()) {
      set_limoney(from.limoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lreason()) {
      set_lreason(from.lreason());
    }
    if (from.has_laddorreduce()) {
      set_laddorreduce(from.laddorreduce());
    }
    if (from.has_limoneytype()) {
      set_limoneytype(from.limoneytype());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMoneyFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMoneyFlow::CopyFrom(const LogMoneyFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMoneyFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ffb) != 0x00000ffb) return false;
  
  return true;
}

void LogMoneyFlow::Swap(LogMoneyFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lsequence_, other->lsequence_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(llevel_, other->llevel_);
    std::swap(limoney_, other->limoney_);
    std::swap(lreason_, other->lreason_);
    std::swap(laddorreduce_, other->laddorreduce_);
    std::swap(limoneytype_, other->limoneytype_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMoneyFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMoneyFlow_descriptor_;
  metadata.reflection = LogMoneyFlow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogSnsFlow_SNSTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSnsFlow_SNSTYPE_descriptor_;
}
bool LogSnsFlow_SNSTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogSnsFlow_SNSTYPE LogSnsFlow::SHOWOFF;
const LogSnsFlow_SNSTYPE LogSnsFlow::INVITE;
const LogSnsFlow_SNSTYPE LogSnsFlow::SENDHEART;
const LogSnsFlow_SNSTYPE LogSnsFlow::RECEIVEHEART;
const LogSnsFlow_SNSTYPE LogSnsFlow::SENDEMAIL;
const LogSnsFlow_SNSTYPE LogSnsFlow::RECEIVEEMAIL;
const LogSnsFlow_SNSTYPE LogSnsFlow::SHARE;
const LogSnsFlow_SNSTYPE LogSnsFlow::SpeedUp;
const LogSnsFlow_SNSTYPE LogSnsFlow::ReleaseTime;
const LogSnsFlow_SNSTYPE LogSnsFlow::SpeedUp_Help;
const LogSnsFlow_SNSTYPE LogSnsFlow::ReleaseTime_Help;
const LogSnsFlow_SNSTYPE LogSnsFlow::OTHER;
const LogSnsFlow_SNSTYPE LogSnsFlow::FriendDonate;
const LogSnsFlow_SNSTYPE LogSnsFlow::SNSTYPE_MIN;
const LogSnsFlow_SNSTYPE LogSnsFlow::SNSTYPE_MAX;
const int LogSnsFlow::SNSTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogSnsFlow::kLGameSvrIdFieldNumber;
const int LogSnsFlow::kLdtEventTimeFieldNumber;
const int LogSnsFlow::kLvGameAppidFieldNumber;
const int LogSnsFlow::kLPlatIDFieldNumber;
const int LogSnsFlow::kLActorOpenIDFieldNumber;
const int LogSnsFlow::kLRecNumFieldNumber;
const int LogSnsFlow::kLCountFieldNumber;
const int LogSnsFlow::kLSNSTypeFieldNumber;
const int LogSnsFlow::kLSNSSubTypeFieldNumber;
const int LogSnsFlow::kLiCenterLevelFieldNumber;
const int LogSnsFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSnsFlow::LogSnsFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSnsFlow::InitAsDefaultInstance() {
}

LogSnsFlow::LogSnsFlow(const LogSnsFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSnsFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lactoropenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lrecnum_ = 0;
  lcount_ = 0;
  lsnstype_ = 0;
  lsnssubtype_ = 0;
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSnsFlow::~LogSnsFlow() {
  SharedDtor();
}

void LogSnsFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lactoropenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lactoropenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSnsFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSnsFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSnsFlow_descriptor_;
}

const LogSnsFlow& LogSnsFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSnsFlow* LogSnsFlow::default_instance_ = NULL;

LogSnsFlow* LogSnsFlow::New() const {
  return new LogSnsFlow;
}

void LogSnsFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lactoropenid()) {
      if (lactoropenid_ != &::google::protobuf::internal::kEmptyString) {
        lactoropenid_->clear();
      }
    }
    lrecnum_ = 0;
    lcount_ = 0;
    lsnstype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lsnssubtype_ = 0;
    licenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSnsFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LActorOpenID;
        break;
      }
      
      // required string LActorOpenID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LActorOpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lactoropenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lactoropenid().data(), this->lactoropenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LRecNum;
        break;
      }
      
      // optional int32 LRecNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRecNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lrecnum_)));
          set_has_lrecnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LCount;
        break;
      }
      
      // required int32 LCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcount_)));
          set_has_lcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LSNSType;
        break;
      }
      
      // required int32 LSNSType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LSNSType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lsnstype_)));
          set_has_lsnstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LSNSSubType;
        break;
      }
      
      // optional int32 LSNSSubType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LSNSSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lsnssubtype_)));
          set_has_lsnssubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSnsFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string LActorOpenID = 5;
  if (has_lactoropenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lactoropenid().data(), this->lactoropenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lactoropenid(), output);
  }
  
  // optional int32 LRecNum = 6;
  if (has_lrecnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lrecnum(), output);
  }
  
  // required int32 LCount = 7;
  if (has_lcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lcount(), output);
  }
  
  // required int32 LSNSType = 8;
  if (has_lsnstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lsnstype(), output);
  }
  
  // optional int32 LSNSSubType = 9;
  if (has_lsnssubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lsnssubtype(), output);
  }
  
  // required int32 LiCenterLevel = 10;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSnsFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string LActorOpenID = 5;
  if (has_lactoropenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lactoropenid().data(), this->lactoropenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lactoropenid(), target);
  }
  
  // optional int32 LRecNum = 6;
  if (has_lrecnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lrecnum(), target);
  }
  
  // required int32 LCount = 7;
  if (has_lcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lcount(), target);
  }
  
  // required int32 LSNSType = 8;
  if (has_lsnstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lsnstype(), target);
  }
  
  // optional int32 LSNSSubType = 9;
  if (has_lsnssubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lsnssubtype(), target);
  }
  
  // required int32 LiCenterLevel = 10;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSnsFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string LActorOpenID = 5;
    if (has_lactoropenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lactoropenid());
    }
    
    // optional int32 LRecNum = 6;
    if (has_lrecnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lrecnum());
    }
    
    // required int32 LCount = 7;
    if (has_lcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcount());
    }
    
    // required int32 LSNSType = 8;
    if (has_lsnstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lsnstype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LSNSSubType = 9;
    if (has_lsnssubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lsnssubtype());
    }
    
    // required int32 LiCenterLevel = 10;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional string LZoneID = 11;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSnsFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSnsFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSnsFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSnsFlow::MergeFrom(const LogSnsFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lactoropenid()) {
      set_lactoropenid(from.lactoropenid());
    }
    if (from.has_lrecnum()) {
      set_lrecnum(from.lrecnum());
    }
    if (from.has_lcount()) {
      set_lcount(from.lcount());
    }
    if (from.has_lsnstype()) {
      set_lsnstype(from.lsnstype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lsnssubtype()) {
      set_lsnssubtype(from.lsnssubtype());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSnsFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSnsFlow::CopyFrom(const LogSnsFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSnsFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002df) != 0x000002df) return false;
  
  return true;
}

void LogSnsFlow::Swap(LogSnsFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lactoropenid_, other->lactoropenid_);
    std::swap(lrecnum_, other->lrecnum_);
    std::swap(lcount_, other->lcount_);
    std::swap(lsnstype_, other->lsnstype_);
    std::swap(lsnssubtype_, other->lsnssubtype_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSnsFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSnsFlow_descriptor_;
  metadata.reflection = LogSnsFlow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogRoundFlow_BATTLETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRoundFlow_BATTLETYPE_descriptor_;
}
bool LogRoundFlow_BATTLETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRoundFlow_BATTLETYPE LogRoundFlow::PVE;
const LogRoundFlow_BATTLETYPE LogRoundFlow::PVP;
const LogRoundFlow_BATTLETYPE LogRoundFlow::TTT;
const LogRoundFlow_BATTLETYPE LogRoundFlow::OTHER;
const LogRoundFlow_BATTLETYPE LogRoundFlow::FRIENDATTACK;
const LogRoundFlow_BATTLETYPE LogRoundFlow::BATTLETYPE_MIN;
const LogRoundFlow_BATTLETYPE LogRoundFlow::BATTLETYPE_MAX;
const int LogRoundFlow::BATTLETYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEBATTLEMODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRoundFlow_PVEBATTLEMODE_descriptor_;
}
bool LogRoundFlow_PVEBATTLEMODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::NORMAL;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::HARD;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::NIGHTMARE;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::BETRAY;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::PVEBATTLEMODE_MIN;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow::PVEBATTLEMODE_MAX;
const int LogRoundFlow::PVEBATTLEMODE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEAUTOMODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRoundFlow_PVEAUTOMODE_descriptor_;
}
bool LogRoundFlow_PVEAUTOMODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRoundFlow_PVEAUTOMODE LogRoundFlow::PVEAMNORMAL;
const LogRoundFlow_PVEAUTOMODE LogRoundFlow::PVEAMAUTO;
const LogRoundFlow_PVEAUTOMODE LogRoundFlow::PVEAUTOMODE_MIN;
const LogRoundFlow_PVEAUTOMODE LogRoundFlow::PVEAUTOMODE_MAX;
const int LogRoundFlow::PVEAUTOMODE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogRoundFlow::kLGameSvrIdFieldNumber;
const int LogRoundFlow::kLdtEventTimeFieldNumber;
const int LogRoundFlow::kLvGameAppidFieldNumber;
const int LogRoundFlow::kLPlatIDFieldNumber;
const int LogRoundFlow::kLvopenidFieldNumber;
const int LogRoundFlow::kLBattleIDFieldNumber;
const int LogRoundFlow::kLBattleTypeFieldNumber;
const int LogRoundFlow::kLPVEBattleModeFieldNumber;
const int LogRoundFlow::kLRoundScoreFieldNumber;
const int LogRoundFlow::kLRoundTimeFieldNumber;
const int LogRoundFlow::kLResultFieldNumber;
const int LogRoundFlow::kLGoldFieldNumber;
const int LogRoundFlow::kLFoodFieldNumber;
const int LogRoundFlow::kLWuhunFieldNumber;
const int LogRoundFlow::kLPercentFieldNumber;
const int LogRoundFlow::kLiPVEAUTOMODEFieldNumber;
const int LogRoundFlow::kLiECHARTYPEFieldNumber;
const int LogRoundFlow::kLiECHARTYPEFragFieldNumber;
const int LogRoundFlow::kLiECHARTYPEFragNumFieldNumber;
const int LogRoundFlow::kLvDstIdFieldNumber;
const int LogRoundFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogRoundFlow::LogRoundFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRoundFlow::InitAsDefaultInstance() {
}

LogRoundFlow::LogRoundFlow(const LogRoundFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRoundFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lbattleid_ = 0;
  lbattletype_ = 0;
  lpvebattlemode_ = 0;
  lroundscore_ = 0;
  lroundtime_ = 0;
  lresult_ = 0;
  lgold_ = 0;
  lfood_ = 0;
  lwuhun_ = 0;
  lpercent_ = 0;
  lipveautomode_ = 0;
  liechartype_ = 0;
  liechartypefrag_ = 0;
  liechartypefragnum_ = 0;
  lvdstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRoundFlow::~LogRoundFlow() {
  SharedDtor();
}

void LogRoundFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lvdstid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvdstid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogRoundFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRoundFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRoundFlow_descriptor_;
}

const LogRoundFlow& LogRoundFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogRoundFlow* LogRoundFlow::default_instance_ = NULL;

LogRoundFlow* LogRoundFlow::New() const {
  return new LogRoundFlow;
}

void LogRoundFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lbattleid_ = 0;
    lbattletype_ = 0;
    lpvebattlemode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lroundscore_ = 0;
    lroundtime_ = 0;
    lresult_ = 0;
    lgold_ = 0;
    lfood_ = 0;
    lwuhun_ = 0;
    lpercent_ = 0;
    lipveautomode_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    liechartype_ = 0;
    liechartypefrag_ = 0;
    liechartypefragnum_ = 0;
    if (has_lvdstid()) {
      if (lvdstid_ != &::google::protobuf::internal::kEmptyString) {
        lvdstid_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRoundFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LBattleID;
        break;
      }
      
      // required int32 LBattleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LBattleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lbattleid_)));
          set_has_lbattleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LBattleType;
        break;
      }
      
      // required int32 LBattleType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LBattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lbattletype_)));
          set_has_lbattletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LPVEBattleMode;
        break;
      }
      
      // required int32 LPVEBattleMode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPVEBattleMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpvebattlemode_)));
          set_has_lpvebattlemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LRoundScore;
        break;
      }
      
      // required int32 LRoundScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRoundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lroundscore_)));
          set_has_lroundscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LRoundTime;
        break;
      }
      
      // required int32 LRoundTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRoundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lroundtime_)));
          set_has_lroundtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LResult;
        break;
      }
      
      // required int32 LResult = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lresult_)));
          set_has_lresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LGold;
        break;
      }
      
      // required int32 LGold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgold_)));
          set_has_lgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_LFood;
        break;
      }
      
      // required int32 LFood = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LFood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lfood_)));
          set_has_lfood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LWuhun;
        break;
      }
      
      // required int32 LWuhun = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LWuhun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lwuhun_)));
          set_has_lwuhun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_LPercent;
        break;
      }
      
      // required int32 LPercent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpercent_)));
          set_has_lpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LiPVEAUTOMODE;
        break;
      }
      
      // required int32 LiPVEAUTOMODE = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiPVEAUTOMODE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lipveautomode_)));
          set_has_lipveautomode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LiECHARTYPE;
        break;
      }
      
      // required int32 LiECHARTYPE = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiECHARTYPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liechartype_)));
          set_has_liechartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_LiECHARTYPEFrag;
        break;
      }
      
      // required int32 LiECHARTYPEFrag = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiECHARTYPEFrag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liechartypefrag_)));
          set_has_liechartypefrag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_LiECHARTYPEFragNum;
        break;
      }
      
      // required int32 LiECHARTYPEFragNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiECHARTYPEFragNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liechartypefragnum_)));
          set_has_liechartypefragnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_LvDstId;
        break;
      }
      
      // required string LvDstId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvDstId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvdstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvdstid().data(), this->lvdstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRoundFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LBattleID = 6;
  if (has_lbattleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lbattleid(), output);
  }
  
  // required int32 LBattleType = 7;
  if (has_lbattletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lbattletype(), output);
  }
  
  // required int32 LPVEBattleMode = 8;
  if (has_lpvebattlemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lpvebattlemode(), output);
  }
  
  // required int32 LRoundScore = 9;
  if (has_lroundscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lroundscore(), output);
  }
  
  // required int32 LRoundTime = 10;
  if (has_lroundtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lroundtime(), output);
  }
  
  // required int32 LResult = 11;
  if (has_lresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lresult(), output);
  }
  
  // required int32 LGold = 12;
  if (has_lgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lgold(), output);
  }
  
  // required int32 LFood = 13;
  if (has_lfood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lfood(), output);
  }
  
  // required int32 LWuhun = 14;
  if (has_lwuhun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lwuhun(), output);
  }
  
  // required int32 LPercent = 15;
  if (has_lpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lpercent(), output);
  }
  
  // required int32 LiPVEAUTOMODE = 16;
  if (has_lipveautomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lipveautomode(), output);
  }
  
  // required int32 LiECHARTYPE = 17;
  if (has_liechartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->liechartype(), output);
  }
  
  // required int32 LiECHARTYPEFrag = 18;
  if (has_liechartypefrag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->liechartypefrag(), output);
  }
  
  // required int32 LiECHARTYPEFragNum = 19;
  if (has_liechartypefragnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->liechartypefragnum(), output);
  }
  
  // required string LvDstId = 20;
  if (has_lvdstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvdstid().data(), this->lvdstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->lvdstid(), output);
  }
  
  // optional string LZoneID = 21;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRoundFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LBattleID = 6;
  if (has_lbattleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lbattleid(), target);
  }
  
  // required int32 LBattleType = 7;
  if (has_lbattletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lbattletype(), target);
  }
  
  // required int32 LPVEBattleMode = 8;
  if (has_lpvebattlemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lpvebattlemode(), target);
  }
  
  // required int32 LRoundScore = 9;
  if (has_lroundscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lroundscore(), target);
  }
  
  // required int32 LRoundTime = 10;
  if (has_lroundtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lroundtime(), target);
  }
  
  // required int32 LResult = 11;
  if (has_lresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lresult(), target);
  }
  
  // required int32 LGold = 12;
  if (has_lgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lgold(), target);
  }
  
  // required int32 LFood = 13;
  if (has_lfood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lfood(), target);
  }
  
  // required int32 LWuhun = 14;
  if (has_lwuhun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lwuhun(), target);
  }
  
  // required int32 LPercent = 15;
  if (has_lpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lpercent(), target);
  }
  
  // required int32 LiPVEAUTOMODE = 16;
  if (has_lipveautomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lipveautomode(), target);
  }
  
  // required int32 LiECHARTYPE = 17;
  if (has_liechartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->liechartype(), target);
  }
  
  // required int32 LiECHARTYPEFrag = 18;
  if (has_liechartypefrag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->liechartypefrag(), target);
  }
  
  // required int32 LiECHARTYPEFragNum = 19;
  if (has_liechartypefragnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->liechartypefragnum(), target);
  }
  
  // required string LvDstId = 20;
  if (has_lvdstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvdstid().data(), this->lvdstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->lvdstid(), target);
  }
  
  // optional string LZoneID = 21;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRoundFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LBattleID = 6;
    if (has_lbattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lbattleid());
    }
    
    // required int32 LBattleType = 7;
    if (has_lbattletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lbattletype());
    }
    
    // required int32 LPVEBattleMode = 8;
    if (has_lpvebattlemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpvebattlemode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LRoundScore = 9;
    if (has_lroundscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lroundscore());
    }
    
    // required int32 LRoundTime = 10;
    if (has_lroundtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lroundtime());
    }
    
    // required int32 LResult = 11;
    if (has_lresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lresult());
    }
    
    // required int32 LGold = 12;
    if (has_lgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgold());
    }
    
    // required int32 LFood = 13;
    if (has_lfood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lfood());
    }
    
    // required int32 LWuhun = 14;
    if (has_lwuhun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lwuhun());
    }
    
    // required int32 LPercent = 15;
    if (has_lpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpercent());
    }
    
    // required int32 LiPVEAUTOMODE = 16;
    if (has_lipveautomode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lipveautomode());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 LiECHARTYPE = 17;
    if (has_liechartype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liechartype());
    }
    
    // required int32 LiECHARTYPEFrag = 18;
    if (has_liechartypefrag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liechartypefrag());
    }
    
    // required int32 LiECHARTYPEFragNum = 19;
    if (has_liechartypefragnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liechartypefragnum());
    }
    
    // required string LvDstId = 20;
    if (has_lvdstid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvdstid());
    }
    
    // optional string LZoneID = 21;
    if (has_lzoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRoundFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRoundFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRoundFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRoundFlow::MergeFrom(const LogRoundFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lbattleid()) {
      set_lbattleid(from.lbattleid());
    }
    if (from.has_lbattletype()) {
      set_lbattletype(from.lbattletype());
    }
    if (from.has_lpvebattlemode()) {
      set_lpvebattlemode(from.lpvebattlemode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lroundscore()) {
      set_lroundscore(from.lroundscore());
    }
    if (from.has_lroundtime()) {
      set_lroundtime(from.lroundtime());
    }
    if (from.has_lresult()) {
      set_lresult(from.lresult());
    }
    if (from.has_lgold()) {
      set_lgold(from.lgold());
    }
    if (from.has_lfood()) {
      set_lfood(from.lfood());
    }
    if (from.has_lwuhun()) {
      set_lwuhun(from.lwuhun());
    }
    if (from.has_lpercent()) {
      set_lpercent(from.lpercent());
    }
    if (from.has_lipveautomode()) {
      set_lipveautomode(from.lipveautomode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_liechartype()) {
      set_liechartype(from.liechartype());
    }
    if (from.has_liechartypefrag()) {
      set_liechartypefrag(from.liechartypefrag());
    }
    if (from.has_liechartypefragnum()) {
      set_liechartypefragnum(from.liechartypefragnum());
    }
    if (from.has_lvdstid()) {
      set_lvdstid(from.lvdstid());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRoundFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRoundFlow::CopyFrom(const LogRoundFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRoundFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;
  
  return true;
}

void LogRoundFlow::Swap(LogRoundFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lbattleid_, other->lbattleid_);
    std::swap(lbattletype_, other->lbattletype_);
    std::swap(lpvebattlemode_, other->lpvebattlemode_);
    std::swap(lroundscore_, other->lroundscore_);
    std::swap(lroundtime_, other->lroundtime_);
    std::swap(lresult_, other->lresult_);
    std::swap(lgold_, other->lgold_);
    std::swap(lfood_, other->lfood_);
    std::swap(lwuhun_, other->lwuhun_);
    std::swap(lpercent_, other->lpercent_);
    std::swap(lipveautomode_, other->lipveautomode_);
    std::swap(liechartype_, other->liechartype_);
    std::swap(liechartypefrag_, other->liechartypefrag_);
    std::swap(liechartypefragnum_, other->liechartypefragnum_);
    std::swap(lvdstid_, other->lvdstid_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRoundFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRoundFlow_descriptor_;
  metadata.reflection = LogRoundFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogBuildingUpgradeFlow::kLGameSvrIdFieldNumber;
const int LogBuildingUpgradeFlow::kLdtEventTimeFieldNumber;
const int LogBuildingUpgradeFlow::kLvGameAppidFieldNumber;
const int LogBuildingUpgradeFlow::kLPlatIDFieldNumber;
const int LogBuildingUpgradeFlow::kLvopenidFieldNumber;
const int LogBuildingUpgradeFlow::kLLevelFieldNumber;
const int LogBuildingUpgradeFlow::kLBUILDINGTYPEFieldNumber;
const int LogBuildingUpgradeFlow::kLiIdFieldNumber;
const int LogBuildingUpgradeFlow::kLiLevelFieldNumber;
const int LogBuildingUpgradeFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogBuildingUpgradeFlow::LogBuildingUpgradeFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogBuildingUpgradeFlow::InitAsDefaultInstance() {
}

LogBuildingUpgradeFlow::LogBuildingUpgradeFlow(const LogBuildingUpgradeFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogBuildingUpgradeFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  llevel_ = 0;
  lbuildingtype_ = 0;
  liid_ = 0;
  lilevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogBuildingUpgradeFlow::~LogBuildingUpgradeFlow() {
  SharedDtor();
}

void LogBuildingUpgradeFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogBuildingUpgradeFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogBuildingUpgradeFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogBuildingUpgradeFlow_descriptor_;
}

const LogBuildingUpgradeFlow& LogBuildingUpgradeFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogBuildingUpgradeFlow* LogBuildingUpgradeFlow::default_instance_ = NULL;

LogBuildingUpgradeFlow* LogBuildingUpgradeFlow::New() const {
  return new LogBuildingUpgradeFlow;
}

void LogBuildingUpgradeFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    llevel_ = 0;
    lbuildingtype_ = 0;
    liid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lilevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogBuildingUpgradeFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LBUILDINGTYPE;
        break;
      }
      
      // required int32 LBUILDINGTYPE = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LBUILDINGTYPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lbuildingtype_)));
          set_has_lbuildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiId;
        break;
      }
      
      // required int32 LiId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liid_)));
          set_has_liid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiLevel;
        break;
      }
      
      // required int32 LiLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lilevel_)));
          set_has_lilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogBuildingUpgradeFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->llevel(), output);
  }
  
  // required int32 LBUILDINGTYPE = 7;
  if (has_lbuildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lbuildingtype(), output);
  }
  
  // required int32 LiId = 8;
  if (has_liid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->liid(), output);
  }
  
  // required int32 LiLevel = 9;
  if (has_lilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lilevel(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogBuildingUpgradeFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->llevel(), target);
  }
  
  // required int32 LBUILDINGTYPE = 7;
  if (has_lbuildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lbuildingtype(), target);
  }
  
  // required int32 LiId = 8;
  if (has_liid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->liid(), target);
  }
  
  // required int32 LiLevel = 9;
  if (has_lilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lilevel(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogBuildingUpgradeFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LLevel = 6;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LBUILDINGTYPE = 7;
    if (has_lbuildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lbuildingtype());
    }
    
    // required int32 LiId = 8;
    if (has_liid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiLevel = 9;
    if (has_lilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lilevel());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogBuildingUpgradeFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogBuildingUpgradeFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogBuildingUpgradeFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogBuildingUpgradeFlow::MergeFrom(const LogBuildingUpgradeFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_lbuildingtype()) {
      set_lbuildingtype(from.lbuildingtype());
    }
    if (from.has_liid()) {
      set_liid(from.liid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lilevel()) {
      set_lilevel(from.lilevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogBuildingUpgradeFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogBuildingUpgradeFlow::CopyFrom(const LogBuildingUpgradeFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogBuildingUpgradeFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogBuildingUpgradeFlow::Swap(LogBuildingUpgradeFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(llevel_, other->llevel_);
    std::swap(lbuildingtype_, other->lbuildingtype_);
    std::swap(liid_, other->liid_);
    std::swap(lilevel_, other->lilevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogBuildingUpgradeFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogBuildingUpgradeFlow_descriptor_;
  metadata.reflection = LogBuildingUpgradeFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogTaskFlow::kLGameSvrIdFieldNumber;
const int LogTaskFlow::kLdtEventTimeFieldNumber;
const int LogTaskFlow::kLvGameAppidFieldNumber;
const int LogTaskFlow::kLPlatIDFieldNumber;
const int LogTaskFlow::kLvopenidFieldNumber;
const int LogTaskFlow::kLLevelFieldNumber;
const int LogTaskFlow::kLiTaskTypeFieldNumber;
const int LogTaskFlow::kLiIdFieldNumber;
const int LogTaskFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogTaskFlow::LogTaskFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogTaskFlow::InitAsDefaultInstance() {
}

LogTaskFlow::LogTaskFlow(const LogTaskFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogTaskFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  llevel_ = 0;
  litasktype_ = 0;
  liid_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogTaskFlow::~LogTaskFlow() {
  SharedDtor();
}

void LogTaskFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogTaskFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogTaskFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogTaskFlow_descriptor_;
}

const LogTaskFlow& LogTaskFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogTaskFlow* LogTaskFlow::default_instance_ = NULL;

LogTaskFlow* LogTaskFlow::New() const {
  return new LogTaskFlow;
}

void LogTaskFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    llevel_ = 0;
    litasktype_ = 0;
    liid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogTaskFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiTaskType;
        break;
      }
      
      // required int32 LiTaskType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiTaskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &litasktype_)));
          set_has_litasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiId;
        break;
      }
      
      // required int32 LiId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liid_)));
          set_has_liid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogTaskFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->llevel(), output);
  }
  
  // required int32 LiTaskType = 7;
  if (has_litasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->litasktype(), output);
  }
  
  // required int32 LiId = 8;
  if (has_liid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->liid(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogTaskFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->llevel(), target);
  }
  
  // required int32 LiTaskType = 7;
  if (has_litasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->litasktype(), target);
  }
  
  // required int32 LiId = 8;
  if (has_liid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->liid(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogTaskFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LLevel = 6;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LiTaskType = 7;
    if (has_litasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->litasktype());
    }
    
    // required int32 LiId = 8;
    if (has_liid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogTaskFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogTaskFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogTaskFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogTaskFlow::MergeFrom(const LogTaskFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_litasktype()) {
      set_litasktype(from.litasktype());
    }
    if (from.has_liid()) {
      set_liid(from.liid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogTaskFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogTaskFlow::CopyFrom(const LogTaskFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogTaskFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogTaskFlow::Swap(LogTaskFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(llevel_, other->llevel_);
    std::swap(litasktype_, other->litasktype_);
    std::swap(liid_, other->liid_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogTaskFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogTaskFlow_descriptor_;
  metadata.reflection = LogTaskFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogTrainingFlow::kLGameSvrIdFieldNumber;
const int LogTrainingFlow::kLdtEventTimeFieldNumber;
const int LogTrainingFlow::kLvGameAppidFieldNumber;
const int LogTrainingFlow::kLPlatIDFieldNumber;
const int LogTrainingFlow::kLvopenidFieldNumber;
const int LogTrainingFlow::kLchartypeFieldNumber;
const int LogTrainingFlow::kLcharlevelFieldNumber;
const int LogTrainingFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogTrainingFlow::LogTrainingFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogTrainingFlow::InitAsDefaultInstance() {
}

LogTrainingFlow::LogTrainingFlow(const LogTrainingFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogTrainingFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lchartype_ = 0;
  lcharlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogTrainingFlow::~LogTrainingFlow() {
  SharedDtor();
}

void LogTrainingFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogTrainingFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogTrainingFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogTrainingFlow_descriptor_;
}

const LogTrainingFlow& LogTrainingFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogTrainingFlow* LogTrainingFlow::default_instance_ = NULL;

LogTrainingFlow* LogTrainingFlow::New() const {
  return new LogTrainingFlow;
}

void LogTrainingFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lchartype_ = 0;
    lcharlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogTrainingFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lchartype;
        break;
      }
      
      // required int32 Lchartype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lchartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lchartype_)));
          set_has_lchartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Lcharlevel;
        break;
      }
      
      // required int32 Lcharlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lcharlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcharlevel_)));
          set_has_lcharlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogTrainingFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lchartype(), output);
  }
  
  // required int32 Lcharlevel = 7;
  if (has_lcharlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lcharlevel(), output);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogTrainingFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lchartype(), target);
  }
  
  // required int32 Lcharlevel = 7;
  if (has_lcharlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lcharlevel(), target);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogTrainingFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lchartype = 6;
    if (has_lchartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lchartype());
    }
    
    // required int32 Lcharlevel = 7;
    if (has_lcharlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcharlevel());
    }
    
    // optional string LZoneID = 8;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogTrainingFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogTrainingFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogTrainingFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogTrainingFlow::MergeFrom(const LogTrainingFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lchartype()) {
      set_lchartype(from.lchartype());
    }
    if (from.has_lcharlevel()) {
      set_lcharlevel(from.lcharlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogTrainingFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogTrainingFlow::CopyFrom(const LogTrainingFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogTrainingFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LogTrainingFlow::Swap(LogTrainingFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lchartype_, other->lchartype_);
    std::swap(lcharlevel_, other->lcharlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogTrainingFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogTrainingFlow_descriptor_;
  metadata.reflection = LogTrainingFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogUpdateCharFlow::kLGameSvrIdFieldNumber;
const int LogUpdateCharFlow::kLdtEventTimeFieldNumber;
const int LogUpdateCharFlow::kLvGameAppidFieldNumber;
const int LogUpdateCharFlow::kLPlatIDFieldNumber;
const int LogUpdateCharFlow::kLvopenidFieldNumber;
const int LogUpdateCharFlow::kLchartypeFieldNumber;
const int LogUpdateCharFlow::kLcharlevelFieldNumber;
const int LogUpdateCharFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogUpdateCharFlow::LogUpdateCharFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogUpdateCharFlow::InitAsDefaultInstance() {
}

LogUpdateCharFlow::LogUpdateCharFlow(const LogUpdateCharFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogUpdateCharFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lchartype_ = 0;
  lcharlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogUpdateCharFlow::~LogUpdateCharFlow() {
  SharedDtor();
}

void LogUpdateCharFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogUpdateCharFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogUpdateCharFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogUpdateCharFlow_descriptor_;
}

const LogUpdateCharFlow& LogUpdateCharFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogUpdateCharFlow* LogUpdateCharFlow::default_instance_ = NULL;

LogUpdateCharFlow* LogUpdateCharFlow::New() const {
  return new LogUpdateCharFlow;
}

void LogUpdateCharFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lchartype_ = 0;
    lcharlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogUpdateCharFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lchartype;
        break;
      }
      
      // required int32 Lchartype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lchartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lchartype_)));
          set_has_lchartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Lcharlevel;
        break;
      }
      
      // required int32 Lcharlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lcharlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcharlevel_)));
          set_has_lcharlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogUpdateCharFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lchartype(), output);
  }
  
  // required int32 Lcharlevel = 7;
  if (has_lcharlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lcharlevel(), output);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogUpdateCharFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lchartype(), target);
  }
  
  // required int32 Lcharlevel = 7;
  if (has_lcharlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lcharlevel(), target);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogUpdateCharFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lchartype = 6;
    if (has_lchartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lchartype());
    }
    
    // required int32 Lcharlevel = 7;
    if (has_lcharlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcharlevel());
    }
    
    // optional string LZoneID = 8;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogUpdateCharFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogUpdateCharFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogUpdateCharFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogUpdateCharFlow::MergeFrom(const LogUpdateCharFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lchartype()) {
      set_lchartype(from.lchartype());
    }
    if (from.has_lcharlevel()) {
      set_lcharlevel(from.lcharlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogUpdateCharFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogUpdateCharFlow::CopyFrom(const LogUpdateCharFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogUpdateCharFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LogUpdateCharFlow::Swap(LogUpdateCharFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lchartype_, other->lchartype_);
    std::swap(lcharlevel_, other->lcharlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogUpdateCharFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogUpdateCharFlow_descriptor_;
  metadata.reflection = LogUpdateCharFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSelfBattleFlow::kLGameSvrIdFieldNumber;
const int LogSelfBattleFlow::kLdtEventTimeFieldNumber;
const int LogSelfBattleFlow::kLvGameAppidFieldNumber;
const int LogSelfBattleFlow::kLPlatIDFieldNumber;
const int LogSelfBattleFlow::kLvopenidFieldNumber;
const int LogSelfBattleFlow::kLcenterlevelFieldNumber;
const int LogSelfBattleFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSelfBattleFlow::LogSelfBattleFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSelfBattleFlow::InitAsDefaultInstance() {
}

LogSelfBattleFlow::LogSelfBattleFlow(const LogSelfBattleFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSelfBattleFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lcenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSelfBattleFlow::~LogSelfBattleFlow() {
  SharedDtor();
}

void LogSelfBattleFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSelfBattleFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSelfBattleFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSelfBattleFlow_descriptor_;
}

const LogSelfBattleFlow& LogSelfBattleFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSelfBattleFlow* LogSelfBattleFlow::default_instance_ = NULL;

LogSelfBattleFlow* LogSelfBattleFlow::New() const {
  return new LogSelfBattleFlow;
}

void LogSelfBattleFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lcenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSelfBattleFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lcenterlevel;
        break;
      }
      
      // required int32 Lcenterlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lcenterlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcenterlevel_)));
          set_has_lcenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSelfBattleFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lcenterlevel = 6;
  if (has_lcenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lcenterlevel(), output);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSelfBattleFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lcenterlevel = 6;
  if (has_lcenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lcenterlevel(), target);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSelfBattleFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lcenterlevel = 6;
    if (has_lcenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcenterlevel());
    }
    
    // optional string LZoneID = 7;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSelfBattleFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSelfBattleFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSelfBattleFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSelfBattleFlow::MergeFrom(const LogSelfBattleFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lcenterlevel()) {
      set_lcenterlevel(from.lcenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSelfBattleFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSelfBattleFlow::CopyFrom(const LogSelfBattleFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSelfBattleFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void LogSelfBattleFlow::Swap(LogSelfBattleFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lcenterlevel_, other->lcenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSelfBattleFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSelfBattleFlow_descriptor_;
  metadata.reflection = LogSelfBattleFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogHeroFlow::kLGameSvrIdFieldNumber;
const int LogHeroFlow::kLdtEventTimeFieldNumber;
const int LogHeroFlow::kLvGameAppidFieldNumber;
const int LogHeroFlow::kLPlatIDFieldNumber;
const int LogHeroFlow::kLvopenidFieldNumber;
const int LogHeroFlow::kLchartypeFieldNumber;
const int LogHeroFlow::kLAddOrReduceFieldNumber;
const int LogHeroFlow::kLGainReasonFieldNumber;
const int LogHeroFlow::kLiCenterLevelFieldNumber;
const int LogHeroFlow::kLiLevelFieldNumber;
const int LogHeroFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogHeroFlow::LogHeroFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogHeroFlow::InitAsDefaultInstance() {
}

LogHeroFlow::LogHeroFlow(const LogHeroFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogHeroFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lchartype_ = 0;
  laddorreduce_ = 0;
  lgainreason_ = 0;
  licenterlevel_ = 0;
  lilevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogHeroFlow::~LogHeroFlow() {
  SharedDtor();
}

void LogHeroFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogHeroFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogHeroFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogHeroFlow_descriptor_;
}

const LogHeroFlow& LogHeroFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogHeroFlow* LogHeroFlow::default_instance_ = NULL;

LogHeroFlow* LogHeroFlow::New() const {
  return new LogHeroFlow;
}

void LogHeroFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lchartype_ = 0;
    laddorreduce_ = 0;
    lgainreason_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    licenterlevel_ = 0;
    lilevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogHeroFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lchartype;
        break;
      }
      
      // required int32 Lchartype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lchartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lchartype_)));
          set_has_lchartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LAddOrReduce;
        break;
      }
      
      // required int32 LAddOrReduce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LAddOrReduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laddorreduce_)));
          set_has_laddorreduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LGainReason;
        break;
      }
      
      // required int32 LGainReason = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LGainReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgainreason_)));
          set_has_lgainreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LiLevel;
        break;
      }
      
      // required int32 LiLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lilevel_)));
          set_has_lilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogHeroFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lchartype(), output);
  }
  
  // required int32 LAddOrReduce = 7;
  if (has_laddorreduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->laddorreduce(), output);
  }
  
  // required int32 LGainReason = 8;
  if (has_lgainreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lgainreason(), output);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->licenterlevel(), output);
  }
  
  // required int32 LiLevel = 10;
  if (has_lilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lilevel(), output);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogHeroFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lchartype(), target);
  }
  
  // required int32 LAddOrReduce = 7;
  if (has_laddorreduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->laddorreduce(), target);
  }
  
  // required int32 LGainReason = 8;
  if (has_lgainreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lgainreason(), target);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->licenterlevel(), target);
  }
  
  // required int32 LiLevel = 10;
  if (has_lilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lilevel(), target);
  }
  
  // optional string LZoneID = 11;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogHeroFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lchartype = 6;
    if (has_lchartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lchartype());
    }
    
    // required int32 LAddOrReduce = 7;
    if (has_laddorreduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laddorreduce());
    }
    
    // required int32 LGainReason = 8;
    if (has_lgainreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgainreason());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiCenterLevel = 9;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiLevel = 10;
    if (has_lilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lilevel());
    }
    
    // optional string LZoneID = 11;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogHeroFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogHeroFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogHeroFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogHeroFlow::MergeFrom(const LogHeroFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lchartype()) {
      set_lchartype(from.lchartype());
    }
    if (from.has_laddorreduce()) {
      set_laddorreduce(from.laddorreduce());
    }
    if (from.has_lgainreason()) {
      set_lgainreason(from.lgainreason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lilevel()) {
      set_lilevel(from.lilevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogHeroFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogHeroFlow::CopyFrom(const LogHeroFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogHeroFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void LogHeroFlow::Swap(LogHeroFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lchartype_, other->lchartype_);
    std::swap(laddorreduce_, other->laddorreduce_);
    std::swap(lgainreason_, other->lgainreason_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lilevel_, other->lilevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogHeroFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogHeroFlow_descriptor_;
  metadata.reflection = LogHeroFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogHeroUpdateFlow::kLGameSvrIdFieldNumber;
const int LogHeroUpdateFlow::kLdtEventTimeFieldNumber;
const int LogHeroUpdateFlow::kLvGameAppidFieldNumber;
const int LogHeroUpdateFlow::kLPlatIDFieldNumber;
const int LogHeroUpdateFlow::kLvopenidFieldNumber;
const int LogHeroUpdateFlow::kLchartypeFieldNumber;
const int LogHeroUpdateFlow::kLLevelFieldNumber;
const int LogHeroUpdateFlow::kLiCenterLevelFieldNumber;
const int LogHeroUpdateFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogHeroUpdateFlow::LogHeroUpdateFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogHeroUpdateFlow::InitAsDefaultInstance() {
}

LogHeroUpdateFlow::LogHeroUpdateFlow(const LogHeroUpdateFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogHeroUpdateFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lchartype_ = 0;
  llevel_ = 0;
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogHeroUpdateFlow::~LogHeroUpdateFlow() {
  SharedDtor();
}

void LogHeroUpdateFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogHeroUpdateFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogHeroUpdateFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogHeroUpdateFlow_descriptor_;
}

const LogHeroUpdateFlow& LogHeroUpdateFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogHeroUpdateFlow* LogHeroUpdateFlow::default_instance_ = NULL;

LogHeroUpdateFlow* LogHeroUpdateFlow::New() const {
  return new LogHeroUpdateFlow;
}

void LogHeroUpdateFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lchartype_ = 0;
    llevel_ = 0;
    licenterlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogHeroUpdateFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lchartype;
        break;
      }
      
      // required int32 Lchartype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lchartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lchartype_)));
          set_has_lchartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogHeroUpdateFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lchartype(), output);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->llevel(), output);
  }
  
  // required int32 LiCenterLevel = 8;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogHeroUpdateFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lchartype = 6;
  if (has_lchartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lchartype(), target);
  }
  
  // required int32 LLevel = 7;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->llevel(), target);
  }
  
  // required int32 LiCenterLevel = 8;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogHeroUpdateFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lchartype = 6;
    if (has_lchartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lchartype());
    }
    
    // required int32 LLevel = 7;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // required int32 LiCenterLevel = 8;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogHeroUpdateFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogHeroUpdateFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogHeroUpdateFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogHeroUpdateFlow::MergeFrom(const LogHeroUpdateFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lchartype()) {
      set_lchartype(from.lchartype());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogHeroUpdateFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogHeroUpdateFlow::CopyFrom(const LogHeroUpdateFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogHeroUpdateFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogHeroUpdateFlow::Swap(LogHeroUpdateFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lchartype_, other->lchartype_);
    std::swap(llevel_, other->llevel_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogHeroUpdateFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogHeroUpdateFlow_descriptor_;
  metadata.reflection = LogHeroUpdateFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogClanFlow::kLGameSvrIdFieldNumber;
const int LogClanFlow::kLdtEventTimeFieldNumber;
const int LogClanFlow::kLvGameAppidFieldNumber;
const int LogClanFlow::kLPlatIDFieldNumber;
const int LogClanFlow::kLvopenidFieldNumber;
const int LogClanFlow::kLCreateOrDelFieldNumber;
const int LogClanFlow::kLClanNameFieldNumber;
const int LogClanFlow::kLTargetIdFieldNumber;
const int LogClanFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogClanFlow::LogClanFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogClanFlow::InitAsDefaultInstance() {
}

LogClanFlow::LogClanFlow(const LogClanFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogClanFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lcreateordel_ = 0;
  lclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ltargetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogClanFlow::~LogClanFlow() {
  SharedDtor();
}

void LogClanFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
    delete lclanname_;
  }
  if (ltargetid_ != &::google::protobuf::internal::kEmptyString) {
    delete ltargetid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogClanFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogClanFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogClanFlow_descriptor_;
}

const LogClanFlow& LogClanFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogClanFlow* LogClanFlow::default_instance_ = NULL;

LogClanFlow* LogClanFlow::New() const {
  return new LogClanFlow;
}

void LogClanFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lcreateordel_ = 0;
    if (has_lclanname()) {
      if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
        lclanname_->clear();
      }
    }
    if (has_ltargetid()) {
      if (ltargetid_ != &::google::protobuf::internal::kEmptyString) {
        ltargetid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogClanFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LCreateOrDel;
        break;
      }
      
      // required int32 LCreateOrDel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LCreateOrDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcreateordel_)));
          set_has_lcreateordel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LClanName;
        break;
      }
      
      // required string LClanName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LClanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lclanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lclanname().data(), this->lclanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LTargetId;
        break;
      }
      
      // required string LTargetId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LTargetId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltargetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ltargetid().data(), this->ltargetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogClanFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LCreateOrDel = 6;
  if (has_lcreateordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lcreateordel(), output);
  }
  
  // required string LClanName = 7;
  if (has_lclanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclanname().data(), this->lclanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lclanname(), output);
  }
  
  // required string LTargetId = 8;
  if (has_ltargetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltargetid().data(), this->ltargetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ltargetid(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogClanFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LCreateOrDel = 6;
  if (has_lcreateordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lcreateordel(), target);
  }
  
  // required string LClanName = 7;
  if (has_lclanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclanname().data(), this->lclanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lclanname(), target);
  }
  
  // required string LTargetId = 8;
  if (has_ltargetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ltargetid().data(), this->ltargetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ltargetid(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogClanFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LCreateOrDel = 6;
    if (has_lcreateordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcreateordel());
    }
    
    // required string LClanName = 7;
    if (has_lclanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lclanname());
    }
    
    // required string LTargetId = 8;
    if (has_ltargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltargetid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogClanFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogClanFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogClanFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogClanFlow::MergeFrom(const LogClanFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lcreateordel()) {
      set_lcreateordel(from.lcreateordel());
    }
    if (from.has_lclanname()) {
      set_lclanname(from.lclanname());
    }
    if (from.has_ltargetid()) {
      set_ltargetid(from.ltargetid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogClanFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogClanFlow::CopyFrom(const LogClanFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogClanFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogClanFlow::Swap(LogClanFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lcreateordel_, other->lcreateordel_);
    std::swap(lclanname_, other->lclanname_);
    std::swap(ltargetid_, other->ltargetid_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogClanFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogClanFlow_descriptor_;
  metadata.reflection = LogClanFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogClanDonateFlow::kLGameSvrIdFieldNumber;
const int LogClanDonateFlow::kLdtEventTimeFieldNumber;
const int LogClanDonateFlow::kLvGameAppidFieldNumber;
const int LogClanDonateFlow::kLPlatIDFieldNumber;
const int LogClanDonateFlow::kLvopenidFieldNumber;
const int LogClanDonateFlow::kLClanNameFieldNumber;
const int LogClanDonateFlow::kLCharTypeFieldNumber;
const int LogClanDonateFlow::kLCharLevelFieldNumber;
const int LogClanDonateFlow::kLiCenterLevelFieldNumber;
const int LogClanDonateFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogClanDonateFlow::LogClanDonateFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogClanDonateFlow::InitAsDefaultInstance() {
}

LogClanDonateFlow::LogClanDonateFlow(const LogClanDonateFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogClanDonateFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lchartype_ = 0;
  lcharlevel_ = 0;
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogClanDonateFlow::~LogClanDonateFlow() {
  SharedDtor();
}

void LogClanDonateFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
    delete lclanname_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogClanDonateFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogClanDonateFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogClanDonateFlow_descriptor_;
}

const LogClanDonateFlow& LogClanDonateFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogClanDonateFlow* LogClanDonateFlow::default_instance_ = NULL;

LogClanDonateFlow* LogClanDonateFlow::New() const {
  return new LogClanDonateFlow;
}

void LogClanDonateFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    if (has_lclanname()) {
      if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
        lclanname_->clear();
      }
    }
    lchartype_ = 0;
    lcharlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    licenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogClanDonateFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LClanName;
        break;
      }
      
      // required string LClanName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LClanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lclanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lclanname().data(), this->lclanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LCharType;
        break;
      }
      
      // required int32 LCharType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LCharType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lchartype_)));
          set_has_lchartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LCharLevel;
        break;
      }
      
      // required int32 LCharLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LCharLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcharlevel_)));
          set_has_lcharlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogClanDonateFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required string LClanName = 6;
  if (has_lclanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclanname().data(), this->lclanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lclanname(), output);
  }
  
  // required int32 LCharType = 7;
  if (has_lchartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lchartype(), output);
  }
  
  // required int32 LCharLevel = 8;
  if (has_lcharlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lcharlevel(), output);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogClanDonateFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required string LClanName = 6;
  if (has_lclanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lclanname().data(), this->lclanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lclanname(), target);
  }
  
  // required int32 LCharType = 7;
  if (has_lchartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lchartype(), target);
  }
  
  // required int32 LCharLevel = 8;
  if (has_lcharlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lcharlevel(), target);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogClanDonateFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required string LClanName = 6;
    if (has_lclanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lclanname());
    }
    
    // required int32 LCharType = 7;
    if (has_lchartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lchartype());
    }
    
    // required int32 LCharLevel = 8;
    if (has_lcharlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcharlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiCenterLevel = 9;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogClanDonateFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogClanDonateFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogClanDonateFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogClanDonateFlow::MergeFrom(const LogClanDonateFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lclanname()) {
      set_lclanname(from.lclanname());
    }
    if (from.has_lchartype()) {
      set_lchartype(from.lchartype());
    }
    if (from.has_lcharlevel()) {
      set_lcharlevel(from.lcharlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogClanDonateFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogClanDonateFlow::CopyFrom(const LogClanDonateFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogClanDonateFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogClanDonateFlow::Swap(LogClanDonateFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lclanname_, other->lclanname_);
    std::swap(lchartype_, other->lchartype_);
    std::swap(lcharlevel_, other->lcharlevel_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogClanDonateFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogClanDonateFlow_descriptor_;
  metadata.reflection = LogClanDonateFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogPlayerLevelFlow::kLGameSvrIdFieldNumber;
const int LogPlayerLevelFlow::kLdtEventTimeFieldNumber;
const int LogPlayerLevelFlow::kLvGameAppidFieldNumber;
const int LogPlayerLevelFlow::kLPlatIDFieldNumber;
const int LogPlayerLevelFlow::kLvopenidFieldNumber;
const int LogPlayerLevelFlow::kLLevelFieldNumber;
const int LogPlayerLevelFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogPlayerLevelFlow::LogPlayerLevelFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogPlayerLevelFlow::InitAsDefaultInstance() {
}

LogPlayerLevelFlow::LogPlayerLevelFlow(const LogPlayerLevelFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogPlayerLevelFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  llevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlayerLevelFlow::~LogPlayerLevelFlow() {
  SharedDtor();
}

void LogPlayerLevelFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogPlayerLevelFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlayerLevelFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlayerLevelFlow_descriptor_;
}

const LogPlayerLevelFlow& LogPlayerLevelFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogPlayerLevelFlow* LogPlayerLevelFlow::default_instance_ = NULL;

LogPlayerLevelFlow* LogPlayerLevelFlow::New() const {
  return new LogPlayerLevelFlow;
}

void LogPlayerLevelFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    llevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlayerLevelFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LLevel;
        break;
      }
      
      // required int32 LLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &llevel_)));
          set_has_llevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogPlayerLevelFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->llevel(), output);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogPlayerLevelFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LLevel = 6;
  if (has_llevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->llevel(), target);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogPlayerLevelFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LLevel = 6;
    if (has_llevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->llevel());
    }
    
    // optional string LZoneID = 7;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlayerLevelFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlayerLevelFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlayerLevelFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlayerLevelFlow::MergeFrom(const LogPlayerLevelFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_llevel()) {
      set_llevel(from.llevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlayerLevelFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlayerLevelFlow::CopyFrom(const LogPlayerLevelFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlayerLevelFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void LogPlayerLevelFlow::Swap(LogPlayerLevelFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(llevel_, other->llevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlayerLevelFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlayerLevelFlow_descriptor_;
  metadata.reflection = LogPlayerLevelFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSignInFlow::kLGameSvrIdFieldNumber;
const int LogSignInFlow::kLdtEventTimeFieldNumber;
const int LogSignInFlow::kLvGameAppidFieldNumber;
const int LogSignInFlow::kLPlatIDFieldNumber;
const int LogSignInFlow::kLvopenidFieldNumber;
const int LogSignInFlow::kLdaysFieldNumber;
const int LogSignInFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSignInFlow::LogSignInFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSignInFlow::InitAsDefaultInstance() {
}

LogSignInFlow::LogSignInFlow(const LogSignInFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSignInFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldays_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSignInFlow::~LogSignInFlow() {
  SharedDtor();
}

void LogSignInFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSignInFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSignInFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSignInFlow_descriptor_;
}

const LogSignInFlow& LogSignInFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSignInFlow* LogSignInFlow::default_instance_ = NULL;

LogSignInFlow* LogSignInFlow::New() const {
  return new LogSignInFlow;
}

void LogSignInFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    ldays_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSignInFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Ldays;
        break;
      }
      
      // required int32 Ldays = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ldays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldays_)));
          set_has_ldays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSignInFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Ldays = 6;
  if (has_ldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ldays(), output);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSignInFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Ldays = 6;
  if (has_ldays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ldays(), target);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSignInFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Ldays = 6;
    if (has_ldays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldays());
    }
    
    // optional string LZoneID = 7;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSignInFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSignInFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSignInFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSignInFlow::MergeFrom(const LogSignInFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_ldays()) {
      set_ldays(from.ldays());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSignInFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSignInFlow::CopyFrom(const LogSignInFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSignInFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void LogSignInFlow::Swap(LogSignInFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(ldays_, other->ldays_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSignInFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSignInFlow_descriptor_;
  metadata.reflection = LogSignInFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogOnlineNumbers::kLGameSvrIdFieldNumber;
const int LogOnlineNumbers::kLdtEventTimeFieldNumber;
const int LogOnlineNumbers::kLvGameAppidFieldNumber;
const int LogOnlineNumbers::kLiNumbersFieldNumber;
const int LogOnlineNumbers::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogOnlineNumbers::LogOnlineNumbers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogOnlineNumbers::InitAsDefaultInstance() {
}

LogOnlineNumbers::LogOnlineNumbers(const LogOnlineNumbers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogOnlineNumbers::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linumbers_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOnlineNumbers::~LogOnlineNumbers() {
  SharedDtor();
}

void LogOnlineNumbers::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogOnlineNumbers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOnlineNumbers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOnlineNumbers_descriptor_;
}

const LogOnlineNumbers& LogOnlineNumbers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogOnlineNumbers* LogOnlineNumbers::default_instance_ = NULL;

LogOnlineNumbers* LogOnlineNumbers::New() const {
  return new LogOnlineNumbers;
}

void LogOnlineNumbers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    linumbers_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOnlineNumbers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LiNumbers;
        break;
      }
      
      // required int32 LiNumbers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiNumbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linumbers_)));
          set_has_linumbers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogOnlineNumbers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LiNumbers = 4;
  if (has_linumbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->linumbers(), output);
  }
  
  // optional string LZoneID = 5;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogOnlineNumbers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LiNumbers = 4;
  if (has_linumbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->linumbers(), target);
  }
  
  // optional string LZoneID = 5;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogOnlineNumbers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LiNumbers = 4;
    if (has_linumbers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linumbers());
    }
    
    // optional string LZoneID = 5;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOnlineNumbers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOnlineNumbers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogOnlineNumbers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOnlineNumbers::MergeFrom(const LogOnlineNumbers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_linumbers()) {
      set_linumbers(from.linumbers());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOnlineNumbers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOnlineNumbers::CopyFrom(const LogOnlineNumbers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOnlineNumbers::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void LogOnlineNumbers::Swap(LogOnlineNumbers* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(linumbers_, other->linumbers_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogOnlineNumbers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOnlineNumbers_descriptor_;
  metadata.reflection = LogOnlineNumbers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogShareBattle::kLGameSvrIdFieldNumber;
const int LogShareBattle::kLdtEventTimeFieldNumber;
const int LogShareBattle::kLvGameAppidFieldNumber;
const int LogShareBattle::kLPlatIDFieldNumber;
const int LogShareBattle::kLvopenidFieldNumber;
const int LogShareBattle::kLiEShareBattleTypeFieldNumber;
const int LogShareBattle::kLvBattleIdFieldNumber;
const int LogShareBattle::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogShareBattle::LogShareBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogShareBattle::InitAsDefaultInstance() {
}

LogShareBattle::LogShareBattle(const LogShareBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogShareBattle::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  liesharebattletype_ = 0;
  lvbattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogShareBattle::~LogShareBattle() {
  SharedDtor();
}

void LogShareBattle::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvbattleid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogShareBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogShareBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogShareBattle_descriptor_;
}

const LogShareBattle& LogShareBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogShareBattle* LogShareBattle::default_instance_ = NULL;

LogShareBattle* LogShareBattle::New() const {
  return new LogShareBattle;
}

void LogShareBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    liesharebattletype_ = 0;
    if (has_lvbattleid()) {
      if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
        lvbattleid_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogShareBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiEShareBattleType;
        break;
      }
      
      // required int32 LiEShareBattleType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiEShareBattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liesharebattletype_)));
          set_has_liesharebattletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LvBattleId;
        break;
      }
      
      // required string LvBattleId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvBattleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvbattleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvbattleid().data(), this->lvbattleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogShareBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiEShareBattleType = 6;
  if (has_liesharebattletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->liesharebattletype(), output);
  }
  
  // required string LvBattleId = 7;
  if (has_lvbattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvbattleid().data(), this->lvbattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lvbattleid(), output);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogShareBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiEShareBattleType = 6;
  if (has_liesharebattletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->liesharebattletype(), target);
  }
  
  // required string LvBattleId = 7;
  if (has_lvbattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvbattleid().data(), this->lvbattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lvbattleid(), target);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogShareBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiEShareBattleType = 6;
    if (has_liesharebattletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liesharebattletype());
    }
    
    // required string LvBattleId = 7;
    if (has_lvbattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvbattleid());
    }
    
    // optional string LZoneID = 8;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogShareBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogShareBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogShareBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogShareBattle::MergeFrom(const LogShareBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_liesharebattletype()) {
      set_liesharebattletype(from.liesharebattletype());
    }
    if (from.has_lvbattleid()) {
      set_lvbattleid(from.lvbattleid());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogShareBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogShareBattle::CopyFrom(const LogShareBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogShareBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LogShareBattle::Swap(LogShareBattle* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(liesharebattletype_, other->liesharebattletype_);
    std::swap(lvbattleid_, other->lvbattleid_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogShareBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogShareBattle_descriptor_;
  metadata.reflection = LogShareBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogViewShareBattle::kLGameSvrIdFieldNumber;
const int LogViewShareBattle::kLdtEventTimeFieldNumber;
const int LogViewShareBattle::kLvGameAppidFieldNumber;
const int LogViewShareBattle::kLPlatIDFieldNumber;
const int LogViewShareBattle::kLvopenidFieldNumber;
const int LogViewShareBattle::kLvBattleIdFieldNumber;
const int LogViewShareBattle::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogViewShareBattle::LogViewShareBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogViewShareBattle::InitAsDefaultInstance() {
}

LogViewShareBattle::LogViewShareBattle(const LogViewShareBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogViewShareBattle::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvbattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogViewShareBattle::~LogViewShareBattle() {
  SharedDtor();
}

void LogViewShareBattle::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvbattleid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogViewShareBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogViewShareBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogViewShareBattle_descriptor_;
}

const LogViewShareBattle& LogViewShareBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogViewShareBattle* LogViewShareBattle::default_instance_ = NULL;

LogViewShareBattle* LogViewShareBattle::New() const {
  return new LogViewShareBattle;
}

void LogViewShareBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    if (has_lvbattleid()) {
      if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
        lvbattleid_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogViewShareBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LvBattleId;
        break;
      }
      
      // required string LvBattleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvBattleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvbattleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvbattleid().data(), this->lvbattleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogViewShareBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required string LvBattleId = 6;
  if (has_lvbattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvbattleid().data(), this->lvbattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lvbattleid(), output);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogViewShareBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required string LvBattleId = 6;
  if (has_lvbattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvbattleid().data(), this->lvbattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lvbattleid(), target);
  }
  
  // optional string LZoneID = 7;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogViewShareBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required string LvBattleId = 6;
    if (has_lvbattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvbattleid());
    }
    
    // optional string LZoneID = 7;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogViewShareBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogViewShareBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogViewShareBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogViewShareBattle::MergeFrom(const LogViewShareBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lvbattleid()) {
      set_lvbattleid(from.lvbattleid());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogViewShareBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogViewShareBattle::CopyFrom(const LogViewShareBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogViewShareBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void LogViewShareBattle::Swap(LogViewShareBattle* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lvbattleid_, other->lvbattleid_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogViewShareBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogViewShareBattle_descriptor_;
  metadata.reflection = LogViewShareBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogActivityFlow::kLGameSvrIdFieldNumber;
const int LogActivityFlow::kLdtEventTimeFieldNumber;
const int LogActivityFlow::kLvGameAppidFieldNumber;
const int LogActivityFlow::kLPlatIDFieldNumber;
const int LogActivityFlow::kLvopenidFieldNumber;
const int LogActivityFlow::kLiActivityIdFieldNumber;
const int LogActivityFlow::kLiActivityLevelFieldNumber;
const int LogActivityFlow::kLvAwardFieldNumber;
const int LogActivityFlow::kLiCenterLevelFieldNumber;
const int LogActivityFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogActivityFlow::LogActivityFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogActivityFlow::InitAsDefaultInstance() {
}

LogActivityFlow::LogActivityFlow(const LogActivityFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogActivityFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  liactivityid_ = 0;
  liactivitylevel_ = 0;
  lvaward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogActivityFlow::~LogActivityFlow() {
  SharedDtor();
}

void LogActivityFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lvaward_ != &::google::protobuf::internal::kEmptyString) {
    delete lvaward_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogActivityFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogActivityFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogActivityFlow_descriptor_;
}

const LogActivityFlow& LogActivityFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogActivityFlow* LogActivityFlow::default_instance_ = NULL;

LogActivityFlow* LogActivityFlow::New() const {
  return new LogActivityFlow;
}

void LogActivityFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    liactivityid_ = 0;
    liactivitylevel_ = 0;
    if (has_lvaward()) {
      if (lvaward_ != &::google::protobuf::internal::kEmptyString) {
        lvaward_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    licenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogActivityFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiActivityId;
        break;
      }
      
      // required int32 LiActivityId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiActivityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liactivityid_)));
          set_has_liactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiActivityLevel;
        break;
      }
      
      // required int32 LiActivityLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiActivityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liactivitylevel_)));
          set_has_liactivitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LvAward;
        break;
      }
      
      // required string LvAward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvaward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvaward().data(), this->lvaward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogActivityFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiActivityId = 6;
  if (has_liactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->liactivityid(), output);
  }
  
  // required int32 LiActivityLevel = 7;
  if (has_liactivitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->liactivitylevel(), output);
  }
  
  // required string LvAward = 8;
  if (has_lvaward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvaward().data(), this->lvaward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lvaward(), output);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogActivityFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiActivityId = 6;
  if (has_liactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->liactivityid(), target);
  }
  
  // required int32 LiActivityLevel = 7;
  if (has_liactivitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->liactivitylevel(), target);
  }
  
  // required string LvAward = 8;
  if (has_lvaward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvaward().data(), this->lvaward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lvaward(), target);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogActivityFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiActivityId = 6;
    if (has_liactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liactivityid());
    }
    
    // required int32 LiActivityLevel = 7;
    if (has_liactivitylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liactivitylevel());
    }
    
    // required string LvAward = 8;
    if (has_lvaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvaward());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiCenterLevel = 9;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogActivityFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogActivityFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogActivityFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogActivityFlow::MergeFrom(const LogActivityFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_liactivityid()) {
      set_liactivityid(from.liactivityid());
    }
    if (from.has_liactivitylevel()) {
      set_liactivitylevel(from.liactivitylevel());
    }
    if (from.has_lvaward()) {
      set_lvaward(from.lvaward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogActivityFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogActivityFlow::CopyFrom(const LogActivityFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogActivityFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogActivityFlow::Swap(LogActivityFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(liactivityid_, other->liactivityid_);
    std::swap(liactivitylevel_, other->liactivitylevel_);
    std::swap(lvaward_, other->lvaward_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogActivityFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogActivityFlow_descriptor_;
  metadata.reflection = LogActivityFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogFriendDonateRequestFlow::kLGameSvrIdFieldNumber;
const int LogFriendDonateRequestFlow::kLdtEventTimeFieldNumber;
const int LogFriendDonateRequestFlow::kLvGameAppidFieldNumber;
const int LogFriendDonateRequestFlow::kLPlatIDFieldNumber;
const int LogFriendDonateRequestFlow::kLvopenidFieldNumber;
const int LogFriendDonateRequestFlow::kLvFriendUidFieldNumber;
const int LogFriendDonateRequestFlow::kLiCharTypeFieldNumber;
const int LogFriendDonateRequestFlow::kLiCharLevelFieldNumber;
const int LogFriendDonateRequestFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogFriendDonateRequestFlow::LogFriendDonateRequestFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogFriendDonateRequestFlow::InitAsDefaultInstance() {
}

LogFriendDonateRequestFlow::LogFriendDonateRequestFlow(const LogFriendDonateRequestFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogFriendDonateRequestFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvfrienduid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lichartype_ = 0;
  licharlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogFriendDonateRequestFlow::~LogFriendDonateRequestFlow() {
  SharedDtor();
}

void LogFriendDonateRequestFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lvfrienduid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvfrienduid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogFriendDonateRequestFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogFriendDonateRequestFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogFriendDonateRequestFlow_descriptor_;
}

const LogFriendDonateRequestFlow& LogFriendDonateRequestFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogFriendDonateRequestFlow* LogFriendDonateRequestFlow::default_instance_ = NULL;

LogFriendDonateRequestFlow* LogFriendDonateRequestFlow::New() const {
  return new LogFriendDonateRequestFlow;
}

void LogFriendDonateRequestFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    if (has_lvfrienduid()) {
      if (lvfrienduid_ != &::google::protobuf::internal::kEmptyString) {
        lvfrienduid_->clear();
      }
    }
    lichartype_ = 0;
    licharlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogFriendDonateRequestFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LvFriendUid;
        break;
      }
      
      // required string LvFriendUid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvFriendUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvfrienduid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvfrienduid().data(), this->lvfrienduid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiCharType;
        break;
      }
      
      // required int32 LiCharType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCharType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lichartype_)));
          set_has_lichartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiCharLevel;
        break;
      }
      
      // required int32 LiCharLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCharLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licharlevel_)));
          set_has_licharlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogFriendDonateRequestFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required string LvFriendUid = 6;
  if (has_lvfrienduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvfrienduid().data(), this->lvfrienduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lvfrienduid(), output);
  }
  
  // required int32 LiCharType = 7;
  if (has_lichartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lichartype(), output);
  }
  
  // required int32 LiCharLevel = 8;
  if (has_licharlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->licharlevel(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogFriendDonateRequestFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required string LvFriendUid = 6;
  if (has_lvfrienduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvfrienduid().data(), this->lvfrienduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lvfrienduid(), target);
  }
  
  // required int32 LiCharType = 7;
  if (has_lichartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lichartype(), target);
  }
  
  // required int32 LiCharLevel = 8;
  if (has_licharlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->licharlevel(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogFriendDonateRequestFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required string LvFriendUid = 6;
    if (has_lvfrienduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvfrienduid());
    }
    
    // required int32 LiCharType = 7;
    if (has_lichartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lichartype());
    }
    
    // required int32 LiCharLevel = 8;
    if (has_licharlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licharlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogFriendDonateRequestFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogFriendDonateRequestFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogFriendDonateRequestFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogFriendDonateRequestFlow::MergeFrom(const LogFriendDonateRequestFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lvfrienduid()) {
      set_lvfrienduid(from.lvfrienduid());
    }
    if (from.has_lichartype()) {
      set_lichartype(from.lichartype());
    }
    if (from.has_licharlevel()) {
      set_licharlevel(from.licharlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogFriendDonateRequestFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogFriendDonateRequestFlow::CopyFrom(const LogFriendDonateRequestFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFriendDonateRequestFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogFriendDonateRequestFlow::Swap(LogFriendDonateRequestFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lvfrienduid_, other->lvfrienduid_);
    std::swap(lichartype_, other->lichartype_);
    std::swap(licharlevel_, other->licharlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogFriendDonateRequestFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogFriendDonateRequestFlow_descriptor_;
  metadata.reflection = LogFriendDonateRequestFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogGameSvrState::kLdtEventTimeFieldNumber;
const int LogGameSvrState::kLvGameIPFieldNumber;
const int LogGameSvrState::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogGameSvrState::LogGameSvrState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogGameSvrState::InitAsDefaultInstance() {
}

LogGameSvrState::LogGameSvrState(const LogGameSvrState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogGameSvrState::SharedCtor() {
  _cached_size_ = 0;
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogGameSvrState::~LogGameSvrState() {
  SharedDtor();
}

void LogGameSvrState::SharedDtor() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameip_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameip_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogGameSvrState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogGameSvrState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogGameSvrState_descriptor_;
}

const LogGameSvrState& LogGameSvrState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogGameSvrState* LogGameSvrState::default_instance_ = NULL;

LogGameSvrState* LogGameSvrState::New() const {
  return new LogGameSvrState;
}

void LogGameSvrState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameip()) {
      if (lvgameip_ != &::google::protobuf::internal::kEmptyString) {
        lvgameip_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogGameSvrState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LdtEventTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LvGameIP;
        break;
      }
      
      // required string LvGameIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameip().data(), this->lvgameip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogGameSvrState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LdtEventTime = 1;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ldteventtime(), output);
  }
  
  // required string LvGameIP = 2;
  if (has_lvgameip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameip().data(), this->lvgameip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lvgameip(), output);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogGameSvrState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LdtEventTime = 1;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ldteventtime(), target);
  }
  
  // required string LvGameIP = 2;
  if (has_lvgameip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameip().data(), this->lvgameip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lvgameip(), target);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogGameSvrState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LdtEventTime = 1;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameIP = 2;
    if (has_lvgameip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameip());
    }
    
    // optional string LZoneID = 3;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogGameSvrState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogGameSvrState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogGameSvrState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogGameSvrState::MergeFrom(const LogGameSvrState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameip()) {
      set_lvgameip(from.lvgameip());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogGameSvrState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGameSvrState::CopyFrom(const LogGameSvrState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGameSvrState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LogGameSvrState::Swap(LogGameSvrState* other) {
  if (other != this) {
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameip_, other->lvgameip_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogGameSvrState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogGameSvrState_descriptor_;
  metadata.reflection = LogGameSvrState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogBuildingSpeedUpFlow_SpeedUpSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogBuildingSpeedUpFlow_SpeedUpSource_descriptor_;
}
bool LogBuildingSpeedUpFlow_SpeedUpSource_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::Task;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::Friend;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::SystemFriend;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::Gem;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::SpeedUpSource_MIN;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow::SpeedUpSource_MAX;
const int LogBuildingSpeedUpFlow::SpeedUpSource_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogBuildingSpeedUpFlow::kLGameSvrIdFieldNumber;
const int LogBuildingSpeedUpFlow::kLdtEventTimeFieldNumber;
const int LogBuildingSpeedUpFlow::kLvGameAppidFieldNumber;
const int LogBuildingSpeedUpFlow::kLPlatIDFieldNumber;
const int LogBuildingSpeedUpFlow::kLvopenidFieldNumber;
const int LogBuildingSpeedUpFlow::kLiBuildingTypeFieldNumber;
const int LogBuildingSpeedUpFlow::kLiSpeedUpSourceFieldNumber;
const int LogBuildingSpeedUpFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogBuildingSpeedUpFlow::LogBuildingSpeedUpFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogBuildingSpeedUpFlow::InitAsDefaultInstance() {
}

LogBuildingSpeedUpFlow::LogBuildingSpeedUpFlow(const LogBuildingSpeedUpFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogBuildingSpeedUpFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  libuildingtype_ = 0;
  lispeedupsource_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogBuildingSpeedUpFlow::~LogBuildingSpeedUpFlow() {
  SharedDtor();
}

void LogBuildingSpeedUpFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogBuildingSpeedUpFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogBuildingSpeedUpFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogBuildingSpeedUpFlow_descriptor_;
}

const LogBuildingSpeedUpFlow& LogBuildingSpeedUpFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogBuildingSpeedUpFlow* LogBuildingSpeedUpFlow::default_instance_ = NULL;

LogBuildingSpeedUpFlow* LogBuildingSpeedUpFlow::New() const {
  return new LogBuildingSpeedUpFlow;
}

void LogBuildingSpeedUpFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    libuildingtype_ = 0;
    lispeedupsource_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogBuildingSpeedUpFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiBuildingType;
        break;
      }
      
      // required int32 LiBuildingType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiBuildingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &libuildingtype_)));
          set_has_libuildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiSpeedUpSource;
        break;
      }
      
      // required int32 LiSpeedUpSource = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiSpeedUpSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lispeedupsource_)));
          set_has_lispeedupsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogBuildingSpeedUpFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiBuildingType = 6;
  if (has_libuildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->libuildingtype(), output);
  }
  
  // required int32 LiSpeedUpSource = 7;
  if (has_lispeedupsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lispeedupsource(), output);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogBuildingSpeedUpFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiBuildingType = 6;
  if (has_libuildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->libuildingtype(), target);
  }
  
  // required int32 LiSpeedUpSource = 7;
  if (has_lispeedupsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lispeedupsource(), target);
  }
  
  // optional string LZoneID = 8;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogBuildingSpeedUpFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiBuildingType = 6;
    if (has_libuildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->libuildingtype());
    }
    
    // required int32 LiSpeedUpSource = 7;
    if (has_lispeedupsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lispeedupsource());
    }
    
    // optional string LZoneID = 8;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogBuildingSpeedUpFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogBuildingSpeedUpFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogBuildingSpeedUpFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogBuildingSpeedUpFlow::MergeFrom(const LogBuildingSpeedUpFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_libuildingtype()) {
      set_libuildingtype(from.libuildingtype());
    }
    if (from.has_lispeedupsource()) {
      set_lispeedupsource(from.lispeedupsource());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogBuildingSpeedUpFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogBuildingSpeedUpFlow::CopyFrom(const LogBuildingSpeedUpFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogBuildingSpeedUpFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LogBuildingSpeedUpFlow::Swap(LogBuildingSpeedUpFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(libuildingtype_, other->libuildingtype_);
    std::swap(lispeedupsource_, other->lispeedupsource_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogBuildingSpeedUpFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogBuildingSpeedUpFlow_descriptor_;
  metadata.reflection = LogBuildingSpeedUpFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSpellCreateFlow::kLGameSvrIdFieldNumber;
const int LogSpellCreateFlow::kLdtEventTimeFieldNumber;
const int LogSpellCreateFlow::kLvGameAppidFieldNumber;
const int LogSpellCreateFlow::kLPlatIDFieldNumber;
const int LogSpellCreateFlow::kLvopenidFieldNumber;
const int LogSpellCreateFlow::kLiCenterLevelFieldNumber;
const int LogSpellCreateFlow::kLiSpellTypeFieldNumber;
const int LogSpellCreateFlow::kLiSpellLevelFieldNumber;
const int LogSpellCreateFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSpellCreateFlow::LogSpellCreateFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSpellCreateFlow::InitAsDefaultInstance() {
}

LogSpellCreateFlow::LogSpellCreateFlow(const LogSpellCreateFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSpellCreateFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  lispelltype_ = 0;
  lispelllevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSpellCreateFlow::~LogSpellCreateFlow() {
  SharedDtor();
}

void LogSpellCreateFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSpellCreateFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSpellCreateFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSpellCreateFlow_descriptor_;
}

const LogSpellCreateFlow& LogSpellCreateFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSpellCreateFlow* LogSpellCreateFlow::default_instance_ = NULL;

LogSpellCreateFlow* LogSpellCreateFlow::New() const {
  return new LogSpellCreateFlow;
}

void LogSpellCreateFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    lispelltype_ = 0;
    lispelllevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSpellCreateFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiSpellType;
        break;
      }
      
      // required int32 LiSpellType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiSpellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lispelltype_)));
          set_has_lispelltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiSpellLevel;
        break;
      }
      
      // required int32 LiSpellLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiSpellLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lispelllevel_)));
          set_has_lispelllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSpellCreateFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // required int32 LiSpellType = 7;
  if (has_lispelltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lispelltype(), output);
  }
  
  // required int32 LiSpellLevel = 8;
  if (has_lispelllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lispelllevel(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSpellCreateFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // required int32 LiSpellType = 7;
  if (has_lispelltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lispelltype(), target);
  }
  
  // required int32 LiSpellLevel = 8;
  if (has_lispelllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lispelllevel(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSpellCreateFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiSpellType = 7;
    if (has_lispelltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lispelltype());
    }
    
    // required int32 LiSpellLevel = 8;
    if (has_lispelllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lispelllevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSpellCreateFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSpellCreateFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSpellCreateFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSpellCreateFlow::MergeFrom(const LogSpellCreateFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lispelltype()) {
      set_lispelltype(from.lispelltype());
    }
    if (from.has_lispelllevel()) {
      set_lispelllevel(from.lispelllevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSpellCreateFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSpellCreateFlow::CopyFrom(const LogSpellCreateFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSpellCreateFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogSpellCreateFlow::Swap(LogSpellCreateFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lispelltype_, other->lispelltype_);
    std::swap(lispelllevel_, other->lispelllevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSpellCreateFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSpellCreateFlow_descriptor_;
  metadata.reflection = LogSpellCreateFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogStrategyCreateFlow::kLGameSvrIdFieldNumber;
const int LogStrategyCreateFlow::kLdtEventTimeFieldNumber;
const int LogStrategyCreateFlow::kLvGameAppidFieldNumber;
const int LogStrategyCreateFlow::kLPlatIDFieldNumber;
const int LogStrategyCreateFlow::kLvopenidFieldNumber;
const int LogStrategyCreateFlow::kLiCenterLevelFieldNumber;
const int LogStrategyCreateFlow::kLiStrategyTypeFieldNumber;
const int LogStrategyCreateFlow::kLiStrategyLevelFieldNumber;
const int LogStrategyCreateFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogStrategyCreateFlow::LogStrategyCreateFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStrategyCreateFlow::InitAsDefaultInstance() {
}

LogStrategyCreateFlow::LogStrategyCreateFlow(const LogStrategyCreateFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStrategyCreateFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  listrategytype_ = 0;
  listrategylevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStrategyCreateFlow::~LogStrategyCreateFlow() {
  SharedDtor();
}

void LogStrategyCreateFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogStrategyCreateFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStrategyCreateFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStrategyCreateFlow_descriptor_;
}

const LogStrategyCreateFlow& LogStrategyCreateFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogStrategyCreateFlow* LogStrategyCreateFlow::default_instance_ = NULL;

LogStrategyCreateFlow* LogStrategyCreateFlow::New() const {
  return new LogStrategyCreateFlow;
}

void LogStrategyCreateFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    listrategytype_ = 0;
    listrategylevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStrategyCreateFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiStrategyType;
        break;
      }
      
      // required int32 LiStrategyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiStrategyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listrategytype_)));
          set_has_listrategytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiStrategyLevel;
        break;
      }
      
      // required int32 LiStrategyLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiStrategyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listrategylevel_)));
          set_has_listrategylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStrategyCreateFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // required int32 LiStrategyType = 7;
  if (has_listrategytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->listrategytype(), output);
  }
  
  // required int32 LiStrategyLevel = 8;
  if (has_listrategylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->listrategylevel(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStrategyCreateFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // required int32 LiStrategyType = 7;
  if (has_listrategytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->listrategytype(), target);
  }
  
  // required int32 LiStrategyLevel = 8;
  if (has_listrategylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->listrategylevel(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStrategyCreateFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiStrategyType = 7;
    if (has_listrategytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listrategytype());
    }
    
    // required int32 LiStrategyLevel = 8;
    if (has_listrategylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listrategylevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStrategyCreateFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStrategyCreateFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStrategyCreateFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStrategyCreateFlow::MergeFrom(const LogStrategyCreateFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_listrategytype()) {
      set_listrategytype(from.listrategytype());
    }
    if (from.has_listrategylevel()) {
      set_listrategylevel(from.listrategylevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStrategyCreateFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStrategyCreateFlow::CopyFrom(const LogStrategyCreateFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStrategyCreateFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogStrategyCreateFlow::Swap(LogStrategyCreateFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(listrategytype_, other->listrategytype_);
    std::swap(listrategylevel_, other->listrategylevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStrategyCreateFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStrategyCreateFlow_descriptor_;
  metadata.reflection = LogStrategyCreateFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSuperLeagueFlow::kLGameSvrIdFieldNumber;
const int LogSuperLeagueFlow::kLdtEventTimeFieldNumber;
const int LogSuperLeagueFlow::kLvGameAppidFieldNumber;
const int LogSuperLeagueFlow::kLPlatIDFieldNumber;
const int LogSuperLeagueFlow::kLvopenidFieldNumber;
const int LogSuperLeagueFlow::kLiCenterLevelFieldNumber;
const int LogSuperLeagueFlow::kLiOldSegFieldNumber;
const int LogSuperLeagueFlow::kLiNewSegFieldNumber;
const int LogSuperLeagueFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSuperLeagueFlow::LogSuperLeagueFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSuperLeagueFlow::InitAsDefaultInstance() {
}

LogSuperLeagueFlow::LogSuperLeagueFlow(const LogSuperLeagueFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSuperLeagueFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  lioldseg_ = 0;
  linewseg_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSuperLeagueFlow::~LogSuperLeagueFlow() {
  SharedDtor();
}

void LogSuperLeagueFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSuperLeagueFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSuperLeagueFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSuperLeagueFlow_descriptor_;
}

const LogSuperLeagueFlow& LogSuperLeagueFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSuperLeagueFlow* LogSuperLeagueFlow::default_instance_ = NULL;

LogSuperLeagueFlow* LogSuperLeagueFlow::New() const {
  return new LogSuperLeagueFlow;
}

void LogSuperLeagueFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    lioldseg_ = 0;
    linewseg_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSuperLeagueFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiOldSeg;
        break;
      }
      
      // required int32 LiOldSeg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiOldSeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lioldseg_)));
          set_has_lioldseg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiNewSeg;
        break;
      }
      
      // required int32 LiNewSeg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiNewSeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linewseg_)));
          set_has_linewseg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSuperLeagueFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // required int32 LiOldSeg = 7;
  if (has_lioldseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lioldseg(), output);
  }
  
  // required int32 LiNewSeg = 8;
  if (has_linewseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linewseg(), output);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSuperLeagueFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // required int32 LiOldSeg = 7;
  if (has_lioldseg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lioldseg(), target);
  }
  
  // required int32 LiNewSeg = 8;
  if (has_linewseg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->linewseg(), target);
  }
  
  // optional string LZoneID = 9;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSuperLeagueFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiOldSeg = 7;
    if (has_lioldseg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lioldseg());
    }
    
    // required int32 LiNewSeg = 8;
    if (has_linewseg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linewseg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LZoneID = 9;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSuperLeagueFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSuperLeagueFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSuperLeagueFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSuperLeagueFlow::MergeFrom(const LogSuperLeagueFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lioldseg()) {
      set_lioldseg(from.lioldseg());
    }
    if (from.has_linewseg()) {
      set_linewseg(from.linewseg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSuperLeagueFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSuperLeagueFlow::CopyFrom(const LogSuperLeagueFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSuperLeagueFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void LogSuperLeagueFlow::Swap(LogSuperLeagueFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lioldseg_, other->lioldseg_);
    std::swap(linewseg_, other->linewseg_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSuperLeagueFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSuperLeagueFlow_descriptor_;
  metadata.reflection = LogSuperLeagueFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSpellUseFlow::kLGameSvrIdFieldNumber;
const int LogSpellUseFlow::kLdtEventTimeFieldNumber;
const int LogSpellUseFlow::kLvGameAppidFieldNumber;
const int LogSpellUseFlow::kLPlatIDFieldNumber;
const int LogSpellUseFlow::kLvopenidFieldNumber;
const int LogSpellUseFlow::kLiCenterLevelFieldNumber;
const int LogSpellUseFlow::kLiSpellTypeFieldNumber;
const int LogSpellUseFlow::kLiSpellLevelFieldNumber;
const int LogSpellUseFlow::kLiBattleTypeFieldNumber;
const int LogSpellUseFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogSpellUseFlow::LogSpellUseFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogSpellUseFlow::InitAsDefaultInstance() {
}

LogSpellUseFlow::LogSpellUseFlow(const LogSpellUseFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogSpellUseFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  lispelltype_ = 0;
  lispelllevel_ = 0;
  libattletype_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSpellUseFlow::~LogSpellUseFlow() {
  SharedDtor();
}

void LogSpellUseFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogSpellUseFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSpellUseFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSpellUseFlow_descriptor_;
}

const LogSpellUseFlow& LogSpellUseFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogSpellUseFlow* LogSpellUseFlow::default_instance_ = NULL;

LogSpellUseFlow* LogSpellUseFlow::New() const {
  return new LogSpellUseFlow;
}

void LogSpellUseFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    lispelltype_ = 0;
    lispelllevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    libattletype_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSpellUseFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiSpellType;
        break;
      }
      
      // required int32 LiSpellType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiSpellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lispelltype_)));
          set_has_lispelltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiSpellLevel;
        break;
      }
      
      // required int32 LiSpellLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiSpellLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lispelllevel_)));
          set_has_lispelllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiBattleType;
        break;
      }
      
      // required int32 LiBattleType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiBattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &libattletype_)));
          set_has_libattletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogSpellUseFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // required int32 LiSpellType = 7;
  if (has_lispelltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lispelltype(), output);
  }
  
  // required int32 LiSpellLevel = 8;
  if (has_lispelllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lispelllevel(), output);
  }
  
  // required int32 LiBattleType = 9;
  if (has_libattletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->libattletype(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogSpellUseFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // required int32 LiSpellType = 7;
  if (has_lispelltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lispelltype(), target);
  }
  
  // required int32 LiSpellLevel = 8;
  if (has_lispelllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lispelllevel(), target);
  }
  
  // required int32 LiBattleType = 9;
  if (has_libattletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->libattletype(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogSpellUseFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiSpellType = 7;
    if (has_lispelltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lispelltype());
    }
    
    // required int32 LiSpellLevel = 8;
    if (has_lispelllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lispelllevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiBattleType = 9;
    if (has_libattletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->libattletype());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSpellUseFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSpellUseFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSpellUseFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSpellUseFlow::MergeFrom(const LogSpellUseFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lispelltype()) {
      set_lispelltype(from.lispelltype());
    }
    if (from.has_lispelllevel()) {
      set_lispelllevel(from.lispelllevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_libattletype()) {
      set_libattletype(from.libattletype());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSpellUseFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSpellUseFlow::CopyFrom(const LogSpellUseFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSpellUseFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogSpellUseFlow::Swap(LogSpellUseFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lispelltype_, other->lispelltype_);
    std::swap(lispelllevel_, other->lispelllevel_);
    std::swap(libattletype_, other->libattletype_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSpellUseFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSpellUseFlow_descriptor_;
  metadata.reflection = LogSpellUseFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogStrategyUseFlow::kLGameSvrIdFieldNumber;
const int LogStrategyUseFlow::kLdtEventTimeFieldNumber;
const int LogStrategyUseFlow::kLvGameAppidFieldNumber;
const int LogStrategyUseFlow::kLPlatIDFieldNumber;
const int LogStrategyUseFlow::kLvopenidFieldNumber;
const int LogStrategyUseFlow::kLiCenterLevelFieldNumber;
const int LogStrategyUseFlow::kLiStrategyTypeFieldNumber;
const int LogStrategyUseFlow::kLiStrategyLevelFieldNumber;
const int LogStrategyUseFlow::kLiBattleTypeFieldNumber;
const int LogStrategyUseFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogStrategyUseFlow::LogStrategyUseFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStrategyUseFlow::InitAsDefaultInstance() {
}

LogStrategyUseFlow::LogStrategyUseFlow(const LogStrategyUseFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStrategyUseFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  listrategytype_ = 0;
  listrategylevel_ = 0;
  libattletype_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStrategyUseFlow::~LogStrategyUseFlow() {
  SharedDtor();
}

void LogStrategyUseFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogStrategyUseFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStrategyUseFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStrategyUseFlow_descriptor_;
}

const LogStrategyUseFlow& LogStrategyUseFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogStrategyUseFlow* LogStrategyUseFlow::default_instance_ = NULL;

LogStrategyUseFlow* LogStrategyUseFlow::New() const {
  return new LogStrategyUseFlow;
}

void LogStrategyUseFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    listrategytype_ = 0;
    listrategylevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    libattletype_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStrategyUseFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiStrategyType;
        break;
      }
      
      // required int32 LiStrategyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiStrategyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listrategytype_)));
          set_has_listrategytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiStrategyLevel;
        break;
      }
      
      // required int32 LiStrategyLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiStrategyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listrategylevel_)));
          set_has_listrategylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiBattleType;
        break;
      }
      
      // required int32 LiBattleType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiBattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &libattletype_)));
          set_has_libattletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStrategyUseFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // required int32 LiStrategyType = 7;
  if (has_listrategytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->listrategytype(), output);
  }
  
  // required int32 LiStrategyLevel = 8;
  if (has_listrategylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->listrategylevel(), output);
  }
  
  // required int32 LiBattleType = 9;
  if (has_libattletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->libattletype(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStrategyUseFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // required int32 LiStrategyType = 7;
  if (has_listrategytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->listrategytype(), target);
  }
  
  // required int32 LiStrategyLevel = 8;
  if (has_listrategylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->listrategylevel(), target);
  }
  
  // required int32 LiBattleType = 9;
  if (has_libattletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->libattletype(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStrategyUseFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // required int32 LiStrategyType = 7;
    if (has_listrategytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listrategytype());
    }
    
    // required int32 LiStrategyLevel = 8;
    if (has_listrategylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listrategylevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiBattleType = 9;
    if (has_libattletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->libattletype());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStrategyUseFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStrategyUseFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStrategyUseFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStrategyUseFlow::MergeFrom(const LogStrategyUseFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_listrategytype()) {
      set_listrategytype(from.listrategytype());
    }
    if (from.has_listrategylevel()) {
      set_listrategylevel(from.listrategylevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_libattletype()) {
      set_libattletype(from.libattletype());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStrategyUseFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStrategyUseFlow::CopyFrom(const LogStrategyUseFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStrategyUseFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogStrategyUseFlow::Swap(LogStrategyUseFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(listrategytype_, other->listrategytype_);
    std::swap(listrategylevel_, other->listrategylevel_);
    std::swap(libattletype_, other->libattletype_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStrategyUseFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStrategyUseFlow_descriptor_;
  metadata.reflection = LogStrategyUseFlow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogReceiveCharFlow_ReceiveSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogReceiveCharFlow_ReceiveSource_descriptor_;
}
bool LogReceiveCharFlow_ReceiveSource_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow::Friend;
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow::Clan;
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow::ReceiveSource_MIN;
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow::ReceiveSource_MAX;
const int LogReceiveCharFlow::ReceiveSource_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogReceiveCharFlow::kLGameSvrIdFieldNumber;
const int LogReceiveCharFlow::kLdtEventTimeFieldNumber;
const int LogReceiveCharFlow::kLvGameAppidFieldNumber;
const int LogReceiveCharFlow::kLPlatIDFieldNumber;
const int LogReceiveCharFlow::kLvopenidFieldNumber;
const int LogReceiveCharFlow::kLichartypeFieldNumber;
const int LogReceiveCharFlow::kLicharlevelFieldNumber;
const int LogReceiveCharFlow::kLisourceFieldNumber;
const int LogReceiveCharFlow::kLiCenterLevelFieldNumber;
const int LogReceiveCharFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogReceiveCharFlow::LogReceiveCharFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogReceiveCharFlow::InitAsDefaultInstance() {
}

LogReceiveCharFlow::LogReceiveCharFlow(const LogReceiveCharFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogReceiveCharFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lichartype_ = 0;
  licharlevel_ = 0;
  lisource_ = 0;
  licenterlevel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogReceiveCharFlow::~LogReceiveCharFlow() {
  SharedDtor();
}

void LogReceiveCharFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogReceiveCharFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogReceiveCharFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogReceiveCharFlow_descriptor_;
}

const LogReceiveCharFlow& LogReceiveCharFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogReceiveCharFlow* LogReceiveCharFlow::default_instance_ = NULL;

LogReceiveCharFlow* LogReceiveCharFlow::New() const {
  return new LogReceiveCharFlow;
}

void LogReceiveCharFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    lichartype_ = 0;
    licharlevel_ = 0;
    lisource_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    licenterlevel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogReceiveCharFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Lichartype;
        break;
      }
      
      // required int32 Lichartype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lichartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lichartype_)));
          set_has_lichartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Licharlevel;
        break;
      }
      
      // required int32 Licharlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Licharlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licharlevel_)));
          set_has_licharlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Lisource;
        break;
      }
      
      // required int32 Lisource = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lisource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lisource_)));
          set_has_lisource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogReceiveCharFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 Lichartype = 6;
  if (has_lichartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lichartype(), output);
  }
  
  // required int32 Licharlevel = 7;
  if (has_licharlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->licharlevel(), output);
  }
  
  // required int32 Lisource = 8;
  if (has_lisource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lisource(), output);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->licenterlevel(), output);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogReceiveCharFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 Lichartype = 6;
  if (has_lichartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lichartype(), target);
  }
  
  // required int32 Licharlevel = 7;
  if (has_licharlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->licharlevel(), target);
  }
  
  // required int32 Lisource = 8;
  if (has_lisource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lisource(), target);
  }
  
  // required int32 LiCenterLevel = 9;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->licenterlevel(), target);
  }
  
  // optional string LZoneID = 10;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogReceiveCharFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 Lichartype = 6;
    if (has_lichartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lichartype());
    }
    
    // required int32 Licharlevel = 7;
    if (has_licharlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licharlevel());
    }
    
    // required int32 Lisource = 8;
    if (has_lisource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lisource());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LiCenterLevel = 9;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional string LZoneID = 10;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogReceiveCharFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogReceiveCharFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogReceiveCharFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogReceiveCharFlow::MergeFrom(const LogReceiveCharFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_lichartype()) {
      set_lichartype(from.lichartype());
    }
    if (from.has_licharlevel()) {
      set_licharlevel(from.licharlevel());
    }
    if (from.has_lisource()) {
      set_lisource(from.lisource());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogReceiveCharFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogReceiveCharFlow::CopyFrom(const LogReceiveCharFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReceiveCharFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void LogReceiveCharFlow::Swap(LogReceiveCharFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(lichartype_, other->lichartype_);
    std::swap(licharlevel_, other->licharlevel_);
    std::swap(lisource_, other->lisource_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogReceiveCharFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogReceiveCharFlow_descriptor_;
  metadata.reflection = LogReceiveCharFlow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogFriendHouseFlow_ResType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogFriendHouseFlow_ResType_descriptor_;
}
bool LogFriendHouseFlow_ResType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Gold;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Food;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Gem;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Wuhun;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Tili;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Dragon;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::Pekka;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::ResType_MIN;
const LogFriendHouseFlow_ResType LogFriendHouseFlow::ResType_MAX;
const int LogFriendHouseFlow::ResType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogFriendHouseFlow::kLGameSvrIdFieldNumber;
const int LogFriendHouseFlow::kLdtEventTimeFieldNumber;
const int LogFriendHouseFlow::kLvGameAppidFieldNumber;
const int LogFriendHouseFlow::kLPlatIDFieldNumber;
const int LogFriendHouseFlow::kLvopenidFieldNumber;
const int LogFriendHouseFlow::kLiCenterLevelFieldNumber;
const int LogFriendHouseFlow::kLiResType1FieldNumber;
const int LogFriendHouseFlow::kLiResNum1FieldNumber;
const int LogFriendHouseFlow::kLiResType2FieldNumber;
const int LogFriendHouseFlow::kLiResNum2FieldNumber;
const int LogFriendHouseFlow::kLiResType3FieldNumber;
const int LogFriendHouseFlow::kLiResNum3FieldNumber;
const int LogFriendHouseFlow::kLiResType4FieldNumber;
const int LogFriendHouseFlow::kLiResNum4FieldNumber;
const int LogFriendHouseFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogFriendHouseFlow::LogFriendHouseFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogFriendHouseFlow::InitAsDefaultInstance() {
}

LogFriendHouseFlow::LogFriendHouseFlow(const LogFriendHouseFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogFriendHouseFlow::SharedCtor() {
  _cached_size_ = 0;
  lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lplatid_ = 0;
  lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  licenterlevel_ = 0;
  lirestype1_ = 0;
  liresnum1_ = 0;
  lirestype2_ = 0;
  liresnum2_ = 0;
  lirestype3_ = 0;
  liresnum3_ = 0;
  lirestype4_ = 0;
  liresnum4_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogFriendHouseFlow::~LogFriendHouseFlow() {
  SharedDtor();
}

void LogFriendHouseFlow::SharedDtor() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete lgamesvrid_;
  }
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete ldteventtime_;
  }
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvgameappid_;
  }
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete lvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogFriendHouseFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogFriendHouseFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogFriendHouseFlow_descriptor_;
}

const LogFriendHouseFlow& LogFriendHouseFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogFriendHouseFlow* LogFriendHouseFlow::default_instance_ = NULL;

LogFriendHouseFlow* LogFriendHouseFlow::New() const {
  return new LogFriendHouseFlow;
}

void LogFriendHouseFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lgamesvrid()) {
      if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        lgamesvrid_->clear();
      }
    }
    if (has_ldteventtime()) {
      if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
        ldteventtime_->clear();
      }
    }
    if (has_lvgameappid()) {
      if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
        lvgameappid_->clear();
      }
    }
    lplatid_ = 0;
    if (has_lvopenid()) {
      if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
        lvopenid_->clear();
      }
    }
    licenterlevel_ = 0;
    lirestype1_ = 0;
    liresnum1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lirestype2_ = 0;
    liresnum2_ = 0;
    lirestype3_ = 0;
    liresnum3_ = 0;
    lirestype4_ = 0;
    liresnum4_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogFriendHouseFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LGameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lgamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lgamesvrid().data(), this->lgamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LdtEventTime;
        break;
      }
      
      // required string LdtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LdtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldteventtime().data(), this->ldteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LvGameAppid;
        break;
      }
      
      // required string LvGameAppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvGameAppid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvgameappid().data(), this->lvgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LPlatID;
        break;
      }
      
      // required int32 LPlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LPlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lplatid_)));
          set_has_lplatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Lvopenid;
        break;
      }
      
      // required string Lvopenid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lvopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvopenid().data(), this->lvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LiCenterLevel;
        break;
      }
      
      // required int32 LiCenterLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiCenterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &licenterlevel_)));
          set_has_licenterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LiResType1;
        break;
      }
      
      // optional int32 LiResType1 = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResType1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lirestype1_)));
          set_has_lirestype1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LiResNum1;
        break;
      }
      
      // optional int32 LiResNum1 = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liresnum1_)));
          set_has_liresnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LiResType2;
        break;
      }
      
      // optional int32 LiResType2 = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lirestype2_)));
          set_has_lirestype2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LiResNum2;
        break;
      }
      
      // optional int32 LiResNum2 = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liresnum2_)));
          set_has_liresnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LiResType3;
        break;
      }
      
      // optional int32 LiResType3 = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResType3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lirestype3_)));
          set_has_lirestype3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LiResNum3;
        break;
      }
      
      // optional int32 LiResNum3 = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResNum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liresnum3_)));
          set_has_liresnum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_LiResType4;
        break;
      }
      
      // optional int32 LiResType4 = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResType4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lirestype4_)));
          set_has_lirestype4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LiResNum4;
        break;
      }
      
      // optional int32 LiResNum4 = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiResNum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liresnum4_)));
          set_has_liresnum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogFriendHouseFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lgamesvrid(), output);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ldteventtime(), output);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lvgameappid(), output);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lplatid(), output);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvopenid(), output);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->licenterlevel(), output);
  }
  
  // optional int32 LiResType1 = 7 [default = 0];
  if (has_lirestype1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lirestype1(), output);
  }
  
  // optional int32 LiResNum1 = 8 [default = 0];
  if (has_liresnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->liresnum1(), output);
  }
  
  // optional int32 LiResType2 = 9 [default = 0];
  if (has_lirestype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lirestype2(), output);
  }
  
  // optional int32 LiResNum2 = 10 [default = 0];
  if (has_liresnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->liresnum2(), output);
  }
  
  // optional int32 LiResType3 = 11 [default = 0];
  if (has_lirestype3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lirestype3(), output);
  }
  
  // optional int32 LiResNum3 = 12 [default = 0];
  if (has_liresnum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->liresnum3(), output);
  }
  
  // optional int32 LiResType4 = 13 [default = 0];
  if (has_lirestype4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lirestype4(), output);
  }
  
  // optional int32 LiResNum4 = 14 [default = 0];
  if (has_liresnum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->liresnum4(), output);
  }
  
  // optional string LZoneID = 15;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogFriendHouseFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LGameSvrId = 1;
  if (has_lgamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lgamesvrid().data(), this->lgamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lgamesvrid(), target);
  }
  
  // required string LdtEventTime = 2;
  if (has_ldteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldteventtime().data(), this->ldteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ldteventtime(), target);
  }
  
  // required string LvGameAppid = 3;
  if (has_lvgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvgameappid().data(), this->lvgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lvgameappid(), target);
  }
  
  // required int32 LPlatID = 4;
  if (has_lplatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lplatid(), target);
  }
  
  // required string Lvopenid = 5;
  if (has_lvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvopenid().data(), this->lvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lvopenid(), target);
  }
  
  // required int32 LiCenterLevel = 6;
  if (has_licenterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->licenterlevel(), target);
  }
  
  // optional int32 LiResType1 = 7 [default = 0];
  if (has_lirestype1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lirestype1(), target);
  }
  
  // optional int32 LiResNum1 = 8 [default = 0];
  if (has_liresnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->liresnum1(), target);
  }
  
  // optional int32 LiResType2 = 9 [default = 0];
  if (has_lirestype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lirestype2(), target);
  }
  
  // optional int32 LiResNum2 = 10 [default = 0];
  if (has_liresnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->liresnum2(), target);
  }
  
  // optional int32 LiResType3 = 11 [default = 0];
  if (has_lirestype3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lirestype3(), target);
  }
  
  // optional int32 LiResNum3 = 12 [default = 0];
  if (has_liresnum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->liresnum3(), target);
  }
  
  // optional int32 LiResType4 = 13 [default = 0];
  if (has_lirestype4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lirestype4(), target);
  }
  
  // optional int32 LiResNum4 = 14 [default = 0];
  if (has_liresnum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->liresnum4(), target);
  }
  
  // optional string LZoneID = 15;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogFriendHouseFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LGameSvrId = 1;
    if (has_lgamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lgamesvrid());
    }
    
    // required string LdtEventTime = 2;
    if (has_ldteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldteventtime());
    }
    
    // required string LvGameAppid = 3;
    if (has_lvgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvgameappid());
    }
    
    // required int32 LPlatID = 4;
    if (has_lplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lplatid());
    }
    
    // required string Lvopenid = 5;
    if (has_lvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lvopenid());
    }
    
    // required int32 LiCenterLevel = 6;
    if (has_licenterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->licenterlevel());
    }
    
    // optional int32 LiResType1 = 7 [default = 0];
    if (has_lirestype1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lirestype1());
    }
    
    // optional int32 LiResNum1 = 8 [default = 0];
    if (has_liresnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liresnum1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LiResType2 = 9 [default = 0];
    if (has_lirestype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lirestype2());
    }
    
    // optional int32 LiResNum2 = 10 [default = 0];
    if (has_liresnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liresnum2());
    }
    
    // optional int32 LiResType3 = 11 [default = 0];
    if (has_lirestype3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lirestype3());
    }
    
    // optional int32 LiResNum3 = 12 [default = 0];
    if (has_liresnum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liresnum3());
    }
    
    // optional int32 LiResType4 = 13 [default = 0];
    if (has_lirestype4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lirestype4());
    }
    
    // optional int32 LiResNum4 = 14 [default = 0];
    if (has_liresnum4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liresnum4());
    }
    
    // optional string LZoneID = 15;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogFriendHouseFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogFriendHouseFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogFriendHouseFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogFriendHouseFlow::MergeFrom(const LogFriendHouseFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgamesvrid()) {
      set_lgamesvrid(from.lgamesvrid());
    }
    if (from.has_ldteventtime()) {
      set_ldteventtime(from.ldteventtime());
    }
    if (from.has_lvgameappid()) {
      set_lvgameappid(from.lvgameappid());
    }
    if (from.has_lplatid()) {
      set_lplatid(from.lplatid());
    }
    if (from.has_lvopenid()) {
      set_lvopenid(from.lvopenid());
    }
    if (from.has_licenterlevel()) {
      set_licenterlevel(from.licenterlevel());
    }
    if (from.has_lirestype1()) {
      set_lirestype1(from.lirestype1());
    }
    if (from.has_liresnum1()) {
      set_liresnum1(from.liresnum1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lirestype2()) {
      set_lirestype2(from.lirestype2());
    }
    if (from.has_liresnum2()) {
      set_liresnum2(from.liresnum2());
    }
    if (from.has_lirestype3()) {
      set_lirestype3(from.lirestype3());
    }
    if (from.has_liresnum3()) {
      set_liresnum3(from.liresnum3());
    }
    if (from.has_lirestype4()) {
      set_lirestype4(from.lirestype4());
    }
    if (from.has_liresnum4()) {
      set_liresnum4(from.liresnum4());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogFriendHouseFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogFriendHouseFlow::CopyFrom(const LogFriendHouseFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFriendHouseFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void LogFriendHouseFlow::Swap(LogFriendHouseFlow* other) {
  if (other != this) {
    std::swap(lgamesvrid_, other->lgamesvrid_);
    std::swap(ldteventtime_, other->ldteventtime_);
    std::swap(lvgameappid_, other->lvgameappid_);
    std::swap(lplatid_, other->lplatid_);
    std::swap(lvopenid_, other->lvopenid_);
    std::swap(licenterlevel_, other->licenterlevel_);
    std::swap(lirestype1_, other->lirestype1_);
    std::swap(liresnum1_, other->liresnum1_);
    std::swap(lirestype2_, other->lirestype2_);
    std::swap(liresnum2_, other->liresnum2_);
    std::swap(lirestype3_, other->lirestype3_);
    std::swap(liresnum3_, other->liresnum3_);
    std::swap(lirestype4_, other->lirestype4_);
    std::swap(liresnum4_, other->liresnum4_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogFriendHouseFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogFriendHouseFlow_descriptor_;
  metadata.reflection = LogFriendHouseFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogCommonFlow::kLDetailFieldNumber;
const int LogCommonFlow::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

LogCommonFlow::LogCommonFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogCommonFlow::InitAsDefaultInstance() {
}

LogCommonFlow::LogCommonFlow(const LogCommonFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogCommonFlow::SharedCtor() {
  _cached_size_ = 0;
  ldetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogCommonFlow::~LogCommonFlow() {
  SharedDtor();
}

void LogCommonFlow::SharedDtor() {
  if (ldetail_ != &::google::protobuf::internal::kEmptyString) {
    delete ldetail_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void LogCommonFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogCommonFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogCommonFlow_descriptor_;
}

const LogCommonFlow& LogCommonFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

LogCommonFlow* LogCommonFlow::default_instance_ = NULL;

LogCommonFlow* LogCommonFlow::New() const {
  return new LogCommonFlow;
}

void LogCommonFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ldetail()) {
      if (ldetail_ != &::google::protobuf::internal::kEmptyString) {
        ldetail_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogCommonFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string LDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ldetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ldetail().data(), this->ldetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogCommonFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string LDetail = 1;
  if (has_ldetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldetail().data(), this->ldetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ldetail(), output);
  }
  
  // optional string LZoneID = 2;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogCommonFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string LDetail = 1;
  if (has_ldetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ldetail().data(), this->ldetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ldetail(), target);
  }
  
  // optional string LZoneID = 2;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogCommonFlow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string LDetail = 1;
    if (has_ldetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ldetail());
    }
    
    // optional string LZoneID = 2;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogCommonFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogCommonFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogCommonFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogCommonFlow::MergeFrom(const LogCommonFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ldetail()) {
      set_ldetail(from.ldetail());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogCommonFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogCommonFlow::CopyFrom(const LogCommonFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogCommonFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LogCommonFlow::Swap(LogCommonFlow* other) {
  if (other != this) {
    std::swap(ldetail_, other->ldetail_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogCommonFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogCommonFlow_descriptor_;
  metadata.reflection = LogCommonFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TpLogin::kTvOpenidFieldNumber;
const int TpLogin::kNChannelFieldNumber;
const int TpLogin::kNConnIdFieldNumber;
const int TpLogin::kTClientVerFieldNumber;
const int TpLogin::kTClientIpFieldNumber;
const int TpLogin::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

TpLogin::TpLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TpLogin::InitAsDefaultInstance() {
}

TpLogin::TpLogin(const TpLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TpLogin::SharedCtor() {
  _cached_size_ = 0;
  tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nchannel_ = 0;
  nconnid_ = GOOGLE_ULONGLONG(0);
  tclientver_ = 0;
  tclientip_ = 0u;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TpLogin::~TpLogin() {
  SharedDtor();
}

void TpLogin::SharedDtor() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete tvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void TpLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TpLogin_descriptor_;
}

const TpLogin& TpLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

TpLogin* TpLogin::default_instance_ = NULL;

TpLogin* TpLogin::New() const {
  return new TpLogin;
}

void TpLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tvopenid()) {
      if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
        tvopenid_->clear();
      }
    }
    nchannel_ = 0;
    nconnid_ = GOOGLE_ULONGLONG(0);
    tclientver_ = 0;
    tclientip_ = 0u;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TpLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TvOpenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tvopenid().data(), this->tvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nChannel;
        break;
      }
      
      // required int32 nChannel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchannel_)));
          set_has_nchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nConnId;
        break;
      }
      
      // required uint64 nConnId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nconnid_)));
          set_has_nconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TClientVer;
        break;
      }
      
      // required int32 TClientVer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TClientVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tclientver_)));
          set_has_tclientver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TClientIp;
        break;
      }
      
      // required uint32 TClientIp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TClientIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tclientip_)));
          set_has_tclientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TpLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tvopenid(), output);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nchannel(), output);
  }
  
  // required uint64 nConnId = 3;
  if (has_nconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nconnid(), output);
  }
  
  // required int32 TClientVer = 4;
  if (has_tclientver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tclientver(), output);
  }
  
  // required uint32 TClientIp = 5;
  if (has_tclientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tclientip(), output);
  }
  
  // optional string LZoneID = 6;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TpLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tvopenid(), target);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nchannel(), target);
  }
  
  // required uint64 nConnId = 3;
  if (has_nconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nconnid(), target);
  }
  
  // required int32 TClientVer = 4;
  if (has_tclientver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tclientver(), target);
  }
  
  // required uint32 TClientIp = 5;
  if (has_tclientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tclientip(), target);
  }
  
  // optional string LZoneID = 6;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TpLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TvOpenid = 1;
    if (has_tvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tvopenid());
    }
    
    // required int32 nChannel = 2;
    if (has_nchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchannel());
    }
    
    // required uint64 nConnId = 3;
    if (has_nconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nconnid());
    }
    
    // required int32 TClientVer = 4;
    if (has_tclientver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tclientver());
    }
    
    // required uint32 TClientIp = 5;
    if (has_tclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tclientip());
    }
    
    // optional string LZoneID = 6;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TpLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TpLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TpLogin::MergeFrom(const TpLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tvopenid()) {
      set_tvopenid(from.tvopenid());
    }
    if (from.has_nchannel()) {
      set_nchannel(from.nchannel());
    }
    if (from.has_nconnid()) {
      set_nconnid(from.nconnid());
    }
    if (from.has_tclientver()) {
      set_tclientver(from.tclientver());
    }
    if (from.has_tclientip()) {
      set_tclientip(from.tclientip());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TpLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpLogin::CopyFrom(const TpLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void TpLogin::Swap(TpLogin* other) {
  if (other != this) {
    std::swap(tvopenid_, other->tvopenid_);
    std::swap(nchannel_, other->nchannel_);
    std::swap(nconnid_, other->nconnid_);
    std::swap(tclientver_, other->tclientver_);
    std::swap(tclientip_, other->tclientip_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TpLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TpLogin_descriptor_;
  metadata.reflection = TpLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TpLogout::kTvOpenidFieldNumber;
const int TpLogout::kNChannelFieldNumber;
const int TpLogout::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

TpLogout::TpLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TpLogout::InitAsDefaultInstance() {
}

TpLogout::TpLogout(const TpLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TpLogout::SharedCtor() {
  _cached_size_ = 0;
  tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nchannel_ = 0;
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TpLogout::~TpLogout() {
  SharedDtor();
}

void TpLogout::SharedDtor() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete tvopenid_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void TpLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TpLogout_descriptor_;
}

const TpLogout& TpLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

TpLogout* TpLogout::default_instance_ = NULL;

TpLogout* TpLogout::New() const {
  return new TpLogout;
}

void TpLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tvopenid()) {
      if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
        tvopenid_->clear();
      }
    }
    nchannel_ = 0;
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TpLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TvOpenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tvopenid().data(), this->tvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nChannel;
        break;
      }
      
      // required int32 nChannel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchannel_)));
          set_has_nchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TpLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tvopenid(), output);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nchannel(), output);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TpLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tvopenid(), target);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nchannel(), target);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TpLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TvOpenid = 1;
    if (has_tvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tvopenid());
    }
    
    // required int32 nChannel = 2;
    if (has_nchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchannel());
    }
    
    // optional string LZoneID = 3;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TpLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TpLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TpLogout::MergeFrom(const TpLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tvopenid()) {
      set_tvopenid(from.tvopenid());
    }
    if (from.has_nchannel()) {
      set_nchannel(from.nchannel());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TpLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpLogout::CopyFrom(const TpLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TpLogout::Swap(TpLogout* other) {
  if (other != this) {
    std::swap(tvopenid_, other->tvopenid_);
    std::swap(nchannel_, other->nchannel_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TpLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TpLogout_descriptor_;
  metadata.reflection = TpLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TpDataRecv::kTvOpenidFieldNumber;
const int TpDataRecv::kNChannelFieldNumber;
const int TpDataRecv::kTDataFieldNumber;
const int TpDataRecv::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

TpDataRecv::TpDataRecv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TpDataRecv::InitAsDefaultInstance() {
}

TpDataRecv::TpDataRecv(const TpDataRecv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TpDataRecv::SharedCtor() {
  _cached_size_ = 0;
  tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nchannel_ = 0;
  tdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TpDataRecv::~TpDataRecv() {
  SharedDtor();
}

void TpDataRecv::SharedDtor() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete tvopenid_;
  }
  if (tdata_ != &::google::protobuf::internal::kEmptyString) {
    delete tdata_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void TpDataRecv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpDataRecv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TpDataRecv_descriptor_;
}

const TpDataRecv& TpDataRecv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

TpDataRecv* TpDataRecv::default_instance_ = NULL;

TpDataRecv* TpDataRecv::New() const {
  return new TpDataRecv;
}

void TpDataRecv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tvopenid()) {
      if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
        tvopenid_->clear();
      }
    }
    nchannel_ = 0;
    if (has_tdata()) {
      if (tdata_ != &::google::protobuf::internal::kEmptyString) {
        tdata_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TpDataRecv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TvOpenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tvopenid().data(), this->tvopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nChannel;
        break;
      }
      
      // required int32 nChannel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchannel_)));
          set_has_nchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TData;
        break;
      }
      
      // required bytes TData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TpDataRecv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tvopenid(), output);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nchannel(), output);
  }
  
  // required bytes TData = 3;
  if (has_tdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->tdata(), output);
  }
  
  // optional string LZoneID = 4;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TpDataRecv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TvOpenid = 1;
  if (has_tvopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tvopenid().data(), this->tvopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tvopenid(), target);
  }
  
  // required int32 nChannel = 2;
  if (has_nchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nchannel(), target);
  }
  
  // required bytes TData = 3;
  if (has_tdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tdata(), target);
  }
  
  // optional string LZoneID = 4;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TpDataRecv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TvOpenid = 1;
    if (has_tvopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tvopenid());
    }
    
    // required int32 nChannel = 2;
    if (has_nchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchannel());
    }
    
    // required bytes TData = 3;
    if (has_tdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tdata());
    }
    
    // optional string LZoneID = 4;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpDataRecv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TpDataRecv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TpDataRecv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TpDataRecv::MergeFrom(const TpDataRecv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tvopenid()) {
      set_tvopenid(from.tvopenid());
    }
    if (from.has_nchannel()) {
      set_nchannel(from.nchannel());
    }
    if (from.has_tdata()) {
      set_tdata(from.tdata());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TpDataRecv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpDataRecv::CopyFrom(const TpDataRecv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpDataRecv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TpDataRecv::Swap(TpDataRecv* other) {
  if (other != this) {
    std::swap(tvopenid_, other->tvopenid_);
    std::swap(nchannel_, other->nchannel_);
    std::swap(tdata_, other->tdata_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TpDataRecv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TpDataRecv_descriptor_;
  metadata.reflection = TpDataRecv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TpDataSend::kNConnIdFieldNumber;
const int TpDataSend::kTDataFieldNumber;
const int TpDataSend::kLZoneIDFieldNumber;
#endif  // !_MSC_VER

TpDataSend::TpDataSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TpDataSend::InitAsDefaultInstance() {
}

TpDataSend::TpDataSend(const TpDataSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TpDataSend::SharedCtor() {
  _cached_size_ = 0;
  nconnid_ = GOOGLE_ULONGLONG(0);
  tdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TpDataSend::~TpDataSend() {
  SharedDtor();
}

void TpDataSend::SharedDtor() {
  if (tdata_ != &::google::protobuf::internal::kEmptyString) {
    delete tdata_;
  }
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete lzoneid_;
  }
  if (this != default_instance_) {
  }
}

void TpDataSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpDataSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TpDataSend_descriptor_;
}

const TpDataSend& TpDataSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();  return *default_instance_;
}

TpDataSend* TpDataSend::default_instance_ = NULL;

TpDataSend* TpDataSend::New() const {
  return new TpDataSend;
}

void TpDataSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nconnid_ = GOOGLE_ULONGLONG(0);
    if (has_tdata()) {
      if (tdata_ != &::google::protobuf::internal::kEmptyString) {
        tdata_->clear();
      }
    }
    if (has_lzoneid()) {
      if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
        lzoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TpDataSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nConnId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nconnid_)));
          set_has_nconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TData;
        break;
      }
      
      // required bytes TData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LZoneID;
        break;
      }
      
      // optional string LZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LZoneID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lzoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lzoneid().data(), this->lzoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TpDataSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 nConnId = 1;
  if (has_nconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nconnid(), output);
  }
  
  // required bytes TData = 2;
  if (has_tdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tdata(), output);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lzoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TpDataSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 nConnId = 1;
  if (has_nconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nconnid(), target);
  }
  
  // required bytes TData = 2;
  if (has_tdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tdata(), target);
  }
  
  // optional string LZoneID = 3;
  if (has_lzoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lzoneid().data(), this->lzoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lzoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TpDataSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 nConnId = 1;
    if (has_nconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nconnid());
    }
    
    // required bytes TData = 2;
    if (has_tdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tdata());
    }
    
    // optional string LZoneID = 3;
    if (has_lzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lzoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpDataSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TpDataSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TpDataSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TpDataSend::MergeFrom(const TpDataSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nconnid()) {
      set_nconnid(from.nconnid());
    }
    if (from.has_tdata()) {
      set_tdata(from.tdata());
    }
    if (from.has_lzoneid()) {
      set_lzoneid(from.lzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TpDataSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpDataSend::CopyFrom(const TpDataSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpDataSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TpDataSend::Swap(TpDataSend* other) {
  if (other != this) {
    std::swap(nconnid_, other->nconnid_);
    std::swap(tdata_, other->tdata_);
    std::swap(lzoneid_, other->lzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TpDataSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TpDataSend_descriptor_;
  metadata.reflection = TpDataSend_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
