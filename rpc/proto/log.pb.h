// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef PROTOBUF_log_2eproto__INCLUDED
#define PROTOBUF_log_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_2eproto();
void protobuf_AssignDesc_log_2eproto();
void protobuf_ShutdownFile_log_2eproto();

class logPlayerLoginLogout;
class LogPlayerRegister;
class LogPlayerLogin;
class LogPlayerLogout;
class LogMoneyFlow;
class LogSnsFlow;
class LogRoundFlow;
class LogBuildingUpgradeFlow;
class LogTaskFlow;
class LogTrainingFlow;
class LogUpdateCharFlow;
class LogSelfBattleFlow;
class LogHeroFlow;
class LogHeroUpdateFlow;
class LogClanFlow;
class LogClanDonateFlow;
class LogPlayerLevelFlow;
class LogSignInFlow;
class LogOnlineNumbers;
class LogShareBattle;
class LogViewShareBattle;
class LogActivityFlow;
class LogFriendDonateRequestFlow;
class LogGameSvrState;
class LogBuildingSpeedUpFlow;
class LogSpellCreateFlow;
class LogStrategyCreateFlow;
class LogSuperLeagueFlow;
class LogSpellUseFlow;
class LogStrategyUseFlow;
class LogReceiveCharFlow;
class LogFriendHouseFlow;
class LogCommonFlow;
class TpLogin;
class TpLogout;
class TpDataRecv;
class TpDataSend;

enum LogMoneyFlow_ADDORREDUCE {
  LogMoneyFlow_ADDORREDUCE_ADD = 0,
  LogMoneyFlow_ADDORREDUCE_REDUCE = 1
};
bool LogMoneyFlow_ADDORREDUCE_IsValid(int value);
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_MIN = LogMoneyFlow_ADDORREDUCE_ADD;
const LogMoneyFlow_ADDORREDUCE LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_MAX = LogMoneyFlow_ADDORREDUCE_REDUCE;
const int LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_ARRAYSIZE = LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogMoneyFlow_ADDORREDUCE_descriptor();
inline const ::std::string& LogMoneyFlow_ADDORREDUCE_Name(LogMoneyFlow_ADDORREDUCE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogMoneyFlow_ADDORREDUCE_descriptor(), value);
}
inline bool LogMoneyFlow_ADDORREDUCE_Parse(
    const ::std::string& name, LogMoneyFlow_ADDORREDUCE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogMoneyFlow_ADDORREDUCE>(
    LogMoneyFlow_ADDORREDUCE_descriptor(), name, value);
}
enum LogSnsFlow_SNSTYPE {
  LogSnsFlow_SNSTYPE_SHOWOFF = 0,
  LogSnsFlow_SNSTYPE_INVITE = 1,
  LogSnsFlow_SNSTYPE_SENDHEART = 2,
  LogSnsFlow_SNSTYPE_RECEIVEHEART = 3,
  LogSnsFlow_SNSTYPE_SENDEMAIL = 4,
  LogSnsFlow_SNSTYPE_RECEIVEEMAIL = 5,
  LogSnsFlow_SNSTYPE_SHARE = 6,
  LogSnsFlow_SNSTYPE_SpeedUp = 7,
  LogSnsFlow_SNSTYPE_ReleaseTime = 8,
  LogSnsFlow_SNSTYPE_SpeedUp_Help = 9,
  LogSnsFlow_SNSTYPE_ReleaseTime_Help = 10,
  LogSnsFlow_SNSTYPE_OTHER = 11,
  LogSnsFlow_SNSTYPE_FriendDonate = 12
};
bool LogSnsFlow_SNSTYPE_IsValid(int value);
const LogSnsFlow_SNSTYPE LogSnsFlow_SNSTYPE_SNSTYPE_MIN = LogSnsFlow_SNSTYPE_SHOWOFF;
const LogSnsFlow_SNSTYPE LogSnsFlow_SNSTYPE_SNSTYPE_MAX = LogSnsFlow_SNSTYPE_FriendDonate;
const int LogSnsFlow_SNSTYPE_SNSTYPE_ARRAYSIZE = LogSnsFlow_SNSTYPE_SNSTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogSnsFlow_SNSTYPE_descriptor();
inline const ::std::string& LogSnsFlow_SNSTYPE_Name(LogSnsFlow_SNSTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogSnsFlow_SNSTYPE_descriptor(), value);
}
inline bool LogSnsFlow_SNSTYPE_Parse(
    const ::std::string& name, LogSnsFlow_SNSTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogSnsFlow_SNSTYPE>(
    LogSnsFlow_SNSTYPE_descriptor(), name, value);
}
enum LogRoundFlow_BATTLETYPE {
  LogRoundFlow_BATTLETYPE_PVE = 0,
  LogRoundFlow_BATTLETYPE_PVP = 1,
  LogRoundFlow_BATTLETYPE_TTT = 2,
  LogRoundFlow_BATTLETYPE_OTHER = 3,
  LogRoundFlow_BATTLETYPE_FRIENDATTACK = 4
};
bool LogRoundFlow_BATTLETYPE_IsValid(int value);
const LogRoundFlow_BATTLETYPE LogRoundFlow_BATTLETYPE_BATTLETYPE_MIN = LogRoundFlow_BATTLETYPE_PVE;
const LogRoundFlow_BATTLETYPE LogRoundFlow_BATTLETYPE_BATTLETYPE_MAX = LogRoundFlow_BATTLETYPE_FRIENDATTACK;
const int LogRoundFlow_BATTLETYPE_BATTLETYPE_ARRAYSIZE = LogRoundFlow_BATTLETYPE_BATTLETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogRoundFlow_BATTLETYPE_descriptor();
inline const ::std::string& LogRoundFlow_BATTLETYPE_Name(LogRoundFlow_BATTLETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogRoundFlow_BATTLETYPE_descriptor(), value);
}
inline bool LogRoundFlow_BATTLETYPE_Parse(
    const ::std::string& name, LogRoundFlow_BATTLETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRoundFlow_BATTLETYPE>(
    LogRoundFlow_BATTLETYPE_descriptor(), name, value);
}
enum LogRoundFlow_PVEBATTLEMODE {
  LogRoundFlow_PVEBATTLEMODE_NORMAL = 0,
  LogRoundFlow_PVEBATTLEMODE_HARD = 1,
  LogRoundFlow_PVEBATTLEMODE_NIGHTMARE = 2,
  LogRoundFlow_PVEBATTLEMODE_BETRAY = 3
};
bool LogRoundFlow_PVEBATTLEMODE_IsValid(int value);
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_MIN = LogRoundFlow_PVEBATTLEMODE_NORMAL;
const LogRoundFlow_PVEBATTLEMODE LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_MAX = LogRoundFlow_PVEBATTLEMODE_BETRAY;
const int LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_ARRAYSIZE = LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEBATTLEMODE_descriptor();
inline const ::std::string& LogRoundFlow_PVEBATTLEMODE_Name(LogRoundFlow_PVEBATTLEMODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogRoundFlow_PVEBATTLEMODE_descriptor(), value);
}
inline bool LogRoundFlow_PVEBATTLEMODE_Parse(
    const ::std::string& name, LogRoundFlow_PVEBATTLEMODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRoundFlow_PVEBATTLEMODE>(
    LogRoundFlow_PVEBATTLEMODE_descriptor(), name, value);
}
enum LogRoundFlow_PVEAUTOMODE {
  LogRoundFlow_PVEAUTOMODE_PVEAMNORMAL = 0,
  LogRoundFlow_PVEAUTOMODE_PVEAMAUTO = 1
};
bool LogRoundFlow_PVEAUTOMODE_IsValid(int value);
const LogRoundFlow_PVEAUTOMODE LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_MIN = LogRoundFlow_PVEAUTOMODE_PVEAMNORMAL;
const LogRoundFlow_PVEAUTOMODE LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_MAX = LogRoundFlow_PVEAUTOMODE_PVEAMAUTO;
const int LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_ARRAYSIZE = LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogRoundFlow_PVEAUTOMODE_descriptor();
inline const ::std::string& LogRoundFlow_PVEAUTOMODE_Name(LogRoundFlow_PVEAUTOMODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogRoundFlow_PVEAUTOMODE_descriptor(), value);
}
inline bool LogRoundFlow_PVEAUTOMODE_Parse(
    const ::std::string& name, LogRoundFlow_PVEAUTOMODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRoundFlow_PVEAUTOMODE>(
    LogRoundFlow_PVEAUTOMODE_descriptor(), name, value);
}
enum LogBuildingSpeedUpFlow_SpeedUpSource {
  LogBuildingSpeedUpFlow_SpeedUpSource_Task = 1,
  LogBuildingSpeedUpFlow_SpeedUpSource_Friend = 2,
  LogBuildingSpeedUpFlow_SpeedUpSource_SystemFriend = 3,
  LogBuildingSpeedUpFlow_SpeedUpSource_Gem = 4
};
bool LogBuildingSpeedUpFlow_SpeedUpSource_IsValid(int value);
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_MIN = LogBuildingSpeedUpFlow_SpeedUpSource_Task;
const LogBuildingSpeedUpFlow_SpeedUpSource LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_MAX = LogBuildingSpeedUpFlow_SpeedUpSource_Gem;
const int LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_ARRAYSIZE = LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogBuildingSpeedUpFlow_SpeedUpSource_descriptor();
inline const ::std::string& LogBuildingSpeedUpFlow_SpeedUpSource_Name(LogBuildingSpeedUpFlow_SpeedUpSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogBuildingSpeedUpFlow_SpeedUpSource_descriptor(), value);
}
inline bool LogBuildingSpeedUpFlow_SpeedUpSource_Parse(
    const ::std::string& name, LogBuildingSpeedUpFlow_SpeedUpSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogBuildingSpeedUpFlow_SpeedUpSource>(
    LogBuildingSpeedUpFlow_SpeedUpSource_descriptor(), name, value);
}
enum LogReceiveCharFlow_ReceiveSource {
  LogReceiveCharFlow_ReceiveSource_Friend = 1,
  LogReceiveCharFlow_ReceiveSource_Clan = 2
};
bool LogReceiveCharFlow_ReceiveSource_IsValid(int value);
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow_ReceiveSource_ReceiveSource_MIN = LogReceiveCharFlow_ReceiveSource_Friend;
const LogReceiveCharFlow_ReceiveSource LogReceiveCharFlow_ReceiveSource_ReceiveSource_MAX = LogReceiveCharFlow_ReceiveSource_Clan;
const int LogReceiveCharFlow_ReceiveSource_ReceiveSource_ARRAYSIZE = LogReceiveCharFlow_ReceiveSource_ReceiveSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogReceiveCharFlow_ReceiveSource_descriptor();
inline const ::std::string& LogReceiveCharFlow_ReceiveSource_Name(LogReceiveCharFlow_ReceiveSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogReceiveCharFlow_ReceiveSource_descriptor(), value);
}
inline bool LogReceiveCharFlow_ReceiveSource_Parse(
    const ::std::string& name, LogReceiveCharFlow_ReceiveSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogReceiveCharFlow_ReceiveSource>(
    LogReceiveCharFlow_ReceiveSource_descriptor(), name, value);
}
enum LogFriendHouseFlow_ResType {
  LogFriendHouseFlow_ResType_Gold = 1,
  LogFriendHouseFlow_ResType_Food = 2,
  LogFriendHouseFlow_ResType_Gem = 3,
  LogFriendHouseFlow_ResType_Wuhun = 4,
  LogFriendHouseFlow_ResType_Tili = 5,
  LogFriendHouseFlow_ResType_Dragon = 6,
  LogFriendHouseFlow_ResType_Pekka = 7
};
bool LogFriendHouseFlow_ResType_IsValid(int value);
const LogFriendHouseFlow_ResType LogFriendHouseFlow_ResType_ResType_MIN = LogFriendHouseFlow_ResType_Gold;
const LogFriendHouseFlow_ResType LogFriendHouseFlow_ResType_ResType_MAX = LogFriendHouseFlow_ResType_Pekka;
const int LogFriendHouseFlow_ResType_ResType_ARRAYSIZE = LogFriendHouseFlow_ResType_ResType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogFriendHouseFlow_ResType_descriptor();
inline const ::std::string& LogFriendHouseFlow_ResType_Name(LogFriendHouseFlow_ResType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogFriendHouseFlow_ResType_descriptor(), value);
}
inline bool LogFriendHouseFlow_ResType_Parse(
    const ::std::string& name, LogFriendHouseFlow_ResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogFriendHouseFlow_ResType>(
    LogFriendHouseFlow_ResType_descriptor(), name, value);
}
// ===================================================================

class logPlayerLoginLogout : public ::google::protobuf::Message {
 public:
  logPlayerLoginLogout();
  virtual ~logPlayerLoginLogout();
  
  logPlayerLoginLogout(const logPlayerLoginLogout& from);
  
  inline logPlayerLoginLogout& operator=(const logPlayerLoginLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const logPlayerLoginLogout& default_instance();
  
  void Swap(logPlayerLoginLogout* other);
  
  // implements Message ----------------------------------------------
  
  logPlayerLoginLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logPlayerLoginLogout& from);
  void MergeFrom(const logPlayerLoginLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required bool logout = 3;
  inline bool has_logout() const;
  inline void clear_logout();
  static const int kLogoutFieldNumber = 3;
  inline bool logout() const;
  inline void set_logout(bool value);
  
  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // @@protoc_insertion_point(class_scope:rpc.logPlayerLoginLogout)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_logout();
  inline void clear_has_logout();
  inline void set_has_ip();
  inline void clear_has_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::google::protobuf::int64 time_;
  ::std::string* ip_;
  bool logout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static logPlayerLoginLogout* default_instance_;
};
// -------------------------------------------------------------------

class LogPlayerRegister : public ::google::protobuf::Message {
 public:
  LogPlayerRegister();
  virtual ~LogPlayerRegister();
  
  LogPlayerRegister(const LogPlayerRegister& from);
  
  inline LogPlayerRegister& operator=(const LogPlayerRegister& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlayerRegister& default_instance();
  
  void Swap(LogPlayerRegister* other);
  
  // implements Message ----------------------------------------------
  
  LogPlayerRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogPlayerRegister& from);
  void MergeFrom(const LogPlayerRegister& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required string LClientVersion = 6;
  inline bool has_lclientversion() const;
  inline void clear_lclientversion();
  static const int kLClientVersionFieldNumber = 6;
  inline const ::std::string& lclientversion() const;
  inline void set_lclientversion(const ::std::string& value);
  inline void set_lclientversion(const char* value);
  inline void set_lclientversion(const char* value, size_t size);
  inline ::std::string* mutable_lclientversion();
  inline ::std::string* release_lclientversion();
  
  // required string LSystemHardware = 7;
  inline bool has_lsystemhardware() const;
  inline void clear_lsystemhardware();
  static const int kLSystemHardwareFieldNumber = 7;
  inline const ::std::string& lsystemhardware() const;
  inline void set_lsystemhardware(const ::std::string& value);
  inline void set_lsystemhardware(const char* value);
  inline void set_lsystemhardware(const char* value, size_t size);
  inline ::std::string* mutable_lsystemhardware();
  inline ::std::string* release_lsystemhardware();
  
  // required string LTelecomOper = 8;
  inline bool has_ltelecomoper() const;
  inline void clear_ltelecomoper();
  static const int kLTelecomOperFieldNumber = 8;
  inline const ::std::string& ltelecomoper() const;
  inline void set_ltelecomoper(const ::std::string& value);
  inline void set_ltelecomoper(const char* value);
  inline void set_ltelecomoper(const char* value, size_t size);
  inline ::std::string* mutable_ltelecomoper();
  inline ::std::string* release_ltelecomoper();
  
  // required string LNetwork = 9;
  inline bool has_lnetwork() const;
  inline void clear_lnetwork();
  static const int kLNetworkFieldNumber = 9;
  inline const ::std::string& lnetwork() const;
  inline void set_lnetwork(const ::std::string& value);
  inline void set_lnetwork(const char* value);
  inline void set_lnetwork(const char* value, size_t size);
  inline ::std::string* mutable_lnetwork();
  inline ::std::string* release_lnetwork();
  
  // required int32 LRegChannel = 10;
  inline bool has_lregchannel() const;
  inline void clear_lregchannel();
  static const int kLRegChannelFieldNumber = 10;
  inline ::google::protobuf::int32 lregchannel() const;
  inline void set_lregchannel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 11;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 11;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogPlayerRegister)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lclientversion();
  inline void clear_has_lclientversion();
  inline void set_has_lsystemhardware();
  inline void clear_has_lsystemhardware();
  inline void set_has_ltelecomoper();
  inline void clear_has_ltelecomoper();
  inline void set_has_lnetwork();
  inline void clear_has_lnetwork();
  inline void set_has_lregchannel();
  inline void clear_has_lregchannel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::std::string* lclientversion_;
  ::std::string* lsystemhardware_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lregchannel_;
  ::std::string* ltelecomoper_;
  ::std::string* lnetwork_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogPlayerRegister* default_instance_;
};
// -------------------------------------------------------------------

class LogPlayerLogin : public ::google::protobuf::Message {
 public:
  LogPlayerLogin();
  virtual ~LogPlayerLogin();
  
  LogPlayerLogin(const LogPlayerLogin& from);
  
  inline LogPlayerLogin& operator=(const LogPlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlayerLogin& default_instance();
  
  void Swap(LogPlayerLogin* other);
  
  // implements Message ----------------------------------------------
  
  LogPlayerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogPlayerLogin& from);
  void MergeFrom(const LogPlayerLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LLevel = 6;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 6;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LPlayerFriendsNum = 7;
  inline bool has_lplayerfriendsnum() const;
  inline void clear_lplayerfriendsnum();
  static const int kLPlayerFriendsNumFieldNumber = 7;
  inline ::google::protobuf::int32 lplayerfriendsnum() const;
  inline void set_lplayerfriendsnum(::google::protobuf::int32 value);
  
  // required string LClientVersion = 8;
  inline bool has_lclientversion() const;
  inline void clear_lclientversion();
  static const int kLClientVersionFieldNumber = 8;
  inline const ::std::string& lclientversion() const;
  inline void set_lclientversion(const ::std::string& value);
  inline void set_lclientversion(const char* value);
  inline void set_lclientversion(const char* value, size_t size);
  inline ::std::string* mutable_lclientversion();
  inline ::std::string* release_lclientversion();
  
  // required string LSystemHardware = 9;
  inline bool has_lsystemhardware() const;
  inline void clear_lsystemhardware();
  static const int kLSystemHardwareFieldNumber = 9;
  inline const ::std::string& lsystemhardware() const;
  inline void set_lsystemhardware(const ::std::string& value);
  inline void set_lsystemhardware(const char* value);
  inline void set_lsystemhardware(const char* value, size_t size);
  inline ::std::string* mutable_lsystemhardware();
  inline ::std::string* release_lsystemhardware();
  
  // required string LTelecomOper = 10;
  inline bool has_ltelecomoper() const;
  inline void clear_ltelecomoper();
  static const int kLTelecomOperFieldNumber = 10;
  inline const ::std::string& ltelecomoper() const;
  inline void set_ltelecomoper(const ::std::string& value);
  inline void set_ltelecomoper(const char* value);
  inline void set_ltelecomoper(const char* value, size_t size);
  inline ::std::string* mutable_ltelecomoper();
  inline ::std::string* release_ltelecomoper();
  
  // required string LNetwork = 11;
  inline bool has_lnetwork() const;
  inline void clear_lnetwork();
  static const int kLNetworkFieldNumber = 11;
  inline const ::std::string& lnetwork() const;
  inline void set_lnetwork(const ::std::string& value);
  inline void set_lnetwork(const char* value);
  inline void set_lnetwork(const char* value, size_t size);
  inline ::std::string* mutable_lnetwork();
  inline ::std::string* release_lnetwork();
  
  // required int32 LLoginChannel = 12;
  inline bool has_lloginchannel() const;
  inline void clear_lloginchannel();
  static const int kLLoginChannelFieldNumber = 12;
  inline ::google::protobuf::int32 lloginchannel() const;
  inline void set_lloginchannel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 13;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 13;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogPlayerLogin)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_lplayerfriendsnum();
  inline void clear_has_lplayerfriendsnum();
  inline void set_has_lclientversion();
  inline void clear_has_lclientversion();
  inline void set_has_lsystemhardware();
  inline void clear_has_lsystemhardware();
  inline void set_has_ltelecomoper();
  inline void clear_has_ltelecomoper();
  inline void set_has_lnetwork();
  inline void clear_has_lnetwork();
  inline void set_has_lloginchannel();
  inline void clear_has_lloginchannel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 llevel_;
  ::std::string* lclientversion_;
  ::std::string* lsystemhardware_;
  ::google::protobuf::int32 lplayerfriendsnum_;
  ::google::protobuf::int32 lloginchannel_;
  ::std::string* ltelecomoper_;
  ::std::string* lnetwork_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogPlayerLogin* default_instance_;
};
// -------------------------------------------------------------------

class LogPlayerLogout : public ::google::protobuf::Message {
 public:
  LogPlayerLogout();
  virtual ~LogPlayerLogout();
  
  LogPlayerLogout(const LogPlayerLogout& from);
  
  inline LogPlayerLogout& operator=(const LogPlayerLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlayerLogout& default_instance();
  
  void Swap(LogPlayerLogout* other);
  
  // implements Message ----------------------------------------------
  
  LogPlayerLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogPlayerLogout& from);
  void MergeFrom(const LogPlayerLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LOnlineTime = 6;
  inline bool has_lonlinetime() const;
  inline void clear_lonlinetime();
  static const int kLOnlineTimeFieldNumber = 6;
  inline ::google::protobuf::int32 lonlinetime() const;
  inline void set_lonlinetime(::google::protobuf::int32 value);
  
  // required int32 LLevel = 7;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 7;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LPlayerFriendsNum = 8;
  inline bool has_lplayerfriendsnum() const;
  inline void clear_lplayerfriendsnum();
  static const int kLPlayerFriendsNumFieldNumber = 8;
  inline ::google::protobuf::int32 lplayerfriendsnum() const;
  inline void set_lplayerfriendsnum(::google::protobuf::int32 value);
  
  // required string LClientVersion = 9;
  inline bool has_lclientversion() const;
  inline void clear_lclientversion();
  static const int kLClientVersionFieldNumber = 9;
  inline const ::std::string& lclientversion() const;
  inline void set_lclientversion(const ::std::string& value);
  inline void set_lclientversion(const char* value);
  inline void set_lclientversion(const char* value, size_t size);
  inline ::std::string* mutable_lclientversion();
  inline ::std::string* release_lclientversion();
  
  // required string LSystemHardware = 10;
  inline bool has_lsystemhardware() const;
  inline void clear_lsystemhardware();
  static const int kLSystemHardwareFieldNumber = 10;
  inline const ::std::string& lsystemhardware() const;
  inline void set_lsystemhardware(const ::std::string& value);
  inline void set_lsystemhardware(const char* value);
  inline void set_lsystemhardware(const char* value, size_t size);
  inline ::std::string* mutable_lsystemhardware();
  inline ::std::string* release_lsystemhardware();
  
  // required string LTelecomOper = 11;
  inline bool has_ltelecomoper() const;
  inline void clear_ltelecomoper();
  static const int kLTelecomOperFieldNumber = 11;
  inline const ::std::string& ltelecomoper() const;
  inline void set_ltelecomoper(const ::std::string& value);
  inline void set_ltelecomoper(const char* value);
  inline void set_ltelecomoper(const char* value, size_t size);
  inline ::std::string* mutable_ltelecomoper();
  inline ::std::string* release_ltelecomoper();
  
  // required string LNetwork = 12;
  inline bool has_lnetwork() const;
  inline void clear_lnetwork();
  static const int kLNetworkFieldNumber = 12;
  inline const ::std::string& lnetwork() const;
  inline void set_lnetwork(const ::std::string& value);
  inline void set_lnetwork(const char* value);
  inline void set_lnetwork(const char* value, size_t size);
  inline ::std::string* mutable_lnetwork();
  inline ::std::string* release_lnetwork();
  
  // optional string LZoneID = 13;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 13;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogPlayerLogout)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lonlinetime();
  inline void clear_has_lonlinetime();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_lplayerfriendsnum();
  inline void clear_has_lplayerfriendsnum();
  inline void set_has_lclientversion();
  inline void clear_has_lclientversion();
  inline void set_has_lsystemhardware();
  inline void clear_has_lsystemhardware();
  inline void set_has_ltelecomoper();
  inline void clear_has_ltelecomoper();
  inline void set_has_lnetwork();
  inline void clear_has_lnetwork();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lonlinetime_;
  ::google::protobuf::int32 llevel_;
  ::google::protobuf::int32 lplayerfriendsnum_;
  ::std::string* lclientversion_;
  ::std::string* lsystemhardware_;
  ::std::string* ltelecomoper_;
  ::std::string* lnetwork_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogPlayerLogout* default_instance_;
};
// -------------------------------------------------------------------

class LogMoneyFlow : public ::google::protobuf::Message {
 public:
  LogMoneyFlow();
  virtual ~LogMoneyFlow();
  
  LogMoneyFlow(const LogMoneyFlow& from);
  
  inline LogMoneyFlow& operator=(const LogMoneyFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMoneyFlow& default_instance();
  
  void Swap(LogMoneyFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogMoneyFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMoneyFlow& from);
  void MergeFrom(const LogMoneyFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogMoneyFlow_ADDORREDUCE ADDORREDUCE;
  static const ADDORREDUCE ADD = LogMoneyFlow_ADDORREDUCE_ADD;
  static const ADDORREDUCE REDUCE = LogMoneyFlow_ADDORREDUCE_REDUCE;
  static inline bool ADDORREDUCE_IsValid(int value) {
    return LogMoneyFlow_ADDORREDUCE_IsValid(value);
  }
  static const ADDORREDUCE ADDORREDUCE_MIN =
    LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_MIN;
  static const ADDORREDUCE ADDORREDUCE_MAX =
    LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_MAX;
  static const int ADDORREDUCE_ARRAYSIZE =
    LogMoneyFlow_ADDORREDUCE_ADDORREDUCE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ADDORREDUCE_descriptor() {
    return LogMoneyFlow_ADDORREDUCE_descriptor();
  }
  static inline const ::std::string& ADDORREDUCE_Name(ADDORREDUCE value) {
    return LogMoneyFlow_ADDORREDUCE_Name(value);
  }
  static inline bool ADDORREDUCE_Parse(const ::std::string& name,
      ADDORREDUCE* value) {
    return LogMoneyFlow_ADDORREDUCE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // optional int32 LSequence = 3;
  inline bool has_lsequence() const;
  inline void clear_lsequence();
  static const int kLSequenceFieldNumber = 3;
  inline ::google::protobuf::int32 lsequence() const;
  inline void set_lsequence(::google::protobuf::int32 value);
  
  // required string LvGameAppid = 4;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 4;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 5;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 5;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 6;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 6;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LLevel = 7;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 7;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LiMoney = 8;
  inline bool has_limoney() const;
  inline void clear_limoney();
  static const int kLiMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 limoney() const;
  inline void set_limoney(::google::protobuf::int32 value);
  
  // required int32 LReason = 9;
  inline bool has_lreason() const;
  inline void clear_lreason();
  static const int kLReasonFieldNumber = 9;
  inline ::google::protobuf::int32 lreason() const;
  inline void set_lreason(::google::protobuf::int32 value);
  
  // required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
  inline bool has_laddorreduce() const;
  inline void clear_laddorreduce();
  static const int kLAddOrReduceFieldNumber = 10;
  inline ::rpc::LogMoneyFlow_ADDORREDUCE laddorreduce() const;
  inline void set_laddorreduce(::rpc::LogMoneyFlow_ADDORREDUCE value);
  
  // required int32 LiMoneyType = 11;
  inline bool has_limoneytype() const;
  inline void clear_limoneytype();
  static const int kLiMoneyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 limoneytype() const;
  inline void set_limoneytype(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 12;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 12;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 13;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 13;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogMoneyFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lsequence();
  inline void clear_has_lsequence();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_limoney();
  inline void clear_has_limoney();
  inline void set_has_lreason();
  inline void clear_has_lreason();
  inline void set_has_laddorreduce();
  inline void clear_has_laddorreduce();
  inline void set_has_limoneytype();
  inline void clear_has_limoneytype();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::google::protobuf::int32 lsequence_;
  ::google::protobuf::int32 lplatid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 llevel_;
  ::google::protobuf::int32 limoney_;
  ::google::protobuf::int32 lreason_;
  int laddorreduce_;
  ::google::protobuf::int32 limoneytype_;
  ::google::protobuf::int32 licenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogMoneyFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSnsFlow : public ::google::protobuf::Message {
 public:
  LogSnsFlow();
  virtual ~LogSnsFlow();
  
  LogSnsFlow(const LogSnsFlow& from);
  
  inline LogSnsFlow& operator=(const LogSnsFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSnsFlow& default_instance();
  
  void Swap(LogSnsFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSnsFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSnsFlow& from);
  void MergeFrom(const LogSnsFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogSnsFlow_SNSTYPE SNSTYPE;
  static const SNSTYPE SHOWOFF = LogSnsFlow_SNSTYPE_SHOWOFF;
  static const SNSTYPE INVITE = LogSnsFlow_SNSTYPE_INVITE;
  static const SNSTYPE SENDHEART = LogSnsFlow_SNSTYPE_SENDHEART;
  static const SNSTYPE RECEIVEHEART = LogSnsFlow_SNSTYPE_RECEIVEHEART;
  static const SNSTYPE SENDEMAIL = LogSnsFlow_SNSTYPE_SENDEMAIL;
  static const SNSTYPE RECEIVEEMAIL = LogSnsFlow_SNSTYPE_RECEIVEEMAIL;
  static const SNSTYPE SHARE = LogSnsFlow_SNSTYPE_SHARE;
  static const SNSTYPE SpeedUp = LogSnsFlow_SNSTYPE_SpeedUp;
  static const SNSTYPE ReleaseTime = LogSnsFlow_SNSTYPE_ReleaseTime;
  static const SNSTYPE SpeedUp_Help = LogSnsFlow_SNSTYPE_SpeedUp_Help;
  static const SNSTYPE ReleaseTime_Help = LogSnsFlow_SNSTYPE_ReleaseTime_Help;
  static const SNSTYPE OTHER = LogSnsFlow_SNSTYPE_OTHER;
  static const SNSTYPE FriendDonate = LogSnsFlow_SNSTYPE_FriendDonate;
  static inline bool SNSTYPE_IsValid(int value) {
    return LogSnsFlow_SNSTYPE_IsValid(value);
  }
  static const SNSTYPE SNSTYPE_MIN =
    LogSnsFlow_SNSTYPE_SNSTYPE_MIN;
  static const SNSTYPE SNSTYPE_MAX =
    LogSnsFlow_SNSTYPE_SNSTYPE_MAX;
  static const int SNSTYPE_ARRAYSIZE =
    LogSnsFlow_SNSTYPE_SNSTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SNSTYPE_descriptor() {
    return LogSnsFlow_SNSTYPE_descriptor();
  }
  static inline const ::std::string& SNSTYPE_Name(SNSTYPE value) {
    return LogSnsFlow_SNSTYPE_Name(value);
  }
  static inline bool SNSTYPE_Parse(const ::std::string& name,
      SNSTYPE* value) {
    return LogSnsFlow_SNSTYPE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string LActorOpenID = 5;
  inline bool has_lactoropenid() const;
  inline void clear_lactoropenid();
  static const int kLActorOpenIDFieldNumber = 5;
  inline const ::std::string& lactoropenid() const;
  inline void set_lactoropenid(const ::std::string& value);
  inline void set_lactoropenid(const char* value);
  inline void set_lactoropenid(const char* value, size_t size);
  inline ::std::string* mutable_lactoropenid();
  inline ::std::string* release_lactoropenid();
  
  // optional int32 LRecNum = 6;
  inline bool has_lrecnum() const;
  inline void clear_lrecnum();
  static const int kLRecNumFieldNumber = 6;
  inline ::google::protobuf::int32 lrecnum() const;
  inline void set_lrecnum(::google::protobuf::int32 value);
  
  // required int32 LCount = 7;
  inline bool has_lcount() const;
  inline void clear_lcount();
  static const int kLCountFieldNumber = 7;
  inline ::google::protobuf::int32 lcount() const;
  inline void set_lcount(::google::protobuf::int32 value);
  
  // required int32 LSNSType = 8;
  inline bool has_lsnstype() const;
  inline void clear_lsnstype();
  static const int kLSNSTypeFieldNumber = 8;
  inline ::google::protobuf::int32 lsnstype() const;
  inline void set_lsnstype(::google::protobuf::int32 value);
  
  // optional int32 LSNSSubType = 9;
  inline bool has_lsnssubtype() const;
  inline void clear_lsnssubtype();
  static const int kLSNSSubTypeFieldNumber = 9;
  inline ::google::protobuf::int32 lsnssubtype() const;
  inline void set_lsnssubtype(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 10;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 10;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 11;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 11;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSnsFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lactoropenid();
  inline void clear_has_lactoropenid();
  inline void set_has_lrecnum();
  inline void clear_has_lrecnum();
  inline void set_has_lcount();
  inline void clear_has_lcount();
  inline void set_has_lsnstype();
  inline void clear_has_lsnstype();
  inline void set_has_lsnssubtype();
  inline void clear_has_lsnssubtype();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lactoropenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lrecnum_;
  ::google::protobuf::int32 lcount_;
  ::google::protobuf::int32 lsnstype_;
  ::google::protobuf::int32 lsnssubtype_;
  ::google::protobuf::int32 licenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSnsFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogRoundFlow : public ::google::protobuf::Message {
 public:
  LogRoundFlow();
  virtual ~LogRoundFlow();
  
  LogRoundFlow(const LogRoundFlow& from);
  
  inline LogRoundFlow& operator=(const LogRoundFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRoundFlow& default_instance();
  
  void Swap(LogRoundFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogRoundFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRoundFlow& from);
  void MergeFrom(const LogRoundFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogRoundFlow_BATTLETYPE BATTLETYPE;
  static const BATTLETYPE PVE = LogRoundFlow_BATTLETYPE_PVE;
  static const BATTLETYPE PVP = LogRoundFlow_BATTLETYPE_PVP;
  static const BATTLETYPE TTT = LogRoundFlow_BATTLETYPE_TTT;
  static const BATTLETYPE OTHER = LogRoundFlow_BATTLETYPE_OTHER;
  static const BATTLETYPE FRIENDATTACK = LogRoundFlow_BATTLETYPE_FRIENDATTACK;
  static inline bool BATTLETYPE_IsValid(int value) {
    return LogRoundFlow_BATTLETYPE_IsValid(value);
  }
  static const BATTLETYPE BATTLETYPE_MIN =
    LogRoundFlow_BATTLETYPE_BATTLETYPE_MIN;
  static const BATTLETYPE BATTLETYPE_MAX =
    LogRoundFlow_BATTLETYPE_BATTLETYPE_MAX;
  static const int BATTLETYPE_ARRAYSIZE =
    LogRoundFlow_BATTLETYPE_BATTLETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BATTLETYPE_descriptor() {
    return LogRoundFlow_BATTLETYPE_descriptor();
  }
  static inline const ::std::string& BATTLETYPE_Name(BATTLETYPE value) {
    return LogRoundFlow_BATTLETYPE_Name(value);
  }
  static inline bool BATTLETYPE_Parse(const ::std::string& name,
      BATTLETYPE* value) {
    return LogRoundFlow_BATTLETYPE_Parse(name, value);
  }
  
  typedef LogRoundFlow_PVEBATTLEMODE PVEBATTLEMODE;
  static const PVEBATTLEMODE NORMAL = LogRoundFlow_PVEBATTLEMODE_NORMAL;
  static const PVEBATTLEMODE HARD = LogRoundFlow_PVEBATTLEMODE_HARD;
  static const PVEBATTLEMODE NIGHTMARE = LogRoundFlow_PVEBATTLEMODE_NIGHTMARE;
  static const PVEBATTLEMODE BETRAY = LogRoundFlow_PVEBATTLEMODE_BETRAY;
  static inline bool PVEBATTLEMODE_IsValid(int value) {
    return LogRoundFlow_PVEBATTLEMODE_IsValid(value);
  }
  static const PVEBATTLEMODE PVEBATTLEMODE_MIN =
    LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_MIN;
  static const PVEBATTLEMODE PVEBATTLEMODE_MAX =
    LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_MAX;
  static const int PVEBATTLEMODE_ARRAYSIZE =
    LogRoundFlow_PVEBATTLEMODE_PVEBATTLEMODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PVEBATTLEMODE_descriptor() {
    return LogRoundFlow_PVEBATTLEMODE_descriptor();
  }
  static inline const ::std::string& PVEBATTLEMODE_Name(PVEBATTLEMODE value) {
    return LogRoundFlow_PVEBATTLEMODE_Name(value);
  }
  static inline bool PVEBATTLEMODE_Parse(const ::std::string& name,
      PVEBATTLEMODE* value) {
    return LogRoundFlow_PVEBATTLEMODE_Parse(name, value);
  }
  
  typedef LogRoundFlow_PVEAUTOMODE PVEAUTOMODE;
  static const PVEAUTOMODE PVEAMNORMAL = LogRoundFlow_PVEAUTOMODE_PVEAMNORMAL;
  static const PVEAUTOMODE PVEAMAUTO = LogRoundFlow_PVEAUTOMODE_PVEAMAUTO;
  static inline bool PVEAUTOMODE_IsValid(int value) {
    return LogRoundFlow_PVEAUTOMODE_IsValid(value);
  }
  static const PVEAUTOMODE PVEAUTOMODE_MIN =
    LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_MIN;
  static const PVEAUTOMODE PVEAUTOMODE_MAX =
    LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_MAX;
  static const int PVEAUTOMODE_ARRAYSIZE =
    LogRoundFlow_PVEAUTOMODE_PVEAUTOMODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PVEAUTOMODE_descriptor() {
    return LogRoundFlow_PVEAUTOMODE_descriptor();
  }
  static inline const ::std::string& PVEAUTOMODE_Name(PVEAUTOMODE value) {
    return LogRoundFlow_PVEAUTOMODE_Name(value);
  }
  static inline bool PVEAUTOMODE_Parse(const ::std::string& name,
      PVEAUTOMODE* value) {
    return LogRoundFlow_PVEAUTOMODE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LBattleID = 6;
  inline bool has_lbattleid() const;
  inline void clear_lbattleid();
  static const int kLBattleIDFieldNumber = 6;
  inline ::google::protobuf::int32 lbattleid() const;
  inline void set_lbattleid(::google::protobuf::int32 value);
  
  // required int32 LBattleType = 7;
  inline bool has_lbattletype() const;
  inline void clear_lbattletype();
  static const int kLBattleTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lbattletype() const;
  inline void set_lbattletype(::google::protobuf::int32 value);
  
  // required int32 LPVEBattleMode = 8;
  inline bool has_lpvebattlemode() const;
  inline void clear_lpvebattlemode();
  static const int kLPVEBattleModeFieldNumber = 8;
  inline ::google::protobuf::int32 lpvebattlemode() const;
  inline void set_lpvebattlemode(::google::protobuf::int32 value);
  
  // required int32 LRoundScore = 9;
  inline bool has_lroundscore() const;
  inline void clear_lroundscore();
  static const int kLRoundScoreFieldNumber = 9;
  inline ::google::protobuf::int32 lroundscore() const;
  inline void set_lroundscore(::google::protobuf::int32 value);
  
  // required int32 LRoundTime = 10;
  inline bool has_lroundtime() const;
  inline void clear_lroundtime();
  static const int kLRoundTimeFieldNumber = 10;
  inline ::google::protobuf::int32 lroundtime() const;
  inline void set_lroundtime(::google::protobuf::int32 value);
  
  // required int32 LResult = 11;
  inline bool has_lresult() const;
  inline void clear_lresult();
  static const int kLResultFieldNumber = 11;
  inline ::google::protobuf::int32 lresult() const;
  inline void set_lresult(::google::protobuf::int32 value);
  
  // required int32 LGold = 12;
  inline bool has_lgold() const;
  inline void clear_lgold();
  static const int kLGoldFieldNumber = 12;
  inline ::google::protobuf::int32 lgold() const;
  inline void set_lgold(::google::protobuf::int32 value);
  
  // required int32 LFood = 13;
  inline bool has_lfood() const;
  inline void clear_lfood();
  static const int kLFoodFieldNumber = 13;
  inline ::google::protobuf::int32 lfood() const;
  inline void set_lfood(::google::protobuf::int32 value);
  
  // required int32 LWuhun = 14;
  inline bool has_lwuhun() const;
  inline void clear_lwuhun();
  static const int kLWuhunFieldNumber = 14;
  inline ::google::protobuf::int32 lwuhun() const;
  inline void set_lwuhun(::google::protobuf::int32 value);
  
  // required int32 LPercent = 15;
  inline bool has_lpercent() const;
  inline void clear_lpercent();
  static const int kLPercentFieldNumber = 15;
  inline ::google::protobuf::int32 lpercent() const;
  inline void set_lpercent(::google::protobuf::int32 value);
  
  // required int32 LiPVEAUTOMODE = 16;
  inline bool has_lipveautomode() const;
  inline void clear_lipveautomode();
  static const int kLiPVEAUTOMODEFieldNumber = 16;
  inline ::google::protobuf::int32 lipveautomode() const;
  inline void set_lipveautomode(::google::protobuf::int32 value);
  
  // required int32 LiECHARTYPE = 17;
  inline bool has_liechartype() const;
  inline void clear_liechartype();
  static const int kLiECHARTYPEFieldNumber = 17;
  inline ::google::protobuf::int32 liechartype() const;
  inline void set_liechartype(::google::protobuf::int32 value);
  
  // required int32 LiECHARTYPEFrag = 18;
  inline bool has_liechartypefrag() const;
  inline void clear_liechartypefrag();
  static const int kLiECHARTYPEFragFieldNumber = 18;
  inline ::google::protobuf::int32 liechartypefrag() const;
  inline void set_liechartypefrag(::google::protobuf::int32 value);
  
  // required int32 LiECHARTYPEFragNum = 19;
  inline bool has_liechartypefragnum() const;
  inline void clear_liechartypefragnum();
  static const int kLiECHARTYPEFragNumFieldNumber = 19;
  inline ::google::protobuf::int32 liechartypefragnum() const;
  inline void set_liechartypefragnum(::google::protobuf::int32 value);
  
  // required string LvDstId = 20;
  inline bool has_lvdstid() const;
  inline void clear_lvdstid();
  static const int kLvDstIdFieldNumber = 20;
  inline const ::std::string& lvdstid() const;
  inline void set_lvdstid(const ::std::string& value);
  inline void set_lvdstid(const char* value);
  inline void set_lvdstid(const char* value, size_t size);
  inline ::std::string* mutable_lvdstid();
  inline ::std::string* release_lvdstid();
  
  // optional string LZoneID = 21;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 21;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogRoundFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lbattleid();
  inline void clear_has_lbattleid();
  inline void set_has_lbattletype();
  inline void clear_has_lbattletype();
  inline void set_has_lpvebattlemode();
  inline void clear_has_lpvebattlemode();
  inline void set_has_lroundscore();
  inline void clear_has_lroundscore();
  inline void set_has_lroundtime();
  inline void clear_has_lroundtime();
  inline void set_has_lresult();
  inline void clear_has_lresult();
  inline void set_has_lgold();
  inline void clear_has_lgold();
  inline void set_has_lfood();
  inline void clear_has_lfood();
  inline void set_has_lwuhun();
  inline void clear_has_lwuhun();
  inline void set_has_lpercent();
  inline void clear_has_lpercent();
  inline void set_has_lipveautomode();
  inline void clear_has_lipveautomode();
  inline void set_has_liechartype();
  inline void clear_has_liechartype();
  inline void set_has_liechartypefrag();
  inline void clear_has_liechartypefrag();
  inline void set_has_liechartypefragnum();
  inline void clear_has_liechartypefragnum();
  inline void set_has_lvdstid();
  inline void clear_has_lvdstid();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lbattleid_;
  ::google::protobuf::int32 lbattletype_;
  ::google::protobuf::int32 lpvebattlemode_;
  ::google::protobuf::int32 lroundscore_;
  ::google::protobuf::int32 lroundtime_;
  ::google::protobuf::int32 lresult_;
  ::google::protobuf::int32 lgold_;
  ::google::protobuf::int32 lfood_;
  ::google::protobuf::int32 lwuhun_;
  ::google::protobuf::int32 lpercent_;
  ::google::protobuf::int32 lipveautomode_;
  ::google::protobuf::int32 liechartype_;
  ::google::protobuf::int32 liechartypefrag_;
  ::std::string* lvdstid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 liechartypefragnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogRoundFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogBuildingUpgradeFlow : public ::google::protobuf::Message {
 public:
  LogBuildingUpgradeFlow();
  virtual ~LogBuildingUpgradeFlow();
  
  LogBuildingUpgradeFlow(const LogBuildingUpgradeFlow& from);
  
  inline LogBuildingUpgradeFlow& operator=(const LogBuildingUpgradeFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogBuildingUpgradeFlow& default_instance();
  
  void Swap(LogBuildingUpgradeFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogBuildingUpgradeFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogBuildingUpgradeFlow& from);
  void MergeFrom(const LogBuildingUpgradeFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LLevel = 6;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 6;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LBUILDINGTYPE = 7;
  inline bool has_lbuildingtype() const;
  inline void clear_lbuildingtype();
  static const int kLBUILDINGTYPEFieldNumber = 7;
  inline ::google::protobuf::int32 lbuildingtype() const;
  inline void set_lbuildingtype(::google::protobuf::int32 value);
  
  // required int32 LiId = 8;
  inline bool has_liid() const;
  inline void clear_liid();
  static const int kLiIdFieldNumber = 8;
  inline ::google::protobuf::int32 liid() const;
  inline void set_liid(::google::protobuf::int32 value);
  
  // required int32 LiLevel = 9;
  inline bool has_lilevel() const;
  inline void clear_lilevel();
  static const int kLiLevelFieldNumber = 9;
  inline ::google::protobuf::int32 lilevel() const;
  inline void set_lilevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogBuildingUpgradeFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_lbuildingtype();
  inline void clear_has_lbuildingtype();
  inline void set_has_liid();
  inline void clear_has_liid();
  inline void set_has_lilevel();
  inline void clear_has_lilevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 llevel_;
  ::google::protobuf::int32 lbuildingtype_;
  ::google::protobuf::int32 liid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 lilevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogBuildingUpgradeFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogTaskFlow : public ::google::protobuf::Message {
 public:
  LogTaskFlow();
  virtual ~LogTaskFlow();
  
  LogTaskFlow(const LogTaskFlow& from);
  
  inline LogTaskFlow& operator=(const LogTaskFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogTaskFlow& default_instance();
  
  void Swap(LogTaskFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogTaskFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogTaskFlow& from);
  void MergeFrom(const LogTaskFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LLevel = 6;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 6;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LiTaskType = 7;
  inline bool has_litasktype() const;
  inline void clear_litasktype();
  static const int kLiTaskTypeFieldNumber = 7;
  inline ::google::protobuf::int32 litasktype() const;
  inline void set_litasktype(::google::protobuf::int32 value);
  
  // required int32 LiId = 8;
  inline bool has_liid() const;
  inline void clear_liid();
  static const int kLiIdFieldNumber = 8;
  inline ::google::protobuf::int32 liid() const;
  inline void set_liid(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogTaskFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_litasktype();
  inline void clear_has_litasktype();
  inline void set_has_liid();
  inline void clear_has_liid();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 llevel_;
  ::google::protobuf::int32 litasktype_;
  ::google::protobuf::int32 liid_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogTaskFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogTrainingFlow : public ::google::protobuf::Message {
 public:
  LogTrainingFlow();
  virtual ~LogTrainingFlow();
  
  LogTrainingFlow(const LogTrainingFlow& from);
  
  inline LogTrainingFlow& operator=(const LogTrainingFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogTrainingFlow& default_instance();
  
  void Swap(LogTrainingFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogTrainingFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogTrainingFlow& from);
  void MergeFrom(const LogTrainingFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lchartype = 6;
  inline bool has_lchartype() const;
  inline void clear_lchartype();
  static const int kLchartypeFieldNumber = 6;
  inline ::google::protobuf::int32 lchartype() const;
  inline void set_lchartype(::google::protobuf::int32 value);
  
  // required int32 Lcharlevel = 7;
  inline bool has_lcharlevel() const;
  inline void clear_lcharlevel();
  static const int kLcharlevelFieldNumber = 7;
  inline ::google::protobuf::int32 lcharlevel() const;
  inline void set_lcharlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 8;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 8;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogTrainingFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lchartype();
  inline void clear_has_lchartype();
  inline void set_has_lcharlevel();
  inline void clear_has_lcharlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lchartype_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 lcharlevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogTrainingFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogUpdateCharFlow : public ::google::protobuf::Message {
 public:
  LogUpdateCharFlow();
  virtual ~LogUpdateCharFlow();
  
  LogUpdateCharFlow(const LogUpdateCharFlow& from);
  
  inline LogUpdateCharFlow& operator=(const LogUpdateCharFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogUpdateCharFlow& default_instance();
  
  void Swap(LogUpdateCharFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogUpdateCharFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogUpdateCharFlow& from);
  void MergeFrom(const LogUpdateCharFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lchartype = 6;
  inline bool has_lchartype() const;
  inline void clear_lchartype();
  static const int kLchartypeFieldNumber = 6;
  inline ::google::protobuf::int32 lchartype() const;
  inline void set_lchartype(::google::protobuf::int32 value);
  
  // required int32 Lcharlevel = 7;
  inline bool has_lcharlevel() const;
  inline void clear_lcharlevel();
  static const int kLcharlevelFieldNumber = 7;
  inline ::google::protobuf::int32 lcharlevel() const;
  inline void set_lcharlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 8;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 8;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogUpdateCharFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lchartype();
  inline void clear_has_lchartype();
  inline void set_has_lcharlevel();
  inline void clear_has_lcharlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lchartype_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 lcharlevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogUpdateCharFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSelfBattleFlow : public ::google::protobuf::Message {
 public:
  LogSelfBattleFlow();
  virtual ~LogSelfBattleFlow();
  
  LogSelfBattleFlow(const LogSelfBattleFlow& from);
  
  inline LogSelfBattleFlow& operator=(const LogSelfBattleFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSelfBattleFlow& default_instance();
  
  void Swap(LogSelfBattleFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSelfBattleFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSelfBattleFlow& from);
  void MergeFrom(const LogSelfBattleFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lcenterlevel = 6;
  inline bool has_lcenterlevel() const;
  inline void clear_lcenterlevel();
  static const int kLcenterlevelFieldNumber = 6;
  inline ::google::protobuf::int32 lcenterlevel() const;
  inline void set_lcenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 7;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 7;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSelfBattleFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lcenterlevel();
  inline void clear_has_lcenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lcenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSelfBattleFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogHeroFlow : public ::google::protobuf::Message {
 public:
  LogHeroFlow();
  virtual ~LogHeroFlow();
  
  LogHeroFlow(const LogHeroFlow& from);
  
  inline LogHeroFlow& operator=(const LogHeroFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogHeroFlow& default_instance();
  
  void Swap(LogHeroFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogHeroFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogHeroFlow& from);
  void MergeFrom(const LogHeroFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lchartype = 6;
  inline bool has_lchartype() const;
  inline void clear_lchartype();
  static const int kLchartypeFieldNumber = 6;
  inline ::google::protobuf::int32 lchartype() const;
  inline void set_lchartype(::google::protobuf::int32 value);
  
  // required int32 LAddOrReduce = 7;
  inline bool has_laddorreduce() const;
  inline void clear_laddorreduce();
  static const int kLAddOrReduceFieldNumber = 7;
  inline ::google::protobuf::int32 laddorreduce() const;
  inline void set_laddorreduce(::google::protobuf::int32 value);
  
  // required int32 LGainReason = 8;
  inline bool has_lgainreason() const;
  inline void clear_lgainreason();
  static const int kLGainReasonFieldNumber = 8;
  inline ::google::protobuf::int32 lgainreason() const;
  inline void set_lgainreason(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 9;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 9;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiLevel = 10;
  inline bool has_lilevel() const;
  inline void clear_lilevel();
  static const int kLiLevelFieldNumber = 10;
  inline ::google::protobuf::int32 lilevel() const;
  inline void set_lilevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 11;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 11;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogHeroFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lchartype();
  inline void clear_has_lchartype();
  inline void set_has_laddorreduce();
  inline void clear_has_laddorreduce();
  inline void set_has_lgainreason();
  inline void clear_has_lgainreason();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lilevel();
  inline void clear_has_lilevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lchartype_;
  ::google::protobuf::int32 laddorreduce_;
  ::google::protobuf::int32 lgainreason_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 lilevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogHeroFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogHeroUpdateFlow : public ::google::protobuf::Message {
 public:
  LogHeroUpdateFlow();
  virtual ~LogHeroUpdateFlow();
  
  LogHeroUpdateFlow(const LogHeroUpdateFlow& from);
  
  inline LogHeroUpdateFlow& operator=(const LogHeroUpdateFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogHeroUpdateFlow& default_instance();
  
  void Swap(LogHeroUpdateFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogHeroUpdateFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogHeroUpdateFlow& from);
  void MergeFrom(const LogHeroUpdateFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lchartype = 6;
  inline bool has_lchartype() const;
  inline void clear_lchartype();
  static const int kLchartypeFieldNumber = 6;
  inline ::google::protobuf::int32 lchartype() const;
  inline void set_lchartype(::google::protobuf::int32 value);
  
  // required int32 LLevel = 7;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 7;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 8;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 8;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogHeroUpdateFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lchartype();
  inline void clear_has_lchartype();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lchartype_;
  ::google::protobuf::int32 llevel_;
  ::google::protobuf::int32 licenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogHeroUpdateFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogClanFlow : public ::google::protobuf::Message {
 public:
  LogClanFlow();
  virtual ~LogClanFlow();
  
  LogClanFlow(const LogClanFlow& from);
  
  inline LogClanFlow& operator=(const LogClanFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogClanFlow& default_instance();
  
  void Swap(LogClanFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogClanFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogClanFlow& from);
  void MergeFrom(const LogClanFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LCreateOrDel = 6;
  inline bool has_lcreateordel() const;
  inline void clear_lcreateordel();
  static const int kLCreateOrDelFieldNumber = 6;
  inline ::google::protobuf::int32 lcreateordel() const;
  inline void set_lcreateordel(::google::protobuf::int32 value);
  
  // required string LClanName = 7;
  inline bool has_lclanname() const;
  inline void clear_lclanname();
  static const int kLClanNameFieldNumber = 7;
  inline const ::std::string& lclanname() const;
  inline void set_lclanname(const ::std::string& value);
  inline void set_lclanname(const char* value);
  inline void set_lclanname(const char* value, size_t size);
  inline ::std::string* mutable_lclanname();
  inline ::std::string* release_lclanname();
  
  // required string LTargetId = 8;
  inline bool has_ltargetid() const;
  inline void clear_ltargetid();
  static const int kLTargetIdFieldNumber = 8;
  inline const ::std::string& ltargetid() const;
  inline void set_ltargetid(const ::std::string& value);
  inline void set_ltargetid(const char* value);
  inline void set_ltargetid(const char* value, size_t size);
  inline ::std::string* mutable_ltargetid();
  inline ::std::string* release_ltargetid();
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogClanFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lcreateordel();
  inline void clear_has_lcreateordel();
  inline void set_has_lclanname();
  inline void clear_has_lclanname();
  inline void set_has_ltargetid();
  inline void clear_has_ltargetid();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lcreateordel_;
  ::std::string* lclanname_;
  ::std::string* ltargetid_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogClanFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogClanDonateFlow : public ::google::protobuf::Message {
 public:
  LogClanDonateFlow();
  virtual ~LogClanDonateFlow();
  
  LogClanDonateFlow(const LogClanDonateFlow& from);
  
  inline LogClanDonateFlow& operator=(const LogClanDonateFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogClanDonateFlow& default_instance();
  
  void Swap(LogClanDonateFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogClanDonateFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogClanDonateFlow& from);
  void MergeFrom(const LogClanDonateFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required string LClanName = 6;
  inline bool has_lclanname() const;
  inline void clear_lclanname();
  static const int kLClanNameFieldNumber = 6;
  inline const ::std::string& lclanname() const;
  inline void set_lclanname(const ::std::string& value);
  inline void set_lclanname(const char* value);
  inline void set_lclanname(const char* value, size_t size);
  inline ::std::string* mutable_lclanname();
  inline ::std::string* release_lclanname();
  
  // required int32 LCharType = 7;
  inline bool has_lchartype() const;
  inline void clear_lchartype();
  static const int kLCharTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lchartype() const;
  inline void set_lchartype(::google::protobuf::int32 value);
  
  // required int32 LCharLevel = 8;
  inline bool has_lcharlevel() const;
  inline void clear_lcharlevel();
  static const int kLCharLevelFieldNumber = 8;
  inline ::google::protobuf::int32 lcharlevel() const;
  inline void set_lcharlevel(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 9;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 9;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogClanDonateFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lclanname();
  inline void clear_has_lclanname();
  inline void set_has_lchartype();
  inline void clear_has_lchartype();
  inline void set_has_lcharlevel();
  inline void clear_has_lcharlevel();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lchartype_;
  ::std::string* lclanname_;
  ::google::protobuf::int32 lcharlevel_;
  ::google::protobuf::int32 licenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogClanDonateFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogPlayerLevelFlow : public ::google::protobuf::Message {
 public:
  LogPlayerLevelFlow();
  virtual ~LogPlayerLevelFlow();
  
  LogPlayerLevelFlow(const LogPlayerLevelFlow& from);
  
  inline LogPlayerLevelFlow& operator=(const LogPlayerLevelFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlayerLevelFlow& default_instance();
  
  void Swap(LogPlayerLevelFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogPlayerLevelFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogPlayerLevelFlow& from);
  void MergeFrom(const LogPlayerLevelFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LLevel = 6;
  inline bool has_llevel() const;
  inline void clear_llevel();
  static const int kLLevelFieldNumber = 6;
  inline ::google::protobuf::int32 llevel() const;
  inline void set_llevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 7;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 7;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogPlayerLevelFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_llevel();
  inline void clear_has_llevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 llevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogPlayerLevelFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSignInFlow : public ::google::protobuf::Message {
 public:
  LogSignInFlow();
  virtual ~LogSignInFlow();
  
  LogSignInFlow(const LogSignInFlow& from);
  
  inline LogSignInFlow& operator=(const LogSignInFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSignInFlow& default_instance();
  
  void Swap(LogSignInFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSignInFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSignInFlow& from);
  void MergeFrom(const LogSignInFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Ldays = 6;
  inline bool has_ldays() const;
  inline void clear_ldays();
  static const int kLdaysFieldNumber = 6;
  inline ::google::protobuf::int32 ldays() const;
  inline void set_ldays(::google::protobuf::int32 value);
  
  // optional string LZoneID = 7;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 7;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSignInFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_ldays();
  inline void clear_has_ldays();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 ldays_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSignInFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogOnlineNumbers : public ::google::protobuf::Message {
 public:
  LogOnlineNumbers();
  virtual ~LogOnlineNumbers();
  
  LogOnlineNumbers(const LogOnlineNumbers& from);
  
  inline LogOnlineNumbers& operator=(const LogOnlineNumbers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogOnlineNumbers& default_instance();
  
  void Swap(LogOnlineNumbers* other);
  
  // implements Message ----------------------------------------------
  
  LogOnlineNumbers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogOnlineNumbers& from);
  void MergeFrom(const LogOnlineNumbers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LiNumbers = 4;
  inline bool has_linumbers() const;
  inline void clear_linumbers();
  static const int kLiNumbersFieldNumber = 4;
  inline ::google::protobuf::int32 linumbers() const;
  inline void set_linumbers(::google::protobuf::int32 value);
  
  // optional string LZoneID = 5;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 5;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogOnlineNumbers)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_linumbers();
  inline void clear_has_linumbers();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 linumbers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogOnlineNumbers* default_instance_;
};
// -------------------------------------------------------------------

class LogShareBattle : public ::google::protobuf::Message {
 public:
  LogShareBattle();
  virtual ~LogShareBattle();
  
  LogShareBattle(const LogShareBattle& from);
  
  inline LogShareBattle& operator=(const LogShareBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogShareBattle& default_instance();
  
  void Swap(LogShareBattle* other);
  
  // implements Message ----------------------------------------------
  
  LogShareBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogShareBattle& from);
  void MergeFrom(const LogShareBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiEShareBattleType = 6;
  inline bool has_liesharebattletype() const;
  inline void clear_liesharebattletype();
  static const int kLiEShareBattleTypeFieldNumber = 6;
  inline ::google::protobuf::int32 liesharebattletype() const;
  inline void set_liesharebattletype(::google::protobuf::int32 value);
  
  // required string LvBattleId = 7;
  inline bool has_lvbattleid() const;
  inline void clear_lvbattleid();
  static const int kLvBattleIdFieldNumber = 7;
  inline const ::std::string& lvbattleid() const;
  inline void set_lvbattleid(const ::std::string& value);
  inline void set_lvbattleid(const char* value);
  inline void set_lvbattleid(const char* value, size_t size);
  inline ::std::string* mutable_lvbattleid();
  inline ::std::string* release_lvbattleid();
  
  // optional string LZoneID = 8;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 8;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogShareBattle)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_liesharebattletype();
  inline void clear_has_liesharebattletype();
  inline void set_has_lvbattleid();
  inline void clear_has_lvbattleid();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 liesharebattletype_;
  ::std::string* lvbattleid_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogShareBattle* default_instance_;
};
// -------------------------------------------------------------------

class LogViewShareBattle : public ::google::protobuf::Message {
 public:
  LogViewShareBattle();
  virtual ~LogViewShareBattle();
  
  LogViewShareBattle(const LogViewShareBattle& from);
  
  inline LogViewShareBattle& operator=(const LogViewShareBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogViewShareBattle& default_instance();
  
  void Swap(LogViewShareBattle* other);
  
  // implements Message ----------------------------------------------
  
  LogViewShareBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogViewShareBattle& from);
  void MergeFrom(const LogViewShareBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required string LvBattleId = 6;
  inline bool has_lvbattleid() const;
  inline void clear_lvbattleid();
  static const int kLvBattleIdFieldNumber = 6;
  inline const ::std::string& lvbattleid() const;
  inline void set_lvbattleid(const ::std::string& value);
  inline void set_lvbattleid(const char* value);
  inline void set_lvbattleid(const char* value, size_t size);
  inline ::std::string* mutable_lvbattleid();
  inline ::std::string* release_lvbattleid();
  
  // optional string LZoneID = 7;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 7;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogViewShareBattle)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lvbattleid();
  inline void clear_has_lvbattleid();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::std::string* lvbattleid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 lplatid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogViewShareBattle* default_instance_;
};
// -------------------------------------------------------------------

class LogActivityFlow : public ::google::protobuf::Message {
 public:
  LogActivityFlow();
  virtual ~LogActivityFlow();
  
  LogActivityFlow(const LogActivityFlow& from);
  
  inline LogActivityFlow& operator=(const LogActivityFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogActivityFlow& default_instance();
  
  void Swap(LogActivityFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogActivityFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogActivityFlow& from);
  void MergeFrom(const LogActivityFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiActivityId = 6;
  inline bool has_liactivityid() const;
  inline void clear_liactivityid();
  static const int kLiActivityIdFieldNumber = 6;
  inline ::google::protobuf::int32 liactivityid() const;
  inline void set_liactivityid(::google::protobuf::int32 value);
  
  // required int32 LiActivityLevel = 7;
  inline bool has_liactivitylevel() const;
  inline void clear_liactivitylevel();
  static const int kLiActivityLevelFieldNumber = 7;
  inline ::google::protobuf::int32 liactivitylevel() const;
  inline void set_liactivitylevel(::google::protobuf::int32 value);
  
  // required string LvAward = 8;
  inline bool has_lvaward() const;
  inline void clear_lvaward();
  static const int kLvAwardFieldNumber = 8;
  inline const ::std::string& lvaward() const;
  inline void set_lvaward(const ::std::string& value);
  inline void set_lvaward(const char* value);
  inline void set_lvaward(const char* value, size_t size);
  inline ::std::string* mutable_lvaward();
  inline ::std::string* release_lvaward();
  
  // required int32 LiCenterLevel = 9;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 9;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogActivityFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_liactivityid();
  inline void clear_has_liactivityid();
  inline void set_has_liactivitylevel();
  inline void clear_has_liactivitylevel();
  inline void set_has_lvaward();
  inline void clear_has_lvaward();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 liactivityid_;
  ::std::string* lvaward_;
  ::google::protobuf::int32 liactivitylevel_;
  ::google::protobuf::int32 licenterlevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogActivityFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogFriendDonateRequestFlow : public ::google::protobuf::Message {
 public:
  LogFriendDonateRequestFlow();
  virtual ~LogFriendDonateRequestFlow();
  
  LogFriendDonateRequestFlow(const LogFriendDonateRequestFlow& from);
  
  inline LogFriendDonateRequestFlow& operator=(const LogFriendDonateRequestFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogFriendDonateRequestFlow& default_instance();
  
  void Swap(LogFriendDonateRequestFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogFriendDonateRequestFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogFriendDonateRequestFlow& from);
  void MergeFrom(const LogFriendDonateRequestFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required string LvFriendUid = 6;
  inline bool has_lvfrienduid() const;
  inline void clear_lvfrienduid();
  static const int kLvFriendUidFieldNumber = 6;
  inline const ::std::string& lvfrienduid() const;
  inline void set_lvfrienduid(const ::std::string& value);
  inline void set_lvfrienduid(const char* value);
  inline void set_lvfrienduid(const char* value, size_t size);
  inline ::std::string* mutable_lvfrienduid();
  inline ::std::string* release_lvfrienduid();
  
  // required int32 LiCharType = 7;
  inline bool has_lichartype() const;
  inline void clear_lichartype();
  static const int kLiCharTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lichartype() const;
  inline void set_lichartype(::google::protobuf::int32 value);
  
  // required int32 LiCharLevel = 8;
  inline bool has_licharlevel() const;
  inline void clear_licharlevel();
  static const int kLiCharLevelFieldNumber = 8;
  inline ::google::protobuf::int32 licharlevel() const;
  inline void set_licharlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogFriendDonateRequestFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lvfrienduid();
  inline void clear_has_lvfrienduid();
  inline void set_has_lichartype();
  inline void clear_has_lichartype();
  inline void set_has_licharlevel();
  inline void clear_has_licharlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lichartype_;
  ::std::string* lvfrienduid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 licharlevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogFriendDonateRequestFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogGameSvrState : public ::google::protobuf::Message {
 public:
  LogGameSvrState();
  virtual ~LogGameSvrState();
  
  LogGameSvrState(const LogGameSvrState& from);
  
  inline LogGameSvrState& operator=(const LogGameSvrState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGameSvrState& default_instance();
  
  void Swap(LogGameSvrState* other);
  
  // implements Message ----------------------------------------------
  
  LogGameSvrState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGameSvrState& from);
  void MergeFrom(const LogGameSvrState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LdtEventTime = 1;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 1;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameIP = 2;
  inline bool has_lvgameip() const;
  inline void clear_lvgameip();
  static const int kLvGameIPFieldNumber = 2;
  inline const ::std::string& lvgameip() const;
  inline void set_lvgameip(const ::std::string& value);
  inline void set_lvgameip(const char* value);
  inline void set_lvgameip(const char* value, size_t size);
  inline ::std::string* mutable_lvgameip();
  inline ::std::string* release_lvgameip();
  
  // optional string LZoneID = 3;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 3;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogGameSvrState)
 private:
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameip();
  inline void clear_has_lvgameip();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ldteventtime_;
  ::std::string* lvgameip_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogGameSvrState* default_instance_;
};
// -------------------------------------------------------------------

class LogBuildingSpeedUpFlow : public ::google::protobuf::Message {
 public:
  LogBuildingSpeedUpFlow();
  virtual ~LogBuildingSpeedUpFlow();
  
  LogBuildingSpeedUpFlow(const LogBuildingSpeedUpFlow& from);
  
  inline LogBuildingSpeedUpFlow& operator=(const LogBuildingSpeedUpFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogBuildingSpeedUpFlow& default_instance();
  
  void Swap(LogBuildingSpeedUpFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogBuildingSpeedUpFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogBuildingSpeedUpFlow& from);
  void MergeFrom(const LogBuildingSpeedUpFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogBuildingSpeedUpFlow_SpeedUpSource SpeedUpSource;
  static const SpeedUpSource Task = LogBuildingSpeedUpFlow_SpeedUpSource_Task;
  static const SpeedUpSource Friend = LogBuildingSpeedUpFlow_SpeedUpSource_Friend;
  static const SpeedUpSource SystemFriend = LogBuildingSpeedUpFlow_SpeedUpSource_SystemFriend;
  static const SpeedUpSource Gem = LogBuildingSpeedUpFlow_SpeedUpSource_Gem;
  static inline bool SpeedUpSource_IsValid(int value) {
    return LogBuildingSpeedUpFlow_SpeedUpSource_IsValid(value);
  }
  static const SpeedUpSource SpeedUpSource_MIN =
    LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_MIN;
  static const SpeedUpSource SpeedUpSource_MAX =
    LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_MAX;
  static const int SpeedUpSource_ARRAYSIZE =
    LogBuildingSpeedUpFlow_SpeedUpSource_SpeedUpSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpeedUpSource_descriptor() {
    return LogBuildingSpeedUpFlow_SpeedUpSource_descriptor();
  }
  static inline const ::std::string& SpeedUpSource_Name(SpeedUpSource value) {
    return LogBuildingSpeedUpFlow_SpeedUpSource_Name(value);
  }
  static inline bool SpeedUpSource_Parse(const ::std::string& name,
      SpeedUpSource* value) {
    return LogBuildingSpeedUpFlow_SpeedUpSource_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiBuildingType = 6;
  inline bool has_libuildingtype() const;
  inline void clear_libuildingtype();
  static const int kLiBuildingTypeFieldNumber = 6;
  inline ::google::protobuf::int32 libuildingtype() const;
  inline void set_libuildingtype(::google::protobuf::int32 value);
  
  // required int32 LiSpeedUpSource = 7;
  inline bool has_lispeedupsource() const;
  inline void clear_lispeedupsource();
  static const int kLiSpeedUpSourceFieldNumber = 7;
  inline ::google::protobuf::int32 lispeedupsource() const;
  inline void set_lispeedupsource(::google::protobuf::int32 value);
  
  // optional string LZoneID = 8;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 8;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogBuildingSpeedUpFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_libuildingtype();
  inline void clear_has_libuildingtype();
  inline void set_has_lispeedupsource();
  inline void clear_has_lispeedupsource();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 libuildingtype_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 lispeedupsource_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogBuildingSpeedUpFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSpellCreateFlow : public ::google::protobuf::Message {
 public:
  LogSpellCreateFlow();
  virtual ~LogSpellCreateFlow();
  
  LogSpellCreateFlow(const LogSpellCreateFlow& from);
  
  inline LogSpellCreateFlow& operator=(const LogSpellCreateFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSpellCreateFlow& default_instance();
  
  void Swap(LogSpellCreateFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSpellCreateFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSpellCreateFlow& from);
  void MergeFrom(const LogSpellCreateFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiSpellType = 7;
  inline bool has_lispelltype() const;
  inline void clear_lispelltype();
  static const int kLiSpellTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lispelltype() const;
  inline void set_lispelltype(::google::protobuf::int32 value);
  
  // required int32 LiSpellLevel = 8;
  inline bool has_lispelllevel() const;
  inline void clear_lispelllevel();
  static const int kLiSpellLevelFieldNumber = 8;
  inline ::google::protobuf::int32 lispelllevel() const;
  inline void set_lispelllevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSpellCreateFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lispelltype();
  inline void clear_has_lispelltype();
  inline void set_has_lispelllevel();
  inline void clear_has_lispelllevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 lispelltype_;
  ::google::protobuf::int32 lispelllevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSpellCreateFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogStrategyCreateFlow : public ::google::protobuf::Message {
 public:
  LogStrategyCreateFlow();
  virtual ~LogStrategyCreateFlow();
  
  LogStrategyCreateFlow(const LogStrategyCreateFlow& from);
  
  inline LogStrategyCreateFlow& operator=(const LogStrategyCreateFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStrategyCreateFlow& default_instance();
  
  void Swap(LogStrategyCreateFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogStrategyCreateFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogStrategyCreateFlow& from);
  void MergeFrom(const LogStrategyCreateFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiStrategyType = 7;
  inline bool has_listrategytype() const;
  inline void clear_listrategytype();
  static const int kLiStrategyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 listrategytype() const;
  inline void set_listrategytype(::google::protobuf::int32 value);
  
  // required int32 LiStrategyLevel = 8;
  inline bool has_listrategylevel() const;
  inline void clear_listrategylevel();
  static const int kLiStrategyLevelFieldNumber = 8;
  inline ::google::protobuf::int32 listrategylevel() const;
  inline void set_listrategylevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogStrategyCreateFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_listrategytype();
  inline void clear_has_listrategytype();
  inline void set_has_listrategylevel();
  inline void clear_has_listrategylevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 listrategytype_;
  ::google::protobuf::int32 listrategylevel_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogStrategyCreateFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSuperLeagueFlow : public ::google::protobuf::Message {
 public:
  LogSuperLeagueFlow();
  virtual ~LogSuperLeagueFlow();
  
  LogSuperLeagueFlow(const LogSuperLeagueFlow& from);
  
  inline LogSuperLeagueFlow& operator=(const LogSuperLeagueFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSuperLeagueFlow& default_instance();
  
  void Swap(LogSuperLeagueFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSuperLeagueFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSuperLeagueFlow& from);
  void MergeFrom(const LogSuperLeagueFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiOldSeg = 7;
  inline bool has_lioldseg() const;
  inline void clear_lioldseg();
  static const int kLiOldSegFieldNumber = 7;
  inline ::google::protobuf::int32 lioldseg() const;
  inline void set_lioldseg(::google::protobuf::int32 value);
  
  // required int32 LiNewSeg = 8;
  inline bool has_linewseg() const;
  inline void clear_linewseg();
  static const int kLiNewSegFieldNumber = 8;
  inline ::google::protobuf::int32 linewseg() const;
  inline void set_linewseg(::google::protobuf::int32 value);
  
  // optional string LZoneID = 9;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 9;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSuperLeagueFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lioldseg();
  inline void clear_has_lioldseg();
  inline void set_has_linewseg();
  inline void clear_has_linewseg();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 lioldseg_;
  ::google::protobuf::int32 linewseg_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSuperLeagueFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogSpellUseFlow : public ::google::protobuf::Message {
 public:
  LogSpellUseFlow();
  virtual ~LogSpellUseFlow();
  
  LogSpellUseFlow(const LogSpellUseFlow& from);
  
  inline LogSpellUseFlow& operator=(const LogSpellUseFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSpellUseFlow& default_instance();
  
  void Swap(LogSpellUseFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogSpellUseFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSpellUseFlow& from);
  void MergeFrom(const LogSpellUseFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiSpellType = 7;
  inline bool has_lispelltype() const;
  inline void clear_lispelltype();
  static const int kLiSpellTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lispelltype() const;
  inline void set_lispelltype(::google::protobuf::int32 value);
  
  // required int32 LiSpellLevel = 8;
  inline bool has_lispelllevel() const;
  inline void clear_lispelllevel();
  static const int kLiSpellLevelFieldNumber = 8;
  inline ::google::protobuf::int32 lispelllevel() const;
  inline void set_lispelllevel(::google::protobuf::int32 value);
  
  // required int32 LiBattleType = 9;
  inline bool has_libattletype() const;
  inline void clear_libattletype();
  static const int kLiBattleTypeFieldNumber = 9;
  inline ::google::protobuf::int32 libattletype() const;
  inline void set_libattletype(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogSpellUseFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lispelltype();
  inline void clear_has_lispelltype();
  inline void set_has_lispelllevel();
  inline void clear_has_lispelllevel();
  inline void set_has_libattletype();
  inline void clear_has_libattletype();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 lispelltype_;
  ::google::protobuf::int32 lispelllevel_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 libattletype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogSpellUseFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogStrategyUseFlow : public ::google::protobuf::Message {
 public:
  LogStrategyUseFlow();
  virtual ~LogStrategyUseFlow();
  
  LogStrategyUseFlow(const LogStrategyUseFlow& from);
  
  inline LogStrategyUseFlow& operator=(const LogStrategyUseFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStrategyUseFlow& default_instance();
  
  void Swap(LogStrategyUseFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogStrategyUseFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogStrategyUseFlow& from);
  void MergeFrom(const LogStrategyUseFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // required int32 LiStrategyType = 7;
  inline bool has_listrategytype() const;
  inline void clear_listrategytype();
  static const int kLiStrategyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 listrategytype() const;
  inline void set_listrategytype(::google::protobuf::int32 value);
  
  // required int32 LiStrategyLevel = 8;
  inline bool has_listrategylevel() const;
  inline void clear_listrategylevel();
  static const int kLiStrategyLevelFieldNumber = 8;
  inline ::google::protobuf::int32 listrategylevel() const;
  inline void set_listrategylevel(::google::protobuf::int32 value);
  
  // required int32 LiBattleType = 9;
  inline bool has_libattletype() const;
  inline void clear_libattletype();
  static const int kLiBattleTypeFieldNumber = 9;
  inline ::google::protobuf::int32 libattletype() const;
  inline void set_libattletype(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogStrategyUseFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_listrategytype();
  inline void clear_has_listrategytype();
  inline void set_has_listrategylevel();
  inline void clear_has_listrategylevel();
  inline void set_has_libattletype();
  inline void clear_has_libattletype();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 listrategytype_;
  ::google::protobuf::int32 listrategylevel_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 libattletype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogStrategyUseFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogReceiveCharFlow : public ::google::protobuf::Message {
 public:
  LogReceiveCharFlow();
  virtual ~LogReceiveCharFlow();
  
  LogReceiveCharFlow(const LogReceiveCharFlow& from);
  
  inline LogReceiveCharFlow& operator=(const LogReceiveCharFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogReceiveCharFlow& default_instance();
  
  void Swap(LogReceiveCharFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogReceiveCharFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogReceiveCharFlow& from);
  void MergeFrom(const LogReceiveCharFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogReceiveCharFlow_ReceiveSource ReceiveSource;
  static const ReceiveSource Friend = LogReceiveCharFlow_ReceiveSource_Friend;
  static const ReceiveSource Clan = LogReceiveCharFlow_ReceiveSource_Clan;
  static inline bool ReceiveSource_IsValid(int value) {
    return LogReceiveCharFlow_ReceiveSource_IsValid(value);
  }
  static const ReceiveSource ReceiveSource_MIN =
    LogReceiveCharFlow_ReceiveSource_ReceiveSource_MIN;
  static const ReceiveSource ReceiveSource_MAX =
    LogReceiveCharFlow_ReceiveSource_ReceiveSource_MAX;
  static const int ReceiveSource_ARRAYSIZE =
    LogReceiveCharFlow_ReceiveSource_ReceiveSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReceiveSource_descriptor() {
    return LogReceiveCharFlow_ReceiveSource_descriptor();
  }
  static inline const ::std::string& ReceiveSource_Name(ReceiveSource value) {
    return LogReceiveCharFlow_ReceiveSource_Name(value);
  }
  static inline bool ReceiveSource_Parse(const ::std::string& name,
      ReceiveSource* value) {
    return LogReceiveCharFlow_ReceiveSource_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 Lichartype = 6;
  inline bool has_lichartype() const;
  inline void clear_lichartype();
  static const int kLichartypeFieldNumber = 6;
  inline ::google::protobuf::int32 lichartype() const;
  inline void set_lichartype(::google::protobuf::int32 value);
  
  // required int32 Licharlevel = 7;
  inline bool has_licharlevel() const;
  inline void clear_licharlevel();
  static const int kLicharlevelFieldNumber = 7;
  inline ::google::protobuf::int32 licharlevel() const;
  inline void set_licharlevel(::google::protobuf::int32 value);
  
  // required int32 Lisource = 8;
  inline bool has_lisource() const;
  inline void clear_lisource();
  static const int kLisourceFieldNumber = 8;
  inline ::google::protobuf::int32 lisource() const;
  inline void set_lisource(::google::protobuf::int32 value);
  
  // required int32 LiCenterLevel = 9;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 9;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 10;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 10;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogReceiveCharFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_lichartype();
  inline void clear_has_lichartype();
  inline void set_has_licharlevel();
  inline void clear_has_licharlevel();
  inline void set_has_lisource();
  inline void clear_has_lisource();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 lichartype_;
  ::google::protobuf::int32 licharlevel_;
  ::google::protobuf::int32 lisource_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 licenterlevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogReceiveCharFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogFriendHouseFlow : public ::google::protobuf::Message {
 public:
  LogFriendHouseFlow();
  virtual ~LogFriendHouseFlow();
  
  LogFriendHouseFlow(const LogFriendHouseFlow& from);
  
  inline LogFriendHouseFlow& operator=(const LogFriendHouseFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogFriendHouseFlow& default_instance();
  
  void Swap(LogFriendHouseFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogFriendHouseFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogFriendHouseFlow& from);
  void MergeFrom(const LogFriendHouseFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogFriendHouseFlow_ResType ResType;
  static const ResType Gold = LogFriendHouseFlow_ResType_Gold;
  static const ResType Food = LogFriendHouseFlow_ResType_Food;
  static const ResType Gem = LogFriendHouseFlow_ResType_Gem;
  static const ResType Wuhun = LogFriendHouseFlow_ResType_Wuhun;
  static const ResType Tili = LogFriendHouseFlow_ResType_Tili;
  static const ResType Dragon = LogFriendHouseFlow_ResType_Dragon;
  static const ResType Pekka = LogFriendHouseFlow_ResType_Pekka;
  static inline bool ResType_IsValid(int value) {
    return LogFriendHouseFlow_ResType_IsValid(value);
  }
  static const ResType ResType_MIN =
    LogFriendHouseFlow_ResType_ResType_MIN;
  static const ResType ResType_MAX =
    LogFriendHouseFlow_ResType_ResType_MAX;
  static const int ResType_ARRAYSIZE =
    LogFriendHouseFlow_ResType_ResType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResType_descriptor() {
    return LogFriendHouseFlow_ResType_descriptor();
  }
  static inline const ::std::string& ResType_Name(ResType value) {
    return LogFriendHouseFlow_ResType_Name(value);
  }
  static inline bool ResType_Parse(const ::std::string& name,
      ResType* value) {
    return LogFriendHouseFlow_ResType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string LGameSvrId = 1;
  inline bool has_lgamesvrid() const;
  inline void clear_lgamesvrid();
  static const int kLGameSvrIdFieldNumber = 1;
  inline const ::std::string& lgamesvrid() const;
  inline void set_lgamesvrid(const ::std::string& value);
  inline void set_lgamesvrid(const char* value);
  inline void set_lgamesvrid(const char* value, size_t size);
  inline ::std::string* mutable_lgamesvrid();
  inline ::std::string* release_lgamesvrid();
  
  // required string LdtEventTime = 2;
  inline bool has_ldteventtime() const;
  inline void clear_ldteventtime();
  static const int kLdtEventTimeFieldNumber = 2;
  inline const ::std::string& ldteventtime() const;
  inline void set_ldteventtime(const ::std::string& value);
  inline void set_ldteventtime(const char* value);
  inline void set_ldteventtime(const char* value, size_t size);
  inline ::std::string* mutable_ldteventtime();
  inline ::std::string* release_ldteventtime();
  
  // required string LvGameAppid = 3;
  inline bool has_lvgameappid() const;
  inline void clear_lvgameappid();
  static const int kLvGameAppidFieldNumber = 3;
  inline const ::std::string& lvgameappid() const;
  inline void set_lvgameappid(const ::std::string& value);
  inline void set_lvgameappid(const char* value);
  inline void set_lvgameappid(const char* value, size_t size);
  inline ::std::string* mutable_lvgameappid();
  inline ::std::string* release_lvgameappid();
  
  // required int32 LPlatID = 4;
  inline bool has_lplatid() const;
  inline void clear_lplatid();
  static const int kLPlatIDFieldNumber = 4;
  inline ::google::protobuf::int32 lplatid() const;
  inline void set_lplatid(::google::protobuf::int32 value);
  
  // required string Lvopenid = 5;
  inline bool has_lvopenid() const;
  inline void clear_lvopenid();
  static const int kLvopenidFieldNumber = 5;
  inline const ::std::string& lvopenid() const;
  inline void set_lvopenid(const ::std::string& value);
  inline void set_lvopenid(const char* value);
  inline void set_lvopenid(const char* value, size_t size);
  inline ::std::string* mutable_lvopenid();
  inline ::std::string* release_lvopenid();
  
  // required int32 LiCenterLevel = 6;
  inline bool has_licenterlevel() const;
  inline void clear_licenterlevel();
  static const int kLiCenterLevelFieldNumber = 6;
  inline ::google::protobuf::int32 licenterlevel() const;
  inline void set_licenterlevel(::google::protobuf::int32 value);
  
  // optional int32 LiResType1 = 7 [default = 0];
  inline bool has_lirestype1() const;
  inline void clear_lirestype1();
  static const int kLiResType1FieldNumber = 7;
  inline ::google::protobuf::int32 lirestype1() const;
  inline void set_lirestype1(::google::protobuf::int32 value);
  
  // optional int32 LiResNum1 = 8 [default = 0];
  inline bool has_liresnum1() const;
  inline void clear_liresnum1();
  static const int kLiResNum1FieldNumber = 8;
  inline ::google::protobuf::int32 liresnum1() const;
  inline void set_liresnum1(::google::protobuf::int32 value);
  
  // optional int32 LiResType2 = 9 [default = 0];
  inline bool has_lirestype2() const;
  inline void clear_lirestype2();
  static const int kLiResType2FieldNumber = 9;
  inline ::google::protobuf::int32 lirestype2() const;
  inline void set_lirestype2(::google::protobuf::int32 value);
  
  // optional int32 LiResNum2 = 10 [default = 0];
  inline bool has_liresnum2() const;
  inline void clear_liresnum2();
  static const int kLiResNum2FieldNumber = 10;
  inline ::google::protobuf::int32 liresnum2() const;
  inline void set_liresnum2(::google::protobuf::int32 value);
  
  // optional int32 LiResType3 = 11 [default = 0];
  inline bool has_lirestype3() const;
  inline void clear_lirestype3();
  static const int kLiResType3FieldNumber = 11;
  inline ::google::protobuf::int32 lirestype3() const;
  inline void set_lirestype3(::google::protobuf::int32 value);
  
  // optional int32 LiResNum3 = 12 [default = 0];
  inline bool has_liresnum3() const;
  inline void clear_liresnum3();
  static const int kLiResNum3FieldNumber = 12;
  inline ::google::protobuf::int32 liresnum3() const;
  inline void set_liresnum3(::google::protobuf::int32 value);
  
  // optional int32 LiResType4 = 13 [default = 0];
  inline bool has_lirestype4() const;
  inline void clear_lirestype4();
  static const int kLiResType4FieldNumber = 13;
  inline ::google::protobuf::int32 lirestype4() const;
  inline void set_lirestype4(::google::protobuf::int32 value);
  
  // optional int32 LiResNum4 = 14 [default = 0];
  inline bool has_liresnum4() const;
  inline void clear_liresnum4();
  static const int kLiResNum4FieldNumber = 14;
  inline ::google::protobuf::int32 liresnum4() const;
  inline void set_liresnum4(::google::protobuf::int32 value);
  
  // optional string LZoneID = 15;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 15;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogFriendHouseFlow)
 private:
  inline void set_has_lgamesvrid();
  inline void clear_has_lgamesvrid();
  inline void set_has_ldteventtime();
  inline void clear_has_ldteventtime();
  inline void set_has_lvgameappid();
  inline void clear_has_lvgameappid();
  inline void set_has_lplatid();
  inline void clear_has_lplatid();
  inline void set_has_lvopenid();
  inline void clear_has_lvopenid();
  inline void set_has_licenterlevel();
  inline void clear_has_licenterlevel();
  inline void set_has_lirestype1();
  inline void clear_has_lirestype1();
  inline void set_has_liresnum1();
  inline void clear_has_liresnum1();
  inline void set_has_lirestype2();
  inline void clear_has_lirestype2();
  inline void set_has_liresnum2();
  inline void clear_has_liresnum2();
  inline void set_has_lirestype3();
  inline void clear_has_lirestype3();
  inline void set_has_liresnum3();
  inline void clear_has_liresnum3();
  inline void set_has_lirestype4();
  inline void clear_has_lirestype4();
  inline void set_has_liresnum4();
  inline void clear_has_liresnum4();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lgamesvrid_;
  ::std::string* ldteventtime_;
  ::std::string* lvgameappid_;
  ::std::string* lvopenid_;
  ::google::protobuf::int32 lplatid_;
  ::google::protobuf::int32 licenterlevel_;
  ::google::protobuf::int32 lirestype1_;
  ::google::protobuf::int32 liresnum1_;
  ::google::protobuf::int32 lirestype2_;
  ::google::protobuf::int32 liresnum2_;
  ::google::protobuf::int32 lirestype3_;
  ::google::protobuf::int32 liresnum3_;
  ::google::protobuf::int32 lirestype4_;
  ::google::protobuf::int32 liresnum4_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogFriendHouseFlow* default_instance_;
};
// -------------------------------------------------------------------

class LogCommonFlow : public ::google::protobuf::Message {
 public:
  LogCommonFlow();
  virtual ~LogCommonFlow();
  
  LogCommonFlow(const LogCommonFlow& from);
  
  inline LogCommonFlow& operator=(const LogCommonFlow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogCommonFlow& default_instance();
  
  void Swap(LogCommonFlow* other);
  
  // implements Message ----------------------------------------------
  
  LogCommonFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogCommonFlow& from);
  void MergeFrom(const LogCommonFlow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string LDetail = 1;
  inline bool has_ldetail() const;
  inline void clear_ldetail();
  static const int kLDetailFieldNumber = 1;
  inline const ::std::string& ldetail() const;
  inline void set_ldetail(const ::std::string& value);
  inline void set_ldetail(const char* value);
  inline void set_ldetail(const char* value, size_t size);
  inline ::std::string* mutable_ldetail();
  inline ::std::string* release_ldetail();
  
  // optional string LZoneID = 2;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 2;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.LogCommonFlow)
 private:
  inline void set_has_ldetail();
  inline void clear_has_ldetail();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ldetail_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static LogCommonFlow* default_instance_;
};
// -------------------------------------------------------------------

class TpLogin : public ::google::protobuf::Message {
 public:
  TpLogin();
  virtual ~TpLogin();
  
  TpLogin(const TpLogin& from);
  
  inline TpLogin& operator=(const TpLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpLogin& default_instance();
  
  void Swap(TpLogin* other);
  
  // implements Message ----------------------------------------------
  
  TpLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TpLogin& from);
  void MergeFrom(const TpLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string TvOpenid = 1;
  inline bool has_tvopenid() const;
  inline void clear_tvopenid();
  static const int kTvOpenidFieldNumber = 1;
  inline const ::std::string& tvopenid() const;
  inline void set_tvopenid(const ::std::string& value);
  inline void set_tvopenid(const char* value);
  inline void set_tvopenid(const char* value, size_t size);
  inline ::std::string* mutable_tvopenid();
  inline ::std::string* release_tvopenid();
  
  // required int32 nChannel = 2;
  inline bool has_nchannel() const;
  inline void clear_nchannel();
  static const int kNChannelFieldNumber = 2;
  inline ::google::protobuf::int32 nchannel() const;
  inline void set_nchannel(::google::protobuf::int32 value);
  
  // required uint64 nConnId = 3;
  inline bool has_nconnid() const;
  inline void clear_nconnid();
  static const int kNConnIdFieldNumber = 3;
  inline ::google::protobuf::uint64 nconnid() const;
  inline void set_nconnid(::google::protobuf::uint64 value);
  
  // required int32 TClientVer = 4;
  inline bool has_tclientver() const;
  inline void clear_tclientver();
  static const int kTClientVerFieldNumber = 4;
  inline ::google::protobuf::int32 tclientver() const;
  inline void set_tclientver(::google::protobuf::int32 value);
  
  // required uint32 TClientIp = 5;
  inline bool has_tclientip() const;
  inline void clear_tclientip();
  static const int kTClientIpFieldNumber = 5;
  inline ::google::protobuf::uint32 tclientip() const;
  inline void set_tclientip(::google::protobuf::uint32 value);
  
  // optional string LZoneID = 6;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 6;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.TpLogin)
 private:
  inline void set_has_tvopenid();
  inline void clear_has_tvopenid();
  inline void set_has_nchannel();
  inline void clear_has_nchannel();
  inline void set_has_nconnid();
  inline void clear_has_nconnid();
  inline void set_has_tclientver();
  inline void clear_has_tclientver();
  inline void set_has_tclientip();
  inline void clear_has_tclientip();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tvopenid_;
  ::google::protobuf::uint64 nconnid_;
  ::google::protobuf::int32 nchannel_;
  ::google::protobuf::int32 tclientver_;
  ::std::string* lzoneid_;
  ::google::protobuf::uint32 tclientip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static TpLogin* default_instance_;
};
// -------------------------------------------------------------------

class TpLogout : public ::google::protobuf::Message {
 public:
  TpLogout();
  virtual ~TpLogout();
  
  TpLogout(const TpLogout& from);
  
  inline TpLogout& operator=(const TpLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpLogout& default_instance();
  
  void Swap(TpLogout* other);
  
  // implements Message ----------------------------------------------
  
  TpLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TpLogout& from);
  void MergeFrom(const TpLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string TvOpenid = 1;
  inline bool has_tvopenid() const;
  inline void clear_tvopenid();
  static const int kTvOpenidFieldNumber = 1;
  inline const ::std::string& tvopenid() const;
  inline void set_tvopenid(const ::std::string& value);
  inline void set_tvopenid(const char* value);
  inline void set_tvopenid(const char* value, size_t size);
  inline ::std::string* mutable_tvopenid();
  inline ::std::string* release_tvopenid();
  
  // required int32 nChannel = 2;
  inline bool has_nchannel() const;
  inline void clear_nchannel();
  static const int kNChannelFieldNumber = 2;
  inline ::google::protobuf::int32 nchannel() const;
  inline void set_nchannel(::google::protobuf::int32 value);
  
  // optional string LZoneID = 3;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 3;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.TpLogout)
 private:
  inline void set_has_tvopenid();
  inline void clear_has_tvopenid();
  inline void set_has_nchannel();
  inline void clear_has_nchannel();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tvopenid_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 nchannel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static TpLogout* default_instance_;
};
// -------------------------------------------------------------------

class TpDataRecv : public ::google::protobuf::Message {
 public:
  TpDataRecv();
  virtual ~TpDataRecv();
  
  TpDataRecv(const TpDataRecv& from);
  
  inline TpDataRecv& operator=(const TpDataRecv& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpDataRecv& default_instance();
  
  void Swap(TpDataRecv* other);
  
  // implements Message ----------------------------------------------
  
  TpDataRecv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TpDataRecv& from);
  void MergeFrom(const TpDataRecv& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string TvOpenid = 1;
  inline bool has_tvopenid() const;
  inline void clear_tvopenid();
  static const int kTvOpenidFieldNumber = 1;
  inline const ::std::string& tvopenid() const;
  inline void set_tvopenid(const ::std::string& value);
  inline void set_tvopenid(const char* value);
  inline void set_tvopenid(const char* value, size_t size);
  inline ::std::string* mutable_tvopenid();
  inline ::std::string* release_tvopenid();
  
  // required int32 nChannel = 2;
  inline bool has_nchannel() const;
  inline void clear_nchannel();
  static const int kNChannelFieldNumber = 2;
  inline ::google::protobuf::int32 nchannel() const;
  inline void set_nchannel(::google::protobuf::int32 value);
  
  // required bytes TData = 3;
  inline bool has_tdata() const;
  inline void clear_tdata();
  static const int kTDataFieldNumber = 3;
  inline const ::std::string& tdata() const;
  inline void set_tdata(const ::std::string& value);
  inline void set_tdata(const char* value);
  inline void set_tdata(const void* value, size_t size);
  inline ::std::string* mutable_tdata();
  inline ::std::string* release_tdata();
  
  // optional string LZoneID = 4;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 4;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.TpDataRecv)
 private:
  inline void set_has_tvopenid();
  inline void clear_has_tvopenid();
  inline void set_has_nchannel();
  inline void clear_has_nchannel();
  inline void set_has_tdata();
  inline void clear_has_tdata();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tvopenid_;
  ::std::string* tdata_;
  ::std::string* lzoneid_;
  ::google::protobuf::int32 nchannel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static TpDataRecv* default_instance_;
};
// -------------------------------------------------------------------

class TpDataSend : public ::google::protobuf::Message {
 public:
  TpDataSend();
  virtual ~TpDataSend();
  
  TpDataSend(const TpDataSend& from);
  
  inline TpDataSend& operator=(const TpDataSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpDataSend& default_instance();
  
  void Swap(TpDataSend* other);
  
  // implements Message ----------------------------------------------
  
  TpDataSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TpDataSend& from);
  void MergeFrom(const TpDataSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 nConnId = 1;
  inline bool has_nconnid() const;
  inline void clear_nconnid();
  static const int kNConnIdFieldNumber = 1;
  inline ::google::protobuf::uint64 nconnid() const;
  inline void set_nconnid(::google::protobuf::uint64 value);
  
  // required bytes TData = 2;
  inline bool has_tdata() const;
  inline void clear_tdata();
  static const int kTDataFieldNumber = 2;
  inline const ::std::string& tdata() const;
  inline void set_tdata(const ::std::string& value);
  inline void set_tdata(const char* value);
  inline void set_tdata(const void* value, size_t size);
  inline ::std::string* mutable_tdata();
  inline ::std::string* release_tdata();
  
  // optional string LZoneID = 3;
  inline bool has_lzoneid() const;
  inline void clear_lzoneid();
  static const int kLZoneIDFieldNumber = 3;
  inline const ::std::string& lzoneid() const;
  inline void set_lzoneid(const ::std::string& value);
  inline void set_lzoneid(const char* value);
  inline void set_lzoneid(const char* value, size_t size);
  inline ::std::string* mutable_lzoneid();
  inline ::std::string* release_lzoneid();
  
  // @@protoc_insertion_point(class_scope:rpc.TpDataSend)
 private:
  inline void set_has_nconnid();
  inline void clear_has_nconnid();
  inline void set_has_tdata();
  inline void clear_has_tdata();
  inline void set_has_lzoneid();
  inline void clear_has_lzoneid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 nconnid_;
  ::std::string* tdata_;
  ::std::string* lzoneid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();
  
  void InitAsDefaultInstance();
  static TpDataSend* default_instance_;
};
// ===================================================================


// ===================================================================

// logPlayerLoginLogout

// required string playerid = 1;
inline bool logPlayerLoginLogout::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logPlayerLoginLogout::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logPlayerLoginLogout::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logPlayerLoginLogout::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& logPlayerLoginLogout::playerid() const {
  return *playerid_;
}
inline void logPlayerLoginLogout::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void logPlayerLoginLogout::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void logPlayerLoginLogout::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* logPlayerLoginLogout::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* logPlayerLoginLogout::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 time = 2;
inline bool logPlayerLoginLogout::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logPlayerLoginLogout::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void logPlayerLoginLogout::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void logPlayerLoginLogout::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 logPlayerLoginLogout::time() const {
  return time_;
}
inline void logPlayerLoginLogout::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required bool logout = 3;
inline bool logPlayerLoginLogout::has_logout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void logPlayerLoginLogout::set_has_logout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void logPlayerLoginLogout::clear_has_logout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void logPlayerLoginLogout::clear_logout() {
  logout_ = false;
  clear_has_logout();
}
inline bool logPlayerLoginLogout::logout() const {
  return logout_;
}
inline void logPlayerLoginLogout::set_logout(bool value) {
  set_has_logout();
  logout_ = value;
}

// required string ip = 4;
inline bool logPlayerLoginLogout::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void logPlayerLoginLogout::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void logPlayerLoginLogout::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void logPlayerLoginLogout::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& logPlayerLoginLogout::ip() const {
  return *ip_;
}
inline void logPlayerLoginLogout::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void logPlayerLoginLogout::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void logPlayerLoginLogout::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* logPlayerLoginLogout::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* logPlayerLoginLogout::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogPlayerRegister

// required string LGameSvrId = 1;
inline bool LogPlayerRegister::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogPlayerRegister::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogPlayerRegister::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogPlayerRegister::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogPlayerRegister::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogPlayerRegister::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerRegister::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerRegister::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogPlayerRegister::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogPlayerRegister::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogPlayerRegister::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogPlayerRegister::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogPlayerRegister::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogPlayerRegister::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogPlayerRegister::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerRegister::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerRegister::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogPlayerRegister::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogPlayerRegister::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogPlayerRegister::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogPlayerRegister::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogPlayerRegister::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogPlayerRegister::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogPlayerRegister::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerRegister::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerRegister::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogPlayerRegister::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogPlayerRegister::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogPlayerRegister::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogPlayerRegister::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogPlayerRegister::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogPlayerRegister::lplatid() const {
  return lplatid_;
}
inline void LogPlayerRegister::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogPlayerRegister::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogPlayerRegister::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogPlayerRegister::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogPlayerRegister::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogPlayerRegister::lvopenid() const {
  return *lvopenid_;
}
inline void LogPlayerRegister::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerRegister::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerRegister::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogPlayerRegister::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LClientVersion = 6;
inline bool LogPlayerRegister::has_lclientversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogPlayerRegister::set_has_lclientversion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogPlayerRegister::clear_has_lclientversion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogPlayerRegister::clear_lclientversion() {
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    lclientversion_->clear();
  }
  clear_has_lclientversion();
}
inline const ::std::string& LogPlayerRegister::lclientversion() const {
  return *lclientversion_;
}
inline void LogPlayerRegister::set_lclientversion(const ::std::string& value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerRegister::set_lclientversion(const char* value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerRegister::set_lclientversion(const char* value, size_t size) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lclientversion() {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  return lclientversion_;
}
inline ::std::string* LogPlayerRegister::release_lclientversion() {
  clear_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lclientversion_;
    lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LSystemHardware = 7;
inline bool LogPlayerRegister::has_lsystemhardware() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogPlayerRegister::set_has_lsystemhardware() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogPlayerRegister::clear_has_lsystemhardware() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogPlayerRegister::clear_lsystemhardware() {
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_->clear();
  }
  clear_has_lsystemhardware();
}
inline const ::std::string& LogPlayerRegister::lsystemhardware() const {
  return *lsystemhardware_;
}
inline void LogPlayerRegister::set_lsystemhardware(const ::std::string& value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerRegister::set_lsystemhardware(const char* value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerRegister::set_lsystemhardware(const char* value, size_t size) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lsystemhardware() {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  return lsystemhardware_;
}
inline ::std::string* LogPlayerRegister::release_lsystemhardware() {
  clear_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lsystemhardware_;
    lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LTelecomOper = 8;
inline bool LogPlayerRegister::has_ltelecomoper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogPlayerRegister::set_has_ltelecomoper() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogPlayerRegister::clear_has_ltelecomoper() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogPlayerRegister::clear_ltelecomoper() {
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_->clear();
  }
  clear_has_ltelecomoper();
}
inline const ::std::string& LogPlayerRegister::ltelecomoper() const {
  return *ltelecomoper_;
}
inline void LogPlayerRegister::set_ltelecomoper(const ::std::string& value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerRegister::set_ltelecomoper(const char* value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerRegister::set_ltelecomoper(const char* value, size_t size) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_ltelecomoper() {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  return ltelecomoper_;
}
inline ::std::string* LogPlayerRegister::release_ltelecomoper() {
  clear_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ltelecomoper_;
    ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LNetwork = 9;
inline bool LogPlayerRegister::has_lnetwork() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogPlayerRegister::set_has_lnetwork() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogPlayerRegister::clear_has_lnetwork() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogPlayerRegister::clear_lnetwork() {
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    lnetwork_->clear();
  }
  clear_has_lnetwork();
}
inline const ::std::string& LogPlayerRegister::lnetwork() const {
  return *lnetwork_;
}
inline void LogPlayerRegister::set_lnetwork(const ::std::string& value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerRegister::set_lnetwork(const char* value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerRegister::set_lnetwork(const char* value, size_t size) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lnetwork() {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  return lnetwork_;
}
inline ::std::string* LogPlayerRegister::release_lnetwork() {
  clear_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lnetwork_;
    lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LRegChannel = 10;
inline bool LogPlayerRegister::has_lregchannel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogPlayerRegister::set_has_lregchannel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogPlayerRegister::clear_has_lregchannel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogPlayerRegister::clear_lregchannel() {
  lregchannel_ = 0;
  clear_has_lregchannel();
}
inline ::google::protobuf::int32 LogPlayerRegister::lregchannel() const {
  return lregchannel_;
}
inline void LogPlayerRegister::set_lregchannel(::google::protobuf::int32 value) {
  set_has_lregchannel();
  lregchannel_ = value;
}

// optional string LZoneID = 11;
inline bool LogPlayerRegister::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogPlayerRegister::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogPlayerRegister::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogPlayerRegister::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogPlayerRegister::lzoneid() const {
  return *lzoneid_;
}
inline void LogPlayerRegister::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerRegister::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerRegister::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerRegister::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogPlayerRegister::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogPlayerLogin

// required string LGameSvrId = 1;
inline bool LogPlayerLogin::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogPlayerLogin::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogPlayerLogin::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogPlayerLogin::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogPlayerLogin::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogPlayerLogin::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLogin::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLogin::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogPlayerLogin::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogPlayerLogin::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogPlayerLogin::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogPlayerLogin::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogPlayerLogin::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogPlayerLogin::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogPlayerLogin::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLogin::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLogin::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogPlayerLogin::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogPlayerLogin::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogPlayerLogin::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogPlayerLogin::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogPlayerLogin::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogPlayerLogin::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogPlayerLogin::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLogin::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLogin::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogPlayerLogin::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogPlayerLogin::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogPlayerLogin::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogPlayerLogin::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogPlayerLogin::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogPlayerLogin::lplatid() const {
  return lplatid_;
}
inline void LogPlayerLogin::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogPlayerLogin::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogPlayerLogin::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogPlayerLogin::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogPlayerLogin::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogPlayerLogin::lvopenid() const {
  return *lvopenid_;
}
inline void LogPlayerLogin::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLogin::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLogin::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogPlayerLogin::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLevel = 6;
inline bool LogPlayerLogin::has_llevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogPlayerLogin::set_has_llevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogPlayerLogin::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogPlayerLogin::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogPlayerLogin::llevel() const {
  return llevel_;
}
inline void LogPlayerLogin::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LPlayerFriendsNum = 7;
inline bool LogPlayerLogin::has_lplayerfriendsnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogPlayerLogin::set_has_lplayerfriendsnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogPlayerLogin::clear_has_lplayerfriendsnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogPlayerLogin::clear_lplayerfriendsnum() {
  lplayerfriendsnum_ = 0;
  clear_has_lplayerfriendsnum();
}
inline ::google::protobuf::int32 LogPlayerLogin::lplayerfriendsnum() const {
  return lplayerfriendsnum_;
}
inline void LogPlayerLogin::set_lplayerfriendsnum(::google::protobuf::int32 value) {
  set_has_lplayerfriendsnum();
  lplayerfriendsnum_ = value;
}

// required string LClientVersion = 8;
inline bool LogPlayerLogin::has_lclientversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogPlayerLogin::set_has_lclientversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogPlayerLogin::clear_has_lclientversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogPlayerLogin::clear_lclientversion() {
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    lclientversion_->clear();
  }
  clear_has_lclientversion();
}
inline const ::std::string& LogPlayerLogin::lclientversion() const {
  return *lclientversion_;
}
inline void LogPlayerLogin::set_lclientversion(const ::std::string& value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerLogin::set_lclientversion(const char* value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerLogin::set_lclientversion(const char* value, size_t size) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lclientversion() {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  return lclientversion_;
}
inline ::std::string* LogPlayerLogin::release_lclientversion() {
  clear_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lclientversion_;
    lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LSystemHardware = 9;
inline bool LogPlayerLogin::has_lsystemhardware() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogPlayerLogin::set_has_lsystemhardware() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogPlayerLogin::clear_has_lsystemhardware() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogPlayerLogin::clear_lsystemhardware() {
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_->clear();
  }
  clear_has_lsystemhardware();
}
inline const ::std::string& LogPlayerLogin::lsystemhardware() const {
  return *lsystemhardware_;
}
inline void LogPlayerLogin::set_lsystemhardware(const ::std::string& value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerLogin::set_lsystemhardware(const char* value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerLogin::set_lsystemhardware(const char* value, size_t size) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lsystemhardware() {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  return lsystemhardware_;
}
inline ::std::string* LogPlayerLogin::release_lsystemhardware() {
  clear_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lsystemhardware_;
    lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LTelecomOper = 10;
inline bool LogPlayerLogin::has_ltelecomoper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogPlayerLogin::set_has_ltelecomoper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogPlayerLogin::clear_has_ltelecomoper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogPlayerLogin::clear_ltelecomoper() {
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_->clear();
  }
  clear_has_ltelecomoper();
}
inline const ::std::string& LogPlayerLogin::ltelecomoper() const {
  return *ltelecomoper_;
}
inline void LogPlayerLogin::set_ltelecomoper(const ::std::string& value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerLogin::set_ltelecomoper(const char* value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerLogin::set_ltelecomoper(const char* value, size_t size) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_ltelecomoper() {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  return ltelecomoper_;
}
inline ::std::string* LogPlayerLogin::release_ltelecomoper() {
  clear_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ltelecomoper_;
    ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LNetwork = 11;
inline bool LogPlayerLogin::has_lnetwork() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogPlayerLogin::set_has_lnetwork() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogPlayerLogin::clear_has_lnetwork() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogPlayerLogin::clear_lnetwork() {
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    lnetwork_->clear();
  }
  clear_has_lnetwork();
}
inline const ::std::string& LogPlayerLogin::lnetwork() const {
  return *lnetwork_;
}
inline void LogPlayerLogin::set_lnetwork(const ::std::string& value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerLogin::set_lnetwork(const char* value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerLogin::set_lnetwork(const char* value, size_t size) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lnetwork() {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  return lnetwork_;
}
inline ::std::string* LogPlayerLogin::release_lnetwork() {
  clear_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lnetwork_;
    lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLoginChannel = 12;
inline bool LogPlayerLogin::has_lloginchannel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogPlayerLogin::set_has_lloginchannel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogPlayerLogin::clear_has_lloginchannel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogPlayerLogin::clear_lloginchannel() {
  lloginchannel_ = 0;
  clear_has_lloginchannel();
}
inline ::google::protobuf::int32 LogPlayerLogin::lloginchannel() const {
  return lloginchannel_;
}
inline void LogPlayerLogin::set_lloginchannel(::google::protobuf::int32 value) {
  set_has_lloginchannel();
  lloginchannel_ = value;
}

// optional string LZoneID = 13;
inline bool LogPlayerLogin::has_lzoneid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogPlayerLogin::set_has_lzoneid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogPlayerLogin::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogPlayerLogin::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogPlayerLogin::lzoneid() const {
  return *lzoneid_;
}
inline void LogPlayerLogin::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLogin::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLogin::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogin::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogPlayerLogin::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogPlayerLogout

// required string LGameSvrId = 1;
inline bool LogPlayerLogout::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogPlayerLogout::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogPlayerLogout::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogPlayerLogout::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogPlayerLogout::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogPlayerLogout::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLogout::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLogout::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogPlayerLogout::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogPlayerLogout::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogPlayerLogout::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogPlayerLogout::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogPlayerLogout::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogPlayerLogout::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogPlayerLogout::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLogout::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLogout::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogPlayerLogout::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogPlayerLogout::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogPlayerLogout::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogPlayerLogout::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogPlayerLogout::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogPlayerLogout::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogPlayerLogout::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLogout::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLogout::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogPlayerLogout::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogPlayerLogout::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogPlayerLogout::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogPlayerLogout::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogPlayerLogout::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogPlayerLogout::lplatid() const {
  return lplatid_;
}
inline void LogPlayerLogout::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogPlayerLogout::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogPlayerLogout::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogPlayerLogout::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogPlayerLogout::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogPlayerLogout::lvopenid() const {
  return *lvopenid_;
}
inline void LogPlayerLogout::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLogout::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLogout::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogPlayerLogout::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LOnlineTime = 6;
inline bool LogPlayerLogout::has_lonlinetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogPlayerLogout::set_has_lonlinetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogPlayerLogout::clear_has_lonlinetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogPlayerLogout::clear_lonlinetime() {
  lonlinetime_ = 0;
  clear_has_lonlinetime();
}
inline ::google::protobuf::int32 LogPlayerLogout::lonlinetime() const {
  return lonlinetime_;
}
inline void LogPlayerLogout::set_lonlinetime(::google::protobuf::int32 value) {
  set_has_lonlinetime();
  lonlinetime_ = value;
}

// required int32 LLevel = 7;
inline bool LogPlayerLogout::has_llevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogPlayerLogout::set_has_llevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogPlayerLogout::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogPlayerLogout::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogPlayerLogout::llevel() const {
  return llevel_;
}
inline void LogPlayerLogout::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LPlayerFriendsNum = 8;
inline bool LogPlayerLogout::has_lplayerfriendsnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogPlayerLogout::set_has_lplayerfriendsnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogPlayerLogout::clear_has_lplayerfriendsnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogPlayerLogout::clear_lplayerfriendsnum() {
  lplayerfriendsnum_ = 0;
  clear_has_lplayerfriendsnum();
}
inline ::google::protobuf::int32 LogPlayerLogout::lplayerfriendsnum() const {
  return lplayerfriendsnum_;
}
inline void LogPlayerLogout::set_lplayerfriendsnum(::google::protobuf::int32 value) {
  set_has_lplayerfriendsnum();
  lplayerfriendsnum_ = value;
}

// required string LClientVersion = 9;
inline bool LogPlayerLogout::has_lclientversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogPlayerLogout::set_has_lclientversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogPlayerLogout::clear_has_lclientversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogPlayerLogout::clear_lclientversion() {
  if (lclientversion_ != &::google::protobuf::internal::kEmptyString) {
    lclientversion_->clear();
  }
  clear_has_lclientversion();
}
inline const ::std::string& LogPlayerLogout::lclientversion() const {
  return *lclientversion_;
}
inline void LogPlayerLogout::set_lclientversion(const ::std::string& value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerLogout::set_lclientversion(const char* value) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(value);
}
inline void LogPlayerLogout::set_lclientversion(const char* value, size_t size) {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  lclientversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lclientversion() {
  set_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    lclientversion_ = new ::std::string;
  }
  return lclientversion_;
}
inline ::std::string* LogPlayerLogout::release_lclientversion() {
  clear_has_lclientversion();
  if (lclientversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lclientversion_;
    lclientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LSystemHardware = 10;
inline bool LogPlayerLogout::has_lsystemhardware() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogPlayerLogout::set_has_lsystemhardware() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogPlayerLogout::clear_has_lsystemhardware() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogPlayerLogout::clear_lsystemhardware() {
  if (lsystemhardware_ != &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_->clear();
  }
  clear_has_lsystemhardware();
}
inline const ::std::string& LogPlayerLogout::lsystemhardware() const {
  return *lsystemhardware_;
}
inline void LogPlayerLogout::set_lsystemhardware(const ::std::string& value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerLogout::set_lsystemhardware(const char* value) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(value);
}
inline void LogPlayerLogout::set_lsystemhardware(const char* value, size_t size) {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  lsystemhardware_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lsystemhardware() {
  set_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    lsystemhardware_ = new ::std::string;
  }
  return lsystemhardware_;
}
inline ::std::string* LogPlayerLogout::release_lsystemhardware() {
  clear_has_lsystemhardware();
  if (lsystemhardware_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lsystemhardware_;
    lsystemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LTelecomOper = 11;
inline bool LogPlayerLogout::has_ltelecomoper() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogPlayerLogout::set_has_ltelecomoper() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogPlayerLogout::clear_has_ltelecomoper() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogPlayerLogout::clear_ltelecomoper() {
  if (ltelecomoper_ != &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_->clear();
  }
  clear_has_ltelecomoper();
}
inline const ::std::string& LogPlayerLogout::ltelecomoper() const {
  return *ltelecomoper_;
}
inline void LogPlayerLogout::set_ltelecomoper(const ::std::string& value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerLogout::set_ltelecomoper(const char* value) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(value);
}
inline void LogPlayerLogout::set_ltelecomoper(const char* value, size_t size) {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  ltelecomoper_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_ltelecomoper() {
  set_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    ltelecomoper_ = new ::std::string;
  }
  return ltelecomoper_;
}
inline ::std::string* LogPlayerLogout::release_ltelecomoper() {
  clear_has_ltelecomoper();
  if (ltelecomoper_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ltelecomoper_;
    ltelecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LNetwork = 12;
inline bool LogPlayerLogout::has_lnetwork() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogPlayerLogout::set_has_lnetwork() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogPlayerLogout::clear_has_lnetwork() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogPlayerLogout::clear_lnetwork() {
  if (lnetwork_ != &::google::protobuf::internal::kEmptyString) {
    lnetwork_->clear();
  }
  clear_has_lnetwork();
}
inline const ::std::string& LogPlayerLogout::lnetwork() const {
  return *lnetwork_;
}
inline void LogPlayerLogout::set_lnetwork(const ::std::string& value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerLogout::set_lnetwork(const char* value) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(value);
}
inline void LogPlayerLogout::set_lnetwork(const char* value, size_t size) {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  lnetwork_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lnetwork() {
  set_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    lnetwork_ = new ::std::string;
  }
  return lnetwork_;
}
inline ::std::string* LogPlayerLogout::release_lnetwork() {
  clear_has_lnetwork();
  if (lnetwork_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lnetwork_;
    lnetwork_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 13;
inline bool LogPlayerLogout::has_lzoneid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogPlayerLogout::set_has_lzoneid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogPlayerLogout::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogPlayerLogout::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogPlayerLogout::lzoneid() const {
  return *lzoneid_;
}
inline void LogPlayerLogout::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLogout::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLogout::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLogout::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogPlayerLogout::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogMoneyFlow

// required string LGameSvrId = 1;
inline bool LogMoneyFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMoneyFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMoneyFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMoneyFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogMoneyFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogMoneyFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogMoneyFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogMoneyFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogMoneyFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogMoneyFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMoneyFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMoneyFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMoneyFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogMoneyFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogMoneyFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogMoneyFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogMoneyFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogMoneyFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 LSequence = 3;
inline bool LogMoneyFlow::has_lsequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMoneyFlow::set_has_lsequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMoneyFlow::clear_has_lsequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMoneyFlow::clear_lsequence() {
  lsequence_ = 0;
  clear_has_lsequence();
}
inline ::google::protobuf::int32 LogMoneyFlow::lsequence() const {
  return lsequence_;
}
inline void LogMoneyFlow::set_lsequence(::google::protobuf::int32 value) {
  set_has_lsequence();
  lsequence_ = value;
}

// required string LvGameAppid = 4;
inline bool LogMoneyFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMoneyFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMoneyFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMoneyFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogMoneyFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogMoneyFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogMoneyFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogMoneyFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogMoneyFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 5;
inline bool LogMoneyFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMoneyFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMoneyFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMoneyFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogMoneyFlow::lplatid() const {
  return lplatid_;
}
inline void LogMoneyFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 6;
inline bool LogMoneyFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMoneyFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogMoneyFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogMoneyFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogMoneyFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogMoneyFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogMoneyFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogMoneyFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogMoneyFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLevel = 7;
inline bool LogMoneyFlow::has_llevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogMoneyFlow::set_has_llevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogMoneyFlow::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogMoneyFlow::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogMoneyFlow::llevel() const {
  return llevel_;
}
inline void LogMoneyFlow::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LiMoney = 8;
inline bool LogMoneyFlow::has_limoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogMoneyFlow::set_has_limoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogMoneyFlow::clear_has_limoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogMoneyFlow::clear_limoney() {
  limoney_ = 0;
  clear_has_limoney();
}
inline ::google::protobuf::int32 LogMoneyFlow::limoney() const {
  return limoney_;
}
inline void LogMoneyFlow::set_limoney(::google::protobuf::int32 value) {
  set_has_limoney();
  limoney_ = value;
}

// required int32 LReason = 9;
inline bool LogMoneyFlow::has_lreason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogMoneyFlow::set_has_lreason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogMoneyFlow::clear_has_lreason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogMoneyFlow::clear_lreason() {
  lreason_ = 0;
  clear_has_lreason();
}
inline ::google::protobuf::int32 LogMoneyFlow::lreason() const {
  return lreason_;
}
inline void LogMoneyFlow::set_lreason(::google::protobuf::int32 value) {
  set_has_lreason();
  lreason_ = value;
}

// required .rpc.LogMoneyFlow.ADDORREDUCE LAddOrReduce = 10;
inline bool LogMoneyFlow::has_laddorreduce() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogMoneyFlow::set_has_laddorreduce() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogMoneyFlow::clear_has_laddorreduce() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogMoneyFlow::clear_laddorreduce() {
  laddorreduce_ = 0;
  clear_has_laddorreduce();
}
inline ::rpc::LogMoneyFlow_ADDORREDUCE LogMoneyFlow::laddorreduce() const {
  return static_cast< ::rpc::LogMoneyFlow_ADDORREDUCE >(laddorreduce_);
}
inline void LogMoneyFlow::set_laddorreduce(::rpc::LogMoneyFlow_ADDORREDUCE value) {
  GOOGLE_DCHECK(::rpc::LogMoneyFlow_ADDORREDUCE_IsValid(value));
  set_has_laddorreduce();
  laddorreduce_ = value;
}

// required int32 LiMoneyType = 11;
inline bool LogMoneyFlow::has_limoneytype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogMoneyFlow::set_has_limoneytype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogMoneyFlow::clear_has_limoneytype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogMoneyFlow::clear_limoneytype() {
  limoneytype_ = 0;
  clear_has_limoneytype();
}
inline ::google::protobuf::int32 LogMoneyFlow::limoneytype() const {
  return limoneytype_;
}
inline void LogMoneyFlow::set_limoneytype(::google::protobuf::int32 value) {
  set_has_limoneytype();
  limoneytype_ = value;
}

// required int32 LiCenterLevel = 12;
inline bool LogMoneyFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogMoneyFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogMoneyFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogMoneyFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogMoneyFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogMoneyFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 13;
inline bool LogMoneyFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogMoneyFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogMoneyFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogMoneyFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogMoneyFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogMoneyFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogMoneyFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogMoneyFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogMoneyFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSnsFlow

// required string LGameSvrId = 1;
inline bool LogSnsFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSnsFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSnsFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSnsFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSnsFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSnsFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSnsFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSnsFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSnsFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSnsFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSnsFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSnsFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSnsFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSnsFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSnsFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSnsFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSnsFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSnsFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSnsFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSnsFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSnsFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSnsFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSnsFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSnsFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSnsFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSnsFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSnsFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSnsFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSnsFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSnsFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSnsFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSnsFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSnsFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSnsFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSnsFlow::lplatid() const {
  return lplatid_;
}
inline void LogSnsFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string LActorOpenID = 5;
inline bool LogSnsFlow::has_lactoropenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSnsFlow::set_has_lactoropenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSnsFlow::clear_has_lactoropenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSnsFlow::clear_lactoropenid() {
  if (lactoropenid_ != &::google::protobuf::internal::kEmptyString) {
    lactoropenid_->clear();
  }
  clear_has_lactoropenid();
}
inline const ::std::string& LogSnsFlow::lactoropenid() const {
  return *lactoropenid_;
}
inline void LogSnsFlow::set_lactoropenid(const ::std::string& value) {
  set_has_lactoropenid();
  if (lactoropenid_ == &::google::protobuf::internal::kEmptyString) {
    lactoropenid_ = new ::std::string;
  }
  lactoropenid_->assign(value);
}
inline void LogSnsFlow::set_lactoropenid(const char* value) {
  set_has_lactoropenid();
  if (lactoropenid_ == &::google::protobuf::internal::kEmptyString) {
    lactoropenid_ = new ::std::string;
  }
  lactoropenid_->assign(value);
}
inline void LogSnsFlow::set_lactoropenid(const char* value, size_t size) {
  set_has_lactoropenid();
  if (lactoropenid_ == &::google::protobuf::internal::kEmptyString) {
    lactoropenid_ = new ::std::string;
  }
  lactoropenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSnsFlow::mutable_lactoropenid() {
  set_has_lactoropenid();
  if (lactoropenid_ == &::google::protobuf::internal::kEmptyString) {
    lactoropenid_ = new ::std::string;
  }
  return lactoropenid_;
}
inline ::std::string* LogSnsFlow::release_lactoropenid() {
  clear_has_lactoropenid();
  if (lactoropenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lactoropenid_;
    lactoropenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 LRecNum = 6;
inline bool LogSnsFlow::has_lrecnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSnsFlow::set_has_lrecnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSnsFlow::clear_has_lrecnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSnsFlow::clear_lrecnum() {
  lrecnum_ = 0;
  clear_has_lrecnum();
}
inline ::google::protobuf::int32 LogSnsFlow::lrecnum() const {
  return lrecnum_;
}
inline void LogSnsFlow::set_lrecnum(::google::protobuf::int32 value) {
  set_has_lrecnum();
  lrecnum_ = value;
}

// required int32 LCount = 7;
inline bool LogSnsFlow::has_lcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSnsFlow::set_has_lcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSnsFlow::clear_has_lcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSnsFlow::clear_lcount() {
  lcount_ = 0;
  clear_has_lcount();
}
inline ::google::protobuf::int32 LogSnsFlow::lcount() const {
  return lcount_;
}
inline void LogSnsFlow::set_lcount(::google::protobuf::int32 value) {
  set_has_lcount();
  lcount_ = value;
}

// required int32 LSNSType = 8;
inline bool LogSnsFlow::has_lsnstype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogSnsFlow::set_has_lsnstype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogSnsFlow::clear_has_lsnstype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogSnsFlow::clear_lsnstype() {
  lsnstype_ = 0;
  clear_has_lsnstype();
}
inline ::google::protobuf::int32 LogSnsFlow::lsnstype() const {
  return lsnstype_;
}
inline void LogSnsFlow::set_lsnstype(::google::protobuf::int32 value) {
  set_has_lsnstype();
  lsnstype_ = value;
}

// optional int32 LSNSSubType = 9;
inline bool LogSnsFlow::has_lsnssubtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogSnsFlow::set_has_lsnssubtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogSnsFlow::clear_has_lsnssubtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogSnsFlow::clear_lsnssubtype() {
  lsnssubtype_ = 0;
  clear_has_lsnssubtype();
}
inline ::google::protobuf::int32 LogSnsFlow::lsnssubtype() const {
  return lsnssubtype_;
}
inline void LogSnsFlow::set_lsnssubtype(::google::protobuf::int32 value) {
  set_has_lsnssubtype();
  lsnssubtype_ = value;
}

// required int32 LiCenterLevel = 10;
inline bool LogSnsFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogSnsFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogSnsFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogSnsFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogSnsFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogSnsFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 11;
inline bool LogSnsFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogSnsFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogSnsFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogSnsFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSnsFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSnsFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSnsFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSnsFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSnsFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSnsFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogRoundFlow

// required string LGameSvrId = 1;
inline bool LogRoundFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRoundFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRoundFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRoundFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogRoundFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogRoundFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogRoundFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogRoundFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogRoundFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogRoundFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRoundFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRoundFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRoundFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogRoundFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogRoundFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogRoundFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogRoundFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogRoundFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogRoundFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRoundFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRoundFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRoundFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogRoundFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogRoundFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogRoundFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogRoundFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogRoundFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogRoundFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRoundFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRoundFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRoundFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogRoundFlow::lplatid() const {
  return lplatid_;
}
inline void LogRoundFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogRoundFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRoundFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRoundFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRoundFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogRoundFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogRoundFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogRoundFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogRoundFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogRoundFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LBattleID = 6;
inline bool LogRoundFlow::has_lbattleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogRoundFlow::set_has_lbattleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogRoundFlow::clear_has_lbattleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogRoundFlow::clear_lbattleid() {
  lbattleid_ = 0;
  clear_has_lbattleid();
}
inline ::google::protobuf::int32 LogRoundFlow::lbattleid() const {
  return lbattleid_;
}
inline void LogRoundFlow::set_lbattleid(::google::protobuf::int32 value) {
  set_has_lbattleid();
  lbattleid_ = value;
}

// required int32 LBattleType = 7;
inline bool LogRoundFlow::has_lbattletype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogRoundFlow::set_has_lbattletype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogRoundFlow::clear_has_lbattletype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogRoundFlow::clear_lbattletype() {
  lbattletype_ = 0;
  clear_has_lbattletype();
}
inline ::google::protobuf::int32 LogRoundFlow::lbattletype() const {
  return lbattletype_;
}
inline void LogRoundFlow::set_lbattletype(::google::protobuf::int32 value) {
  set_has_lbattletype();
  lbattletype_ = value;
}

// required int32 LPVEBattleMode = 8;
inline bool LogRoundFlow::has_lpvebattlemode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogRoundFlow::set_has_lpvebattlemode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogRoundFlow::clear_has_lpvebattlemode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogRoundFlow::clear_lpvebattlemode() {
  lpvebattlemode_ = 0;
  clear_has_lpvebattlemode();
}
inline ::google::protobuf::int32 LogRoundFlow::lpvebattlemode() const {
  return lpvebattlemode_;
}
inline void LogRoundFlow::set_lpvebattlemode(::google::protobuf::int32 value) {
  set_has_lpvebattlemode();
  lpvebattlemode_ = value;
}

// required int32 LRoundScore = 9;
inline bool LogRoundFlow::has_lroundscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogRoundFlow::set_has_lroundscore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogRoundFlow::clear_has_lroundscore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogRoundFlow::clear_lroundscore() {
  lroundscore_ = 0;
  clear_has_lroundscore();
}
inline ::google::protobuf::int32 LogRoundFlow::lroundscore() const {
  return lroundscore_;
}
inline void LogRoundFlow::set_lroundscore(::google::protobuf::int32 value) {
  set_has_lroundscore();
  lroundscore_ = value;
}

// required int32 LRoundTime = 10;
inline bool LogRoundFlow::has_lroundtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogRoundFlow::set_has_lroundtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogRoundFlow::clear_has_lroundtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogRoundFlow::clear_lroundtime() {
  lroundtime_ = 0;
  clear_has_lroundtime();
}
inline ::google::protobuf::int32 LogRoundFlow::lroundtime() const {
  return lroundtime_;
}
inline void LogRoundFlow::set_lroundtime(::google::protobuf::int32 value) {
  set_has_lroundtime();
  lroundtime_ = value;
}

// required int32 LResult = 11;
inline bool LogRoundFlow::has_lresult() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogRoundFlow::set_has_lresult() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogRoundFlow::clear_has_lresult() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogRoundFlow::clear_lresult() {
  lresult_ = 0;
  clear_has_lresult();
}
inline ::google::protobuf::int32 LogRoundFlow::lresult() const {
  return lresult_;
}
inline void LogRoundFlow::set_lresult(::google::protobuf::int32 value) {
  set_has_lresult();
  lresult_ = value;
}

// required int32 LGold = 12;
inline bool LogRoundFlow::has_lgold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogRoundFlow::set_has_lgold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogRoundFlow::clear_has_lgold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogRoundFlow::clear_lgold() {
  lgold_ = 0;
  clear_has_lgold();
}
inline ::google::protobuf::int32 LogRoundFlow::lgold() const {
  return lgold_;
}
inline void LogRoundFlow::set_lgold(::google::protobuf::int32 value) {
  set_has_lgold();
  lgold_ = value;
}

// required int32 LFood = 13;
inline bool LogRoundFlow::has_lfood() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogRoundFlow::set_has_lfood() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogRoundFlow::clear_has_lfood() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogRoundFlow::clear_lfood() {
  lfood_ = 0;
  clear_has_lfood();
}
inline ::google::protobuf::int32 LogRoundFlow::lfood() const {
  return lfood_;
}
inline void LogRoundFlow::set_lfood(::google::protobuf::int32 value) {
  set_has_lfood();
  lfood_ = value;
}

// required int32 LWuhun = 14;
inline bool LogRoundFlow::has_lwuhun() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogRoundFlow::set_has_lwuhun() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogRoundFlow::clear_has_lwuhun() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogRoundFlow::clear_lwuhun() {
  lwuhun_ = 0;
  clear_has_lwuhun();
}
inline ::google::protobuf::int32 LogRoundFlow::lwuhun() const {
  return lwuhun_;
}
inline void LogRoundFlow::set_lwuhun(::google::protobuf::int32 value) {
  set_has_lwuhun();
  lwuhun_ = value;
}

// required int32 LPercent = 15;
inline bool LogRoundFlow::has_lpercent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogRoundFlow::set_has_lpercent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogRoundFlow::clear_has_lpercent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogRoundFlow::clear_lpercent() {
  lpercent_ = 0;
  clear_has_lpercent();
}
inline ::google::protobuf::int32 LogRoundFlow::lpercent() const {
  return lpercent_;
}
inline void LogRoundFlow::set_lpercent(::google::protobuf::int32 value) {
  set_has_lpercent();
  lpercent_ = value;
}

// required int32 LiPVEAUTOMODE = 16;
inline bool LogRoundFlow::has_lipveautomode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogRoundFlow::set_has_lipveautomode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogRoundFlow::clear_has_lipveautomode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogRoundFlow::clear_lipveautomode() {
  lipveautomode_ = 0;
  clear_has_lipveautomode();
}
inline ::google::protobuf::int32 LogRoundFlow::lipveautomode() const {
  return lipveautomode_;
}
inline void LogRoundFlow::set_lipveautomode(::google::protobuf::int32 value) {
  set_has_lipveautomode();
  lipveautomode_ = value;
}

// required int32 LiECHARTYPE = 17;
inline bool LogRoundFlow::has_liechartype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogRoundFlow::set_has_liechartype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogRoundFlow::clear_has_liechartype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogRoundFlow::clear_liechartype() {
  liechartype_ = 0;
  clear_has_liechartype();
}
inline ::google::protobuf::int32 LogRoundFlow::liechartype() const {
  return liechartype_;
}
inline void LogRoundFlow::set_liechartype(::google::protobuf::int32 value) {
  set_has_liechartype();
  liechartype_ = value;
}

// required int32 LiECHARTYPEFrag = 18;
inline bool LogRoundFlow::has_liechartypefrag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LogRoundFlow::set_has_liechartypefrag() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LogRoundFlow::clear_has_liechartypefrag() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LogRoundFlow::clear_liechartypefrag() {
  liechartypefrag_ = 0;
  clear_has_liechartypefrag();
}
inline ::google::protobuf::int32 LogRoundFlow::liechartypefrag() const {
  return liechartypefrag_;
}
inline void LogRoundFlow::set_liechartypefrag(::google::protobuf::int32 value) {
  set_has_liechartypefrag();
  liechartypefrag_ = value;
}

// required int32 LiECHARTYPEFragNum = 19;
inline bool LogRoundFlow::has_liechartypefragnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LogRoundFlow::set_has_liechartypefragnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LogRoundFlow::clear_has_liechartypefragnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LogRoundFlow::clear_liechartypefragnum() {
  liechartypefragnum_ = 0;
  clear_has_liechartypefragnum();
}
inline ::google::protobuf::int32 LogRoundFlow::liechartypefragnum() const {
  return liechartypefragnum_;
}
inline void LogRoundFlow::set_liechartypefragnum(::google::protobuf::int32 value) {
  set_has_liechartypefragnum();
  liechartypefragnum_ = value;
}

// required string LvDstId = 20;
inline bool LogRoundFlow::has_lvdstid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LogRoundFlow::set_has_lvdstid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LogRoundFlow::clear_has_lvdstid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LogRoundFlow::clear_lvdstid() {
  if (lvdstid_ != &::google::protobuf::internal::kEmptyString) {
    lvdstid_->clear();
  }
  clear_has_lvdstid();
}
inline const ::std::string& LogRoundFlow::lvdstid() const {
  return *lvdstid_;
}
inline void LogRoundFlow::set_lvdstid(const ::std::string& value) {
  set_has_lvdstid();
  if (lvdstid_ == &::google::protobuf::internal::kEmptyString) {
    lvdstid_ = new ::std::string;
  }
  lvdstid_->assign(value);
}
inline void LogRoundFlow::set_lvdstid(const char* value) {
  set_has_lvdstid();
  if (lvdstid_ == &::google::protobuf::internal::kEmptyString) {
    lvdstid_ = new ::std::string;
  }
  lvdstid_->assign(value);
}
inline void LogRoundFlow::set_lvdstid(const char* value, size_t size) {
  set_has_lvdstid();
  if (lvdstid_ == &::google::protobuf::internal::kEmptyString) {
    lvdstid_ = new ::std::string;
  }
  lvdstid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_lvdstid() {
  set_has_lvdstid();
  if (lvdstid_ == &::google::protobuf::internal::kEmptyString) {
    lvdstid_ = new ::std::string;
  }
  return lvdstid_;
}
inline ::std::string* LogRoundFlow::release_lvdstid() {
  clear_has_lvdstid();
  if (lvdstid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvdstid_;
    lvdstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 21;
inline bool LogRoundFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LogRoundFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LogRoundFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LogRoundFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogRoundFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogRoundFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogRoundFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogRoundFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRoundFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogRoundFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogBuildingUpgradeFlow

// required string LGameSvrId = 1;
inline bool LogBuildingUpgradeFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogBuildingUpgradeFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogBuildingUpgradeFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogBuildingUpgradeFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogBuildingUpgradeFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingUpgradeFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogBuildingUpgradeFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogBuildingUpgradeFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogBuildingUpgradeFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogBuildingUpgradeFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogBuildingUpgradeFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogBuildingUpgradeFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingUpgradeFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogBuildingUpgradeFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogBuildingUpgradeFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogBuildingUpgradeFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogBuildingUpgradeFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogBuildingUpgradeFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogBuildingUpgradeFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingUpgradeFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogBuildingUpgradeFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogBuildingUpgradeFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogBuildingUpgradeFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogBuildingUpgradeFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogBuildingUpgradeFlow::lplatid() const {
  return lplatid_;
}
inline void LogBuildingUpgradeFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogBuildingUpgradeFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogBuildingUpgradeFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogBuildingUpgradeFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogBuildingUpgradeFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogBuildingUpgradeFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingUpgradeFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogBuildingUpgradeFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLevel = 6;
inline bool LogBuildingUpgradeFlow::has_llevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_llevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogBuildingUpgradeFlow::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogBuildingUpgradeFlow::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogBuildingUpgradeFlow::llevel() const {
  return llevel_;
}
inline void LogBuildingUpgradeFlow::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LBUILDINGTYPE = 7;
inline bool LogBuildingUpgradeFlow::has_lbuildingtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lbuildingtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogBuildingUpgradeFlow::clear_has_lbuildingtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogBuildingUpgradeFlow::clear_lbuildingtype() {
  lbuildingtype_ = 0;
  clear_has_lbuildingtype();
}
inline ::google::protobuf::int32 LogBuildingUpgradeFlow::lbuildingtype() const {
  return lbuildingtype_;
}
inline void LogBuildingUpgradeFlow::set_lbuildingtype(::google::protobuf::int32 value) {
  set_has_lbuildingtype();
  lbuildingtype_ = value;
}

// required int32 LiId = 8;
inline bool LogBuildingUpgradeFlow::has_liid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_liid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogBuildingUpgradeFlow::clear_has_liid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogBuildingUpgradeFlow::clear_liid() {
  liid_ = 0;
  clear_has_liid();
}
inline ::google::protobuf::int32 LogBuildingUpgradeFlow::liid() const {
  return liid_;
}
inline void LogBuildingUpgradeFlow::set_liid(::google::protobuf::int32 value) {
  set_has_liid();
  liid_ = value;
}

// required int32 LiLevel = 9;
inline bool LogBuildingUpgradeFlow::has_lilevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lilevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogBuildingUpgradeFlow::clear_has_lilevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogBuildingUpgradeFlow::clear_lilevel() {
  lilevel_ = 0;
  clear_has_lilevel();
}
inline ::google::protobuf::int32 LogBuildingUpgradeFlow::lilevel() const {
  return lilevel_;
}
inline void LogBuildingUpgradeFlow::set_lilevel(::google::protobuf::int32 value) {
  set_has_lilevel();
  lilevel_ = value;
}

// optional string LZoneID = 10;
inline bool LogBuildingUpgradeFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogBuildingUpgradeFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogBuildingUpgradeFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogBuildingUpgradeFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogBuildingUpgradeFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogBuildingUpgradeFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogBuildingUpgradeFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingUpgradeFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogBuildingUpgradeFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogTaskFlow

// required string LGameSvrId = 1;
inline bool LogTaskFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogTaskFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogTaskFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogTaskFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogTaskFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogTaskFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogTaskFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogTaskFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTaskFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogTaskFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogTaskFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogTaskFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogTaskFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogTaskFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogTaskFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogTaskFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogTaskFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogTaskFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTaskFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogTaskFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogTaskFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogTaskFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogTaskFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogTaskFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogTaskFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogTaskFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogTaskFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogTaskFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTaskFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogTaskFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogTaskFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogTaskFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogTaskFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogTaskFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogTaskFlow::lplatid() const {
  return lplatid_;
}
inline void LogTaskFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogTaskFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogTaskFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogTaskFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogTaskFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogTaskFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogTaskFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogTaskFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogTaskFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTaskFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogTaskFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLevel = 6;
inline bool LogTaskFlow::has_llevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogTaskFlow::set_has_llevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogTaskFlow::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogTaskFlow::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogTaskFlow::llevel() const {
  return llevel_;
}
inline void LogTaskFlow::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LiTaskType = 7;
inline bool LogTaskFlow::has_litasktype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogTaskFlow::set_has_litasktype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogTaskFlow::clear_has_litasktype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogTaskFlow::clear_litasktype() {
  litasktype_ = 0;
  clear_has_litasktype();
}
inline ::google::protobuf::int32 LogTaskFlow::litasktype() const {
  return litasktype_;
}
inline void LogTaskFlow::set_litasktype(::google::protobuf::int32 value) {
  set_has_litasktype();
  litasktype_ = value;
}

// required int32 LiId = 8;
inline bool LogTaskFlow::has_liid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogTaskFlow::set_has_liid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogTaskFlow::clear_has_liid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogTaskFlow::clear_liid() {
  liid_ = 0;
  clear_has_liid();
}
inline ::google::protobuf::int32 LogTaskFlow::liid() const {
  return liid_;
}
inline void LogTaskFlow::set_liid(::google::protobuf::int32 value) {
  set_has_liid();
  liid_ = value;
}

// optional string LZoneID = 9;
inline bool LogTaskFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogTaskFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogTaskFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogTaskFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogTaskFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogTaskFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogTaskFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogTaskFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTaskFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogTaskFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogTrainingFlow

// required string LGameSvrId = 1;
inline bool LogTrainingFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogTrainingFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogTrainingFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogTrainingFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogTrainingFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogTrainingFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogTrainingFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogTrainingFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTrainingFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogTrainingFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogTrainingFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogTrainingFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogTrainingFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogTrainingFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogTrainingFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogTrainingFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogTrainingFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogTrainingFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTrainingFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogTrainingFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogTrainingFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogTrainingFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogTrainingFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogTrainingFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogTrainingFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogTrainingFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogTrainingFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogTrainingFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTrainingFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogTrainingFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogTrainingFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogTrainingFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogTrainingFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogTrainingFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogTrainingFlow::lplatid() const {
  return lplatid_;
}
inline void LogTrainingFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogTrainingFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogTrainingFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogTrainingFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogTrainingFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogTrainingFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogTrainingFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogTrainingFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogTrainingFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTrainingFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogTrainingFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lchartype = 6;
inline bool LogTrainingFlow::has_lchartype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogTrainingFlow::set_has_lchartype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogTrainingFlow::clear_has_lchartype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogTrainingFlow::clear_lchartype() {
  lchartype_ = 0;
  clear_has_lchartype();
}
inline ::google::protobuf::int32 LogTrainingFlow::lchartype() const {
  return lchartype_;
}
inline void LogTrainingFlow::set_lchartype(::google::protobuf::int32 value) {
  set_has_lchartype();
  lchartype_ = value;
}

// required int32 Lcharlevel = 7;
inline bool LogTrainingFlow::has_lcharlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogTrainingFlow::set_has_lcharlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogTrainingFlow::clear_has_lcharlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogTrainingFlow::clear_lcharlevel() {
  lcharlevel_ = 0;
  clear_has_lcharlevel();
}
inline ::google::protobuf::int32 LogTrainingFlow::lcharlevel() const {
  return lcharlevel_;
}
inline void LogTrainingFlow::set_lcharlevel(::google::protobuf::int32 value) {
  set_has_lcharlevel();
  lcharlevel_ = value;
}

// optional string LZoneID = 8;
inline bool LogTrainingFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogTrainingFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogTrainingFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogTrainingFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogTrainingFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogTrainingFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogTrainingFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogTrainingFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogTrainingFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogTrainingFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogUpdateCharFlow

// required string LGameSvrId = 1;
inline bool LogUpdateCharFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogUpdateCharFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogUpdateCharFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogUpdateCharFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogUpdateCharFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogUpdateCharFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogUpdateCharFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogUpdateCharFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogUpdateCharFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogUpdateCharFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogUpdateCharFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogUpdateCharFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogUpdateCharFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogUpdateCharFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogUpdateCharFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogUpdateCharFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogUpdateCharFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogUpdateCharFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogUpdateCharFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogUpdateCharFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogUpdateCharFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogUpdateCharFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogUpdateCharFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogUpdateCharFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogUpdateCharFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogUpdateCharFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogUpdateCharFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogUpdateCharFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogUpdateCharFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogUpdateCharFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogUpdateCharFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogUpdateCharFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogUpdateCharFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogUpdateCharFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogUpdateCharFlow::lplatid() const {
  return lplatid_;
}
inline void LogUpdateCharFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogUpdateCharFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogUpdateCharFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogUpdateCharFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogUpdateCharFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogUpdateCharFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogUpdateCharFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogUpdateCharFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogUpdateCharFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogUpdateCharFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogUpdateCharFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lchartype = 6;
inline bool LogUpdateCharFlow::has_lchartype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogUpdateCharFlow::set_has_lchartype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogUpdateCharFlow::clear_has_lchartype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogUpdateCharFlow::clear_lchartype() {
  lchartype_ = 0;
  clear_has_lchartype();
}
inline ::google::protobuf::int32 LogUpdateCharFlow::lchartype() const {
  return lchartype_;
}
inline void LogUpdateCharFlow::set_lchartype(::google::protobuf::int32 value) {
  set_has_lchartype();
  lchartype_ = value;
}

// required int32 Lcharlevel = 7;
inline bool LogUpdateCharFlow::has_lcharlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogUpdateCharFlow::set_has_lcharlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogUpdateCharFlow::clear_has_lcharlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogUpdateCharFlow::clear_lcharlevel() {
  lcharlevel_ = 0;
  clear_has_lcharlevel();
}
inline ::google::protobuf::int32 LogUpdateCharFlow::lcharlevel() const {
  return lcharlevel_;
}
inline void LogUpdateCharFlow::set_lcharlevel(::google::protobuf::int32 value) {
  set_has_lcharlevel();
  lcharlevel_ = value;
}

// optional string LZoneID = 8;
inline bool LogUpdateCharFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogUpdateCharFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogUpdateCharFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogUpdateCharFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogUpdateCharFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogUpdateCharFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogUpdateCharFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogUpdateCharFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogUpdateCharFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogUpdateCharFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSelfBattleFlow

// required string LGameSvrId = 1;
inline bool LogSelfBattleFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSelfBattleFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSelfBattleFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSelfBattleFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSelfBattleFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSelfBattleFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSelfBattleFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSelfBattleFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSelfBattleFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSelfBattleFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSelfBattleFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSelfBattleFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSelfBattleFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSelfBattleFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSelfBattleFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSelfBattleFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSelfBattleFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSelfBattleFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSelfBattleFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSelfBattleFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSelfBattleFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSelfBattleFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSelfBattleFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSelfBattleFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSelfBattleFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSelfBattleFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSelfBattleFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSelfBattleFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSelfBattleFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSelfBattleFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSelfBattleFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSelfBattleFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSelfBattleFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSelfBattleFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSelfBattleFlow::lplatid() const {
  return lplatid_;
}
inline void LogSelfBattleFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogSelfBattleFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSelfBattleFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSelfBattleFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSelfBattleFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogSelfBattleFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogSelfBattleFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSelfBattleFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSelfBattleFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSelfBattleFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogSelfBattleFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lcenterlevel = 6;
inline bool LogSelfBattleFlow::has_lcenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSelfBattleFlow::set_has_lcenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSelfBattleFlow::clear_has_lcenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSelfBattleFlow::clear_lcenterlevel() {
  lcenterlevel_ = 0;
  clear_has_lcenterlevel();
}
inline ::google::protobuf::int32 LogSelfBattleFlow::lcenterlevel() const {
  return lcenterlevel_;
}
inline void LogSelfBattleFlow::set_lcenterlevel(::google::protobuf::int32 value) {
  set_has_lcenterlevel();
  lcenterlevel_ = value;
}

// optional string LZoneID = 7;
inline bool LogSelfBattleFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSelfBattleFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSelfBattleFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSelfBattleFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSelfBattleFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSelfBattleFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSelfBattleFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSelfBattleFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSelfBattleFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSelfBattleFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogHeroFlow

// required string LGameSvrId = 1;
inline bool LogHeroFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogHeroFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogHeroFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogHeroFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogHeroFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogHeroFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogHeroFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogHeroFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogHeroFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogHeroFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogHeroFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogHeroFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogHeroFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogHeroFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogHeroFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogHeroFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogHeroFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogHeroFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogHeroFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogHeroFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogHeroFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogHeroFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogHeroFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogHeroFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogHeroFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogHeroFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogHeroFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogHeroFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogHeroFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogHeroFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogHeroFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogHeroFlow::lplatid() const {
  return lplatid_;
}
inline void LogHeroFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogHeroFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogHeroFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogHeroFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogHeroFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogHeroFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogHeroFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogHeroFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogHeroFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogHeroFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lchartype = 6;
inline bool LogHeroFlow::has_lchartype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogHeroFlow::set_has_lchartype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogHeroFlow::clear_has_lchartype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogHeroFlow::clear_lchartype() {
  lchartype_ = 0;
  clear_has_lchartype();
}
inline ::google::protobuf::int32 LogHeroFlow::lchartype() const {
  return lchartype_;
}
inline void LogHeroFlow::set_lchartype(::google::protobuf::int32 value) {
  set_has_lchartype();
  lchartype_ = value;
}

// required int32 LAddOrReduce = 7;
inline bool LogHeroFlow::has_laddorreduce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogHeroFlow::set_has_laddorreduce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogHeroFlow::clear_has_laddorreduce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogHeroFlow::clear_laddorreduce() {
  laddorreduce_ = 0;
  clear_has_laddorreduce();
}
inline ::google::protobuf::int32 LogHeroFlow::laddorreduce() const {
  return laddorreduce_;
}
inline void LogHeroFlow::set_laddorreduce(::google::protobuf::int32 value) {
  set_has_laddorreduce();
  laddorreduce_ = value;
}

// required int32 LGainReason = 8;
inline bool LogHeroFlow::has_lgainreason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogHeroFlow::set_has_lgainreason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogHeroFlow::clear_has_lgainreason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogHeroFlow::clear_lgainreason() {
  lgainreason_ = 0;
  clear_has_lgainreason();
}
inline ::google::protobuf::int32 LogHeroFlow::lgainreason() const {
  return lgainreason_;
}
inline void LogHeroFlow::set_lgainreason(::google::protobuf::int32 value) {
  set_has_lgainreason();
  lgainreason_ = value;
}

// required int32 LiCenterLevel = 9;
inline bool LogHeroFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogHeroFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogHeroFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogHeroFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogHeroFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogHeroFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiLevel = 10;
inline bool LogHeroFlow::has_lilevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogHeroFlow::set_has_lilevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogHeroFlow::clear_has_lilevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogHeroFlow::clear_lilevel() {
  lilevel_ = 0;
  clear_has_lilevel();
}
inline ::google::protobuf::int32 LogHeroFlow::lilevel() const {
  return lilevel_;
}
inline void LogHeroFlow::set_lilevel(::google::protobuf::int32 value) {
  set_has_lilevel();
  lilevel_ = value;
}

// optional string LZoneID = 11;
inline bool LogHeroFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogHeroFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogHeroFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogHeroFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogHeroFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogHeroFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogHeroFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogHeroFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogHeroFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogHeroUpdateFlow

// required string LGameSvrId = 1;
inline bool LogHeroUpdateFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogHeroUpdateFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogHeroUpdateFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogHeroUpdateFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogHeroUpdateFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroUpdateFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogHeroUpdateFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogHeroUpdateFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogHeroUpdateFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogHeroUpdateFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogHeroUpdateFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogHeroUpdateFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogHeroUpdateFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogHeroUpdateFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogHeroUpdateFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroUpdateFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogHeroUpdateFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogHeroUpdateFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogHeroUpdateFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogHeroUpdateFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogHeroUpdateFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogHeroUpdateFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroUpdateFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogHeroUpdateFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogHeroUpdateFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogHeroUpdateFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogHeroUpdateFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogHeroUpdateFlow::lplatid() const {
  return lplatid_;
}
inline void LogHeroUpdateFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogHeroUpdateFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogHeroUpdateFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogHeroUpdateFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogHeroUpdateFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogHeroUpdateFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroUpdateFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogHeroUpdateFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lchartype = 6;
inline bool LogHeroUpdateFlow::has_lchartype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lchartype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogHeroUpdateFlow::clear_has_lchartype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogHeroUpdateFlow::clear_lchartype() {
  lchartype_ = 0;
  clear_has_lchartype();
}
inline ::google::protobuf::int32 LogHeroUpdateFlow::lchartype() const {
  return lchartype_;
}
inline void LogHeroUpdateFlow::set_lchartype(::google::protobuf::int32 value) {
  set_has_lchartype();
  lchartype_ = value;
}

// required int32 LLevel = 7;
inline bool LogHeroUpdateFlow::has_llevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogHeroUpdateFlow::set_has_llevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogHeroUpdateFlow::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogHeroUpdateFlow::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogHeroUpdateFlow::llevel() const {
  return llevel_;
}
inline void LogHeroUpdateFlow::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// required int32 LiCenterLevel = 8;
inline bool LogHeroUpdateFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogHeroUpdateFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogHeroUpdateFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogHeroUpdateFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogHeroUpdateFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogHeroUpdateFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 9;
inline bool LogHeroUpdateFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogHeroUpdateFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogHeroUpdateFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogHeroUpdateFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogHeroUpdateFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogHeroUpdateFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogHeroUpdateFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogHeroUpdateFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogHeroUpdateFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogClanFlow

// required string LGameSvrId = 1;
inline bool LogClanFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogClanFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogClanFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogClanFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogClanFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogClanFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogClanFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogClanFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogClanFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogClanFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogClanFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogClanFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogClanFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogClanFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogClanFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogClanFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogClanFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogClanFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogClanFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogClanFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogClanFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogClanFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogClanFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogClanFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogClanFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogClanFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogClanFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogClanFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogClanFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogClanFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogClanFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogClanFlow::lplatid() const {
  return lplatid_;
}
inline void LogClanFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogClanFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogClanFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogClanFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogClanFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogClanFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogClanFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogClanFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogClanFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogClanFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LCreateOrDel = 6;
inline bool LogClanFlow::has_lcreateordel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogClanFlow::set_has_lcreateordel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogClanFlow::clear_has_lcreateordel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogClanFlow::clear_lcreateordel() {
  lcreateordel_ = 0;
  clear_has_lcreateordel();
}
inline ::google::protobuf::int32 LogClanFlow::lcreateordel() const {
  return lcreateordel_;
}
inline void LogClanFlow::set_lcreateordel(::google::protobuf::int32 value) {
  set_has_lcreateordel();
  lcreateordel_ = value;
}

// required string LClanName = 7;
inline bool LogClanFlow::has_lclanname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogClanFlow::set_has_lclanname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogClanFlow::clear_has_lclanname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogClanFlow::clear_lclanname() {
  if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
    lclanname_->clear();
  }
  clear_has_lclanname();
}
inline const ::std::string& LogClanFlow::lclanname() const {
  return *lclanname_;
}
inline void LogClanFlow::set_lclanname(const ::std::string& value) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(value);
}
inline void LogClanFlow::set_lclanname(const char* value) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(value);
}
inline void LogClanFlow::set_lclanname(const char* value, size_t size) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_lclanname() {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  return lclanname_;
}
inline ::std::string* LogClanFlow::release_lclanname() {
  clear_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lclanname_;
    lclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LTargetId = 8;
inline bool LogClanFlow::has_ltargetid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogClanFlow::set_has_ltargetid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogClanFlow::clear_has_ltargetid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogClanFlow::clear_ltargetid() {
  if (ltargetid_ != &::google::protobuf::internal::kEmptyString) {
    ltargetid_->clear();
  }
  clear_has_ltargetid();
}
inline const ::std::string& LogClanFlow::ltargetid() const {
  return *ltargetid_;
}
inline void LogClanFlow::set_ltargetid(const ::std::string& value) {
  set_has_ltargetid();
  if (ltargetid_ == &::google::protobuf::internal::kEmptyString) {
    ltargetid_ = new ::std::string;
  }
  ltargetid_->assign(value);
}
inline void LogClanFlow::set_ltargetid(const char* value) {
  set_has_ltargetid();
  if (ltargetid_ == &::google::protobuf::internal::kEmptyString) {
    ltargetid_ = new ::std::string;
  }
  ltargetid_->assign(value);
}
inline void LogClanFlow::set_ltargetid(const char* value, size_t size) {
  set_has_ltargetid();
  if (ltargetid_ == &::google::protobuf::internal::kEmptyString) {
    ltargetid_ = new ::std::string;
  }
  ltargetid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_ltargetid() {
  set_has_ltargetid();
  if (ltargetid_ == &::google::protobuf::internal::kEmptyString) {
    ltargetid_ = new ::std::string;
  }
  return ltargetid_;
}
inline ::std::string* LogClanFlow::release_ltargetid() {
  clear_has_ltargetid();
  if (ltargetid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ltargetid_;
    ltargetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 9;
inline bool LogClanFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogClanFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogClanFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogClanFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogClanFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogClanFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogClanFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogClanFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogClanFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogClanDonateFlow

// required string LGameSvrId = 1;
inline bool LogClanDonateFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogClanDonateFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogClanDonateFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogClanDonateFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogClanDonateFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogClanDonateFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogClanDonateFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogClanDonateFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogClanDonateFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogClanDonateFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogClanDonateFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogClanDonateFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogClanDonateFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogClanDonateFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogClanDonateFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogClanDonateFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogClanDonateFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogClanDonateFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogClanDonateFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogClanDonateFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogClanDonateFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogClanDonateFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogClanDonateFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogClanDonateFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogClanDonateFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogClanDonateFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogClanDonateFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogClanDonateFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogClanDonateFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogClanDonateFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogClanDonateFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogClanDonateFlow::lplatid() const {
  return lplatid_;
}
inline void LogClanDonateFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogClanDonateFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogClanDonateFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogClanDonateFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogClanDonateFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogClanDonateFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogClanDonateFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogClanDonateFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogClanDonateFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogClanDonateFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LClanName = 6;
inline bool LogClanDonateFlow::has_lclanname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogClanDonateFlow::set_has_lclanname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogClanDonateFlow::clear_has_lclanname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogClanDonateFlow::clear_lclanname() {
  if (lclanname_ != &::google::protobuf::internal::kEmptyString) {
    lclanname_->clear();
  }
  clear_has_lclanname();
}
inline const ::std::string& LogClanDonateFlow::lclanname() const {
  return *lclanname_;
}
inline void LogClanDonateFlow::set_lclanname(const ::std::string& value) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(value);
}
inline void LogClanDonateFlow::set_lclanname(const char* value) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(value);
}
inline void LogClanDonateFlow::set_lclanname(const char* value, size_t size) {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  lclanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_lclanname() {
  set_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    lclanname_ = new ::std::string;
  }
  return lclanname_;
}
inline ::std::string* LogClanDonateFlow::release_lclanname() {
  clear_has_lclanname();
  if (lclanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lclanname_;
    lclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LCharType = 7;
inline bool LogClanDonateFlow::has_lchartype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogClanDonateFlow::set_has_lchartype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogClanDonateFlow::clear_has_lchartype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogClanDonateFlow::clear_lchartype() {
  lchartype_ = 0;
  clear_has_lchartype();
}
inline ::google::protobuf::int32 LogClanDonateFlow::lchartype() const {
  return lchartype_;
}
inline void LogClanDonateFlow::set_lchartype(::google::protobuf::int32 value) {
  set_has_lchartype();
  lchartype_ = value;
}

// required int32 LCharLevel = 8;
inline bool LogClanDonateFlow::has_lcharlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogClanDonateFlow::set_has_lcharlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogClanDonateFlow::clear_has_lcharlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogClanDonateFlow::clear_lcharlevel() {
  lcharlevel_ = 0;
  clear_has_lcharlevel();
}
inline ::google::protobuf::int32 LogClanDonateFlow::lcharlevel() const {
  return lcharlevel_;
}
inline void LogClanDonateFlow::set_lcharlevel(::google::protobuf::int32 value) {
  set_has_lcharlevel();
  lcharlevel_ = value;
}

// required int32 LiCenterLevel = 9;
inline bool LogClanDonateFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogClanDonateFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogClanDonateFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogClanDonateFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogClanDonateFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogClanDonateFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 10;
inline bool LogClanDonateFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogClanDonateFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogClanDonateFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogClanDonateFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogClanDonateFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogClanDonateFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogClanDonateFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogClanDonateFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogClanDonateFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogClanDonateFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogPlayerLevelFlow

// required string LGameSvrId = 1;
inline bool LogPlayerLevelFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogPlayerLevelFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogPlayerLevelFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogPlayerLevelFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogPlayerLevelFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogPlayerLevelFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLevelFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogPlayerLevelFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogPlayerLevelFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogPlayerLevelFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogPlayerLevelFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogPlayerLevelFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogPlayerLevelFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogPlayerLevelFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLevelFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogPlayerLevelFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLevelFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogPlayerLevelFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogPlayerLevelFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogPlayerLevelFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogPlayerLevelFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogPlayerLevelFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogPlayerLevelFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogPlayerLevelFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLevelFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogPlayerLevelFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogPlayerLevelFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogPlayerLevelFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogPlayerLevelFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogPlayerLevelFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogPlayerLevelFlow::lplatid() const {
  return lplatid_;
}
inline void LogPlayerLevelFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogPlayerLevelFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogPlayerLevelFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogPlayerLevelFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogPlayerLevelFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogPlayerLevelFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogPlayerLevelFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLevelFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogPlayerLevelFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LLevel = 6;
inline bool LogPlayerLevelFlow::has_llevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogPlayerLevelFlow::set_has_llevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogPlayerLevelFlow::clear_has_llevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogPlayerLevelFlow::clear_llevel() {
  llevel_ = 0;
  clear_has_llevel();
}
inline ::google::protobuf::int32 LogPlayerLevelFlow::llevel() const {
  return llevel_;
}
inline void LogPlayerLevelFlow::set_llevel(::google::protobuf::int32 value) {
  set_has_llevel();
  llevel_ = value;
}

// optional string LZoneID = 7;
inline bool LogPlayerLevelFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogPlayerLevelFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogPlayerLevelFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogPlayerLevelFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogPlayerLevelFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogPlayerLevelFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogPlayerLevelFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogPlayerLevelFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogPlayerLevelFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSignInFlow

// required string LGameSvrId = 1;
inline bool LogSignInFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSignInFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSignInFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSignInFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSignInFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSignInFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSignInFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSignInFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSignInFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSignInFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSignInFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSignInFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSignInFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSignInFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSignInFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSignInFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSignInFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSignInFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSignInFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSignInFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSignInFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSignInFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSignInFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSignInFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSignInFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSignInFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSignInFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSignInFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSignInFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSignInFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSignInFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSignInFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSignInFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSignInFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSignInFlow::lplatid() const {
  return lplatid_;
}
inline void LogSignInFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogSignInFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSignInFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSignInFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSignInFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogSignInFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogSignInFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSignInFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSignInFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSignInFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogSignInFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Ldays = 6;
inline bool LogSignInFlow::has_ldays() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSignInFlow::set_has_ldays() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSignInFlow::clear_has_ldays() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSignInFlow::clear_ldays() {
  ldays_ = 0;
  clear_has_ldays();
}
inline ::google::protobuf::int32 LogSignInFlow::ldays() const {
  return ldays_;
}
inline void LogSignInFlow::set_ldays(::google::protobuf::int32 value) {
  set_has_ldays();
  ldays_ = value;
}

// optional string LZoneID = 7;
inline bool LogSignInFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSignInFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSignInFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSignInFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSignInFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSignInFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSignInFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSignInFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSignInFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSignInFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogOnlineNumbers

// required string LGameSvrId = 1;
inline bool LogOnlineNumbers::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogOnlineNumbers::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogOnlineNumbers::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogOnlineNumbers::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogOnlineNumbers::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogOnlineNumbers::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogOnlineNumbers::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogOnlineNumbers::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogOnlineNumbers::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogOnlineNumbers::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogOnlineNumbers::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogOnlineNumbers::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogOnlineNumbers::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogOnlineNumbers::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogOnlineNumbers::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogOnlineNumbers::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogOnlineNumbers::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogOnlineNumbers::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogOnlineNumbers::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogOnlineNumbers::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogOnlineNumbers::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogOnlineNumbers::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogOnlineNumbers::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogOnlineNumbers::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogOnlineNumbers::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogOnlineNumbers::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogOnlineNumbers::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogOnlineNumbers::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogOnlineNumbers::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogOnlineNumbers::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiNumbers = 4;
inline bool LogOnlineNumbers::has_linumbers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogOnlineNumbers::set_has_linumbers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogOnlineNumbers::clear_has_linumbers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogOnlineNumbers::clear_linumbers() {
  linumbers_ = 0;
  clear_has_linumbers();
}
inline ::google::protobuf::int32 LogOnlineNumbers::linumbers() const {
  return linumbers_;
}
inline void LogOnlineNumbers::set_linumbers(::google::protobuf::int32 value) {
  set_has_linumbers();
  linumbers_ = value;
}

// optional string LZoneID = 5;
inline bool LogOnlineNumbers::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogOnlineNumbers::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogOnlineNumbers::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogOnlineNumbers::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogOnlineNumbers::lzoneid() const {
  return *lzoneid_;
}
inline void LogOnlineNumbers::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogOnlineNumbers::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogOnlineNumbers::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogOnlineNumbers::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogOnlineNumbers::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogShareBattle

// required string LGameSvrId = 1;
inline bool LogShareBattle::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogShareBattle::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogShareBattle::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogShareBattle::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogShareBattle::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogShareBattle::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogShareBattle::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogShareBattle::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogShareBattle::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogShareBattle::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogShareBattle::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogShareBattle::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogShareBattle::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogShareBattle::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogShareBattle::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogShareBattle::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogShareBattle::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogShareBattle::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogShareBattle::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogShareBattle::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogShareBattle::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogShareBattle::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogShareBattle::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogShareBattle::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogShareBattle::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogShareBattle::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogShareBattle::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogShareBattle::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogShareBattle::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogShareBattle::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogShareBattle::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogShareBattle::lplatid() const {
  return lplatid_;
}
inline void LogShareBattle::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogShareBattle::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogShareBattle::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogShareBattle::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogShareBattle::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogShareBattle::lvopenid() const {
  return *lvopenid_;
}
inline void LogShareBattle::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogShareBattle::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogShareBattle::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogShareBattle::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiEShareBattleType = 6;
inline bool LogShareBattle::has_liesharebattletype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogShareBattle::set_has_liesharebattletype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogShareBattle::clear_has_liesharebattletype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogShareBattle::clear_liesharebattletype() {
  liesharebattletype_ = 0;
  clear_has_liesharebattletype();
}
inline ::google::protobuf::int32 LogShareBattle::liesharebattletype() const {
  return liesharebattletype_;
}
inline void LogShareBattle::set_liesharebattletype(::google::protobuf::int32 value) {
  set_has_liesharebattletype();
  liesharebattletype_ = value;
}

// required string LvBattleId = 7;
inline bool LogShareBattle::has_lvbattleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogShareBattle::set_has_lvbattleid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogShareBattle::clear_has_lvbattleid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogShareBattle::clear_lvbattleid() {
  if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
    lvbattleid_->clear();
  }
  clear_has_lvbattleid();
}
inline const ::std::string& LogShareBattle::lvbattleid() const {
  return *lvbattleid_;
}
inline void LogShareBattle::set_lvbattleid(const ::std::string& value) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(value);
}
inline void LogShareBattle::set_lvbattleid(const char* value) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(value);
}
inline void LogShareBattle::set_lvbattleid(const char* value, size_t size) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_lvbattleid() {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  return lvbattleid_;
}
inline ::std::string* LogShareBattle::release_lvbattleid() {
  clear_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvbattleid_;
    lvbattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 8;
inline bool LogShareBattle::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogShareBattle::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogShareBattle::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogShareBattle::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogShareBattle::lzoneid() const {
  return *lzoneid_;
}
inline void LogShareBattle::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogShareBattle::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogShareBattle::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogShareBattle::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogShareBattle::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogViewShareBattle

// required string LGameSvrId = 1;
inline bool LogViewShareBattle::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogViewShareBattle::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogViewShareBattle::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogViewShareBattle::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogViewShareBattle::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogViewShareBattle::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogViewShareBattle::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogViewShareBattle::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogViewShareBattle::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogViewShareBattle::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogViewShareBattle::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogViewShareBattle::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogViewShareBattle::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogViewShareBattle::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogViewShareBattle::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogViewShareBattle::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogViewShareBattle::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogViewShareBattle::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogViewShareBattle::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogViewShareBattle::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogViewShareBattle::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogViewShareBattle::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogViewShareBattle::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogViewShareBattle::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogViewShareBattle::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogViewShareBattle::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogViewShareBattle::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogViewShareBattle::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogViewShareBattle::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogViewShareBattle::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogViewShareBattle::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogViewShareBattle::lplatid() const {
  return lplatid_;
}
inline void LogViewShareBattle::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogViewShareBattle::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogViewShareBattle::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogViewShareBattle::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogViewShareBattle::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogViewShareBattle::lvopenid() const {
  return *lvopenid_;
}
inline void LogViewShareBattle::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogViewShareBattle::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogViewShareBattle::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogViewShareBattle::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvBattleId = 6;
inline bool LogViewShareBattle::has_lvbattleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogViewShareBattle::set_has_lvbattleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogViewShareBattle::clear_has_lvbattleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogViewShareBattle::clear_lvbattleid() {
  if (lvbattleid_ != &::google::protobuf::internal::kEmptyString) {
    lvbattleid_->clear();
  }
  clear_has_lvbattleid();
}
inline const ::std::string& LogViewShareBattle::lvbattleid() const {
  return *lvbattleid_;
}
inline void LogViewShareBattle::set_lvbattleid(const ::std::string& value) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(value);
}
inline void LogViewShareBattle::set_lvbattleid(const char* value) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(value);
}
inline void LogViewShareBattle::set_lvbattleid(const char* value, size_t size) {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  lvbattleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_lvbattleid() {
  set_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    lvbattleid_ = new ::std::string;
  }
  return lvbattleid_;
}
inline ::std::string* LogViewShareBattle::release_lvbattleid() {
  clear_has_lvbattleid();
  if (lvbattleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvbattleid_;
    lvbattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 7;
inline bool LogViewShareBattle::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogViewShareBattle::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogViewShareBattle::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogViewShareBattle::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogViewShareBattle::lzoneid() const {
  return *lzoneid_;
}
inline void LogViewShareBattle::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogViewShareBattle::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogViewShareBattle::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogViewShareBattle::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogViewShareBattle::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogActivityFlow

// required string LGameSvrId = 1;
inline bool LogActivityFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogActivityFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogActivityFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogActivityFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogActivityFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogActivityFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogActivityFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogActivityFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogActivityFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogActivityFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogActivityFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogActivityFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogActivityFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogActivityFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogActivityFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogActivityFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogActivityFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogActivityFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogActivityFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogActivityFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogActivityFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogActivityFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogActivityFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogActivityFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogActivityFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogActivityFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogActivityFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogActivityFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogActivityFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogActivityFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogActivityFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogActivityFlow::lplatid() const {
  return lplatid_;
}
inline void LogActivityFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogActivityFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogActivityFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogActivityFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogActivityFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogActivityFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogActivityFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogActivityFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogActivityFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogActivityFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiActivityId = 6;
inline bool LogActivityFlow::has_liactivityid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogActivityFlow::set_has_liactivityid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogActivityFlow::clear_has_liactivityid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogActivityFlow::clear_liactivityid() {
  liactivityid_ = 0;
  clear_has_liactivityid();
}
inline ::google::protobuf::int32 LogActivityFlow::liactivityid() const {
  return liactivityid_;
}
inline void LogActivityFlow::set_liactivityid(::google::protobuf::int32 value) {
  set_has_liactivityid();
  liactivityid_ = value;
}

// required int32 LiActivityLevel = 7;
inline bool LogActivityFlow::has_liactivitylevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogActivityFlow::set_has_liactivitylevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogActivityFlow::clear_has_liactivitylevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogActivityFlow::clear_liactivitylevel() {
  liactivitylevel_ = 0;
  clear_has_liactivitylevel();
}
inline ::google::protobuf::int32 LogActivityFlow::liactivitylevel() const {
  return liactivitylevel_;
}
inline void LogActivityFlow::set_liactivitylevel(::google::protobuf::int32 value) {
  set_has_liactivitylevel();
  liactivitylevel_ = value;
}

// required string LvAward = 8;
inline bool LogActivityFlow::has_lvaward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogActivityFlow::set_has_lvaward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogActivityFlow::clear_has_lvaward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogActivityFlow::clear_lvaward() {
  if (lvaward_ != &::google::protobuf::internal::kEmptyString) {
    lvaward_->clear();
  }
  clear_has_lvaward();
}
inline const ::std::string& LogActivityFlow::lvaward() const {
  return *lvaward_;
}
inline void LogActivityFlow::set_lvaward(const ::std::string& value) {
  set_has_lvaward();
  if (lvaward_ == &::google::protobuf::internal::kEmptyString) {
    lvaward_ = new ::std::string;
  }
  lvaward_->assign(value);
}
inline void LogActivityFlow::set_lvaward(const char* value) {
  set_has_lvaward();
  if (lvaward_ == &::google::protobuf::internal::kEmptyString) {
    lvaward_ = new ::std::string;
  }
  lvaward_->assign(value);
}
inline void LogActivityFlow::set_lvaward(const char* value, size_t size) {
  set_has_lvaward();
  if (lvaward_ == &::google::protobuf::internal::kEmptyString) {
    lvaward_ = new ::std::string;
  }
  lvaward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_lvaward() {
  set_has_lvaward();
  if (lvaward_ == &::google::protobuf::internal::kEmptyString) {
    lvaward_ = new ::std::string;
  }
  return lvaward_;
}
inline ::std::string* LogActivityFlow::release_lvaward() {
  clear_has_lvaward();
  if (lvaward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvaward_;
    lvaward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 9;
inline bool LogActivityFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogActivityFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogActivityFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogActivityFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogActivityFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogActivityFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 10;
inline bool LogActivityFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogActivityFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogActivityFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogActivityFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogActivityFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogActivityFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogActivityFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogActivityFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogActivityFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogActivityFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogFriendDonateRequestFlow

// required string LGameSvrId = 1;
inline bool LogFriendDonateRequestFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogFriendDonateRequestFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogFriendDonateRequestFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogFriendDonateRequestFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogFriendDonateRequestFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogFriendDonateRequestFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogFriendDonateRequestFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogFriendDonateRequestFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogFriendDonateRequestFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogFriendDonateRequestFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogFriendDonateRequestFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogFriendDonateRequestFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogFriendDonateRequestFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogFriendDonateRequestFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogFriendDonateRequestFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogFriendDonateRequestFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogFriendDonateRequestFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogFriendDonateRequestFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogFriendDonateRequestFlow::lplatid() const {
  return lplatid_;
}
inline void LogFriendDonateRequestFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogFriendDonateRequestFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogFriendDonateRequestFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogFriendDonateRequestFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogFriendDonateRequestFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogFriendDonateRequestFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvFriendUid = 6;
inline bool LogFriendDonateRequestFlow::has_lvfrienduid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lvfrienduid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogFriendDonateRequestFlow::clear_has_lvfrienduid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogFriendDonateRequestFlow::clear_lvfrienduid() {
  if (lvfrienduid_ != &::google::protobuf::internal::kEmptyString) {
    lvfrienduid_->clear();
  }
  clear_has_lvfrienduid();
}
inline const ::std::string& LogFriendDonateRequestFlow::lvfrienduid() const {
  return *lvfrienduid_;
}
inline void LogFriendDonateRequestFlow::set_lvfrienduid(const ::std::string& value) {
  set_has_lvfrienduid();
  if (lvfrienduid_ == &::google::protobuf::internal::kEmptyString) {
    lvfrienduid_ = new ::std::string;
  }
  lvfrienduid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvfrienduid(const char* value) {
  set_has_lvfrienduid();
  if (lvfrienduid_ == &::google::protobuf::internal::kEmptyString) {
    lvfrienduid_ = new ::std::string;
  }
  lvfrienduid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lvfrienduid(const char* value, size_t size) {
  set_has_lvfrienduid();
  if (lvfrienduid_ == &::google::protobuf::internal::kEmptyString) {
    lvfrienduid_ = new ::std::string;
  }
  lvfrienduid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_lvfrienduid() {
  set_has_lvfrienduid();
  if (lvfrienduid_ == &::google::protobuf::internal::kEmptyString) {
    lvfrienduid_ = new ::std::string;
  }
  return lvfrienduid_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_lvfrienduid() {
  clear_has_lvfrienduid();
  if (lvfrienduid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvfrienduid_;
    lvfrienduid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCharType = 7;
inline bool LogFriendDonateRequestFlow::has_lichartype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lichartype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogFriendDonateRequestFlow::clear_has_lichartype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogFriendDonateRequestFlow::clear_lichartype() {
  lichartype_ = 0;
  clear_has_lichartype();
}
inline ::google::protobuf::int32 LogFriendDonateRequestFlow::lichartype() const {
  return lichartype_;
}
inline void LogFriendDonateRequestFlow::set_lichartype(::google::protobuf::int32 value) {
  set_has_lichartype();
  lichartype_ = value;
}

// required int32 LiCharLevel = 8;
inline bool LogFriendDonateRequestFlow::has_licharlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_licharlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogFriendDonateRequestFlow::clear_has_licharlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogFriendDonateRequestFlow::clear_licharlevel() {
  licharlevel_ = 0;
  clear_has_licharlevel();
}
inline ::google::protobuf::int32 LogFriendDonateRequestFlow::licharlevel() const {
  return licharlevel_;
}
inline void LogFriendDonateRequestFlow::set_licharlevel(::google::protobuf::int32 value) {
  set_has_licharlevel();
  licharlevel_ = value;
}

// optional string LZoneID = 9;
inline bool LogFriendDonateRequestFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogFriendDonateRequestFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogFriendDonateRequestFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogFriendDonateRequestFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogFriendDonateRequestFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogFriendDonateRequestFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogFriendDonateRequestFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendDonateRequestFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogFriendDonateRequestFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogGameSvrState

// required string LdtEventTime = 1;
inline bool LogGameSvrState::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGameSvrState::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGameSvrState::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGameSvrState::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogGameSvrState::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogGameSvrState::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogGameSvrState::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogGameSvrState::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameSvrState::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogGameSvrState::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameIP = 2;
inline bool LogGameSvrState::has_lvgameip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGameSvrState::set_has_lvgameip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGameSvrState::clear_has_lvgameip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGameSvrState::clear_lvgameip() {
  if (lvgameip_ != &::google::protobuf::internal::kEmptyString) {
    lvgameip_->clear();
  }
  clear_has_lvgameip();
}
inline const ::std::string& LogGameSvrState::lvgameip() const {
  return *lvgameip_;
}
inline void LogGameSvrState::set_lvgameip(const ::std::string& value) {
  set_has_lvgameip();
  if (lvgameip_ == &::google::protobuf::internal::kEmptyString) {
    lvgameip_ = new ::std::string;
  }
  lvgameip_->assign(value);
}
inline void LogGameSvrState::set_lvgameip(const char* value) {
  set_has_lvgameip();
  if (lvgameip_ == &::google::protobuf::internal::kEmptyString) {
    lvgameip_ = new ::std::string;
  }
  lvgameip_->assign(value);
}
inline void LogGameSvrState::set_lvgameip(const char* value, size_t size) {
  set_has_lvgameip();
  if (lvgameip_ == &::google::protobuf::internal::kEmptyString) {
    lvgameip_ = new ::std::string;
  }
  lvgameip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameSvrState::mutable_lvgameip() {
  set_has_lvgameip();
  if (lvgameip_ == &::google::protobuf::internal::kEmptyString) {
    lvgameip_ = new ::std::string;
  }
  return lvgameip_;
}
inline ::std::string* LogGameSvrState::release_lvgameip() {
  clear_has_lvgameip();
  if (lvgameip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameip_;
    lvgameip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 3;
inline bool LogGameSvrState::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGameSvrState::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGameSvrState::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGameSvrState::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogGameSvrState::lzoneid() const {
  return *lzoneid_;
}
inline void LogGameSvrState::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogGameSvrState::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogGameSvrState::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameSvrState::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogGameSvrState::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogBuildingSpeedUpFlow

// required string LGameSvrId = 1;
inline bool LogBuildingSpeedUpFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogBuildingSpeedUpFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogBuildingSpeedUpFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogBuildingSpeedUpFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingSpeedUpFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogBuildingSpeedUpFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogBuildingSpeedUpFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogBuildingSpeedUpFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogBuildingSpeedUpFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogBuildingSpeedUpFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogBuildingSpeedUpFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingSpeedUpFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogBuildingSpeedUpFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogBuildingSpeedUpFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogBuildingSpeedUpFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogBuildingSpeedUpFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogBuildingSpeedUpFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingSpeedUpFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogBuildingSpeedUpFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogBuildingSpeedUpFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogBuildingSpeedUpFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogBuildingSpeedUpFlow::lplatid() const {
  return lplatid_;
}
inline void LogBuildingSpeedUpFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogBuildingSpeedUpFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogBuildingSpeedUpFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogBuildingSpeedUpFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogBuildingSpeedUpFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingSpeedUpFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogBuildingSpeedUpFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiBuildingType = 6;
inline bool LogBuildingSpeedUpFlow::has_libuildingtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_libuildingtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogBuildingSpeedUpFlow::clear_has_libuildingtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogBuildingSpeedUpFlow::clear_libuildingtype() {
  libuildingtype_ = 0;
  clear_has_libuildingtype();
}
inline ::google::protobuf::int32 LogBuildingSpeedUpFlow::libuildingtype() const {
  return libuildingtype_;
}
inline void LogBuildingSpeedUpFlow::set_libuildingtype(::google::protobuf::int32 value) {
  set_has_libuildingtype();
  libuildingtype_ = value;
}

// required int32 LiSpeedUpSource = 7;
inline bool LogBuildingSpeedUpFlow::has_lispeedupsource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lispeedupsource() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lispeedupsource() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogBuildingSpeedUpFlow::clear_lispeedupsource() {
  lispeedupsource_ = 0;
  clear_has_lispeedupsource();
}
inline ::google::protobuf::int32 LogBuildingSpeedUpFlow::lispeedupsource() const {
  return lispeedupsource_;
}
inline void LogBuildingSpeedUpFlow::set_lispeedupsource(::google::protobuf::int32 value) {
  set_has_lispeedupsource();
  lispeedupsource_ = value;
}

// optional string LZoneID = 8;
inline bool LogBuildingSpeedUpFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogBuildingSpeedUpFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogBuildingSpeedUpFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogBuildingSpeedUpFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogBuildingSpeedUpFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogBuildingSpeedUpFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogBuildingSpeedUpFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogBuildingSpeedUpFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogBuildingSpeedUpFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSpellCreateFlow

// required string LGameSvrId = 1;
inline bool LogSpellCreateFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSpellCreateFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSpellCreateFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSpellCreateFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSpellCreateFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSpellCreateFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSpellCreateFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSpellCreateFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellCreateFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSpellCreateFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSpellCreateFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSpellCreateFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSpellCreateFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSpellCreateFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSpellCreateFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSpellCreateFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSpellCreateFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSpellCreateFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellCreateFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSpellCreateFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSpellCreateFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSpellCreateFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSpellCreateFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSpellCreateFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSpellCreateFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSpellCreateFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSpellCreateFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSpellCreateFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellCreateFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSpellCreateFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSpellCreateFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSpellCreateFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSpellCreateFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSpellCreateFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSpellCreateFlow::lplatid() const {
  return lplatid_;
}
inline void LogSpellCreateFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogSpellCreateFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSpellCreateFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSpellCreateFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSpellCreateFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogSpellCreateFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogSpellCreateFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSpellCreateFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSpellCreateFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellCreateFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogSpellCreateFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogSpellCreateFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSpellCreateFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSpellCreateFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSpellCreateFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogSpellCreateFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogSpellCreateFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiSpellType = 7;
inline bool LogSpellCreateFlow::has_lispelltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSpellCreateFlow::set_has_lispelltype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSpellCreateFlow::clear_has_lispelltype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSpellCreateFlow::clear_lispelltype() {
  lispelltype_ = 0;
  clear_has_lispelltype();
}
inline ::google::protobuf::int32 LogSpellCreateFlow::lispelltype() const {
  return lispelltype_;
}
inline void LogSpellCreateFlow::set_lispelltype(::google::protobuf::int32 value) {
  set_has_lispelltype();
  lispelltype_ = value;
}

// required int32 LiSpellLevel = 8;
inline bool LogSpellCreateFlow::has_lispelllevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogSpellCreateFlow::set_has_lispelllevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogSpellCreateFlow::clear_has_lispelllevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogSpellCreateFlow::clear_lispelllevel() {
  lispelllevel_ = 0;
  clear_has_lispelllevel();
}
inline ::google::protobuf::int32 LogSpellCreateFlow::lispelllevel() const {
  return lispelllevel_;
}
inline void LogSpellCreateFlow::set_lispelllevel(::google::protobuf::int32 value) {
  set_has_lispelllevel();
  lispelllevel_ = value;
}

// optional string LZoneID = 9;
inline bool LogSpellCreateFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogSpellCreateFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogSpellCreateFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogSpellCreateFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSpellCreateFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSpellCreateFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSpellCreateFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSpellCreateFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellCreateFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSpellCreateFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogStrategyCreateFlow

// required string LGameSvrId = 1;
inline bool LogStrategyCreateFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogStrategyCreateFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogStrategyCreateFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogStrategyCreateFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogStrategyCreateFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogStrategyCreateFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyCreateFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogStrategyCreateFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogStrategyCreateFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogStrategyCreateFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogStrategyCreateFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogStrategyCreateFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogStrategyCreateFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogStrategyCreateFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogStrategyCreateFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogStrategyCreateFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyCreateFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogStrategyCreateFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogStrategyCreateFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogStrategyCreateFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogStrategyCreateFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogStrategyCreateFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogStrategyCreateFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogStrategyCreateFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyCreateFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogStrategyCreateFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogStrategyCreateFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogStrategyCreateFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogStrategyCreateFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogStrategyCreateFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogStrategyCreateFlow::lplatid() const {
  return lplatid_;
}
inline void LogStrategyCreateFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogStrategyCreateFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogStrategyCreateFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogStrategyCreateFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogStrategyCreateFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogStrategyCreateFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogStrategyCreateFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyCreateFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogStrategyCreateFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogStrategyCreateFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogStrategyCreateFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogStrategyCreateFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogStrategyCreateFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogStrategyCreateFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogStrategyCreateFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiStrategyType = 7;
inline bool LogStrategyCreateFlow::has_listrategytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogStrategyCreateFlow::set_has_listrategytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogStrategyCreateFlow::clear_has_listrategytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogStrategyCreateFlow::clear_listrategytype() {
  listrategytype_ = 0;
  clear_has_listrategytype();
}
inline ::google::protobuf::int32 LogStrategyCreateFlow::listrategytype() const {
  return listrategytype_;
}
inline void LogStrategyCreateFlow::set_listrategytype(::google::protobuf::int32 value) {
  set_has_listrategytype();
  listrategytype_ = value;
}

// required int32 LiStrategyLevel = 8;
inline bool LogStrategyCreateFlow::has_listrategylevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogStrategyCreateFlow::set_has_listrategylevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogStrategyCreateFlow::clear_has_listrategylevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogStrategyCreateFlow::clear_listrategylevel() {
  listrategylevel_ = 0;
  clear_has_listrategylevel();
}
inline ::google::protobuf::int32 LogStrategyCreateFlow::listrategylevel() const {
  return listrategylevel_;
}
inline void LogStrategyCreateFlow::set_listrategylevel(::google::protobuf::int32 value) {
  set_has_listrategylevel();
  listrategylevel_ = value;
}

// optional string LZoneID = 9;
inline bool LogStrategyCreateFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogStrategyCreateFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogStrategyCreateFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogStrategyCreateFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogStrategyCreateFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogStrategyCreateFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogStrategyCreateFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyCreateFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogStrategyCreateFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSuperLeagueFlow

// required string LGameSvrId = 1;
inline bool LogSuperLeagueFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSuperLeagueFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSuperLeagueFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSuperLeagueFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSuperLeagueFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSuperLeagueFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSuperLeagueFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSuperLeagueFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSuperLeagueFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSuperLeagueFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSuperLeagueFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSuperLeagueFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSuperLeagueFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSuperLeagueFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSuperLeagueFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSuperLeagueFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSuperLeagueFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSuperLeagueFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSuperLeagueFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSuperLeagueFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSuperLeagueFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSuperLeagueFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSuperLeagueFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSuperLeagueFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSuperLeagueFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSuperLeagueFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSuperLeagueFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSuperLeagueFlow::lplatid() const {
  return lplatid_;
}
inline void LogSuperLeagueFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogSuperLeagueFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSuperLeagueFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSuperLeagueFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogSuperLeagueFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogSuperLeagueFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSuperLeagueFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogSuperLeagueFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogSuperLeagueFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSuperLeagueFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSuperLeagueFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSuperLeagueFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogSuperLeagueFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogSuperLeagueFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiOldSeg = 7;
inline bool LogSuperLeagueFlow::has_lioldseg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lioldseg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSuperLeagueFlow::clear_has_lioldseg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSuperLeagueFlow::clear_lioldseg() {
  lioldseg_ = 0;
  clear_has_lioldseg();
}
inline ::google::protobuf::int32 LogSuperLeagueFlow::lioldseg() const {
  return lioldseg_;
}
inline void LogSuperLeagueFlow::set_lioldseg(::google::protobuf::int32 value) {
  set_has_lioldseg();
  lioldseg_ = value;
}

// required int32 LiNewSeg = 8;
inline bool LogSuperLeagueFlow::has_linewseg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogSuperLeagueFlow::set_has_linewseg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogSuperLeagueFlow::clear_has_linewseg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogSuperLeagueFlow::clear_linewseg() {
  linewseg_ = 0;
  clear_has_linewseg();
}
inline ::google::protobuf::int32 LogSuperLeagueFlow::linewseg() const {
  return linewseg_;
}
inline void LogSuperLeagueFlow::set_linewseg(::google::protobuf::int32 value) {
  set_has_linewseg();
  linewseg_ = value;
}

// optional string LZoneID = 9;
inline bool LogSuperLeagueFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogSuperLeagueFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogSuperLeagueFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogSuperLeagueFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSuperLeagueFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSuperLeagueFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSuperLeagueFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSuperLeagueFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSuperLeagueFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogSpellUseFlow

// required string LGameSvrId = 1;
inline bool LogSpellUseFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSpellUseFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSpellUseFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSpellUseFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogSpellUseFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogSpellUseFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSpellUseFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogSpellUseFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellUseFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogSpellUseFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogSpellUseFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSpellUseFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSpellUseFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSpellUseFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogSpellUseFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogSpellUseFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSpellUseFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogSpellUseFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellUseFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogSpellUseFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogSpellUseFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogSpellUseFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogSpellUseFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogSpellUseFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogSpellUseFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogSpellUseFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSpellUseFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogSpellUseFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellUseFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogSpellUseFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogSpellUseFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogSpellUseFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogSpellUseFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogSpellUseFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogSpellUseFlow::lplatid() const {
  return lplatid_;
}
inline void LogSpellUseFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogSpellUseFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogSpellUseFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogSpellUseFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogSpellUseFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogSpellUseFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogSpellUseFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSpellUseFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogSpellUseFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellUseFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogSpellUseFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogSpellUseFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogSpellUseFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogSpellUseFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogSpellUseFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogSpellUseFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogSpellUseFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiSpellType = 7;
inline bool LogSpellUseFlow::has_lispelltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogSpellUseFlow::set_has_lispelltype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogSpellUseFlow::clear_has_lispelltype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogSpellUseFlow::clear_lispelltype() {
  lispelltype_ = 0;
  clear_has_lispelltype();
}
inline ::google::protobuf::int32 LogSpellUseFlow::lispelltype() const {
  return lispelltype_;
}
inline void LogSpellUseFlow::set_lispelltype(::google::protobuf::int32 value) {
  set_has_lispelltype();
  lispelltype_ = value;
}

// required int32 LiSpellLevel = 8;
inline bool LogSpellUseFlow::has_lispelllevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogSpellUseFlow::set_has_lispelllevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogSpellUseFlow::clear_has_lispelllevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogSpellUseFlow::clear_lispelllevel() {
  lispelllevel_ = 0;
  clear_has_lispelllevel();
}
inline ::google::protobuf::int32 LogSpellUseFlow::lispelllevel() const {
  return lispelllevel_;
}
inline void LogSpellUseFlow::set_lispelllevel(::google::protobuf::int32 value) {
  set_has_lispelllevel();
  lispelllevel_ = value;
}

// required int32 LiBattleType = 9;
inline bool LogSpellUseFlow::has_libattletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogSpellUseFlow::set_has_libattletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogSpellUseFlow::clear_has_libattletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogSpellUseFlow::clear_libattletype() {
  libattletype_ = 0;
  clear_has_libattletype();
}
inline ::google::protobuf::int32 LogSpellUseFlow::libattletype() const {
  return libattletype_;
}
inline void LogSpellUseFlow::set_libattletype(::google::protobuf::int32 value) {
  set_has_libattletype();
  libattletype_ = value;
}

// optional string LZoneID = 10;
inline bool LogSpellUseFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogSpellUseFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogSpellUseFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogSpellUseFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogSpellUseFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogSpellUseFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSpellUseFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogSpellUseFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogSpellUseFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogSpellUseFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogStrategyUseFlow

// required string LGameSvrId = 1;
inline bool LogStrategyUseFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogStrategyUseFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogStrategyUseFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogStrategyUseFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogStrategyUseFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogStrategyUseFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogStrategyUseFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogStrategyUseFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyUseFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogStrategyUseFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogStrategyUseFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogStrategyUseFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogStrategyUseFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogStrategyUseFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogStrategyUseFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogStrategyUseFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogStrategyUseFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogStrategyUseFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyUseFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogStrategyUseFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogStrategyUseFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogStrategyUseFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogStrategyUseFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogStrategyUseFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogStrategyUseFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogStrategyUseFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogStrategyUseFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogStrategyUseFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyUseFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogStrategyUseFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogStrategyUseFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogStrategyUseFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogStrategyUseFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogStrategyUseFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogStrategyUseFlow::lplatid() const {
  return lplatid_;
}
inline void LogStrategyUseFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogStrategyUseFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogStrategyUseFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogStrategyUseFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogStrategyUseFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogStrategyUseFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogStrategyUseFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogStrategyUseFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogStrategyUseFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyUseFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogStrategyUseFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogStrategyUseFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogStrategyUseFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogStrategyUseFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogStrategyUseFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogStrategyUseFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogStrategyUseFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// required int32 LiStrategyType = 7;
inline bool LogStrategyUseFlow::has_listrategytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogStrategyUseFlow::set_has_listrategytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogStrategyUseFlow::clear_has_listrategytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogStrategyUseFlow::clear_listrategytype() {
  listrategytype_ = 0;
  clear_has_listrategytype();
}
inline ::google::protobuf::int32 LogStrategyUseFlow::listrategytype() const {
  return listrategytype_;
}
inline void LogStrategyUseFlow::set_listrategytype(::google::protobuf::int32 value) {
  set_has_listrategytype();
  listrategytype_ = value;
}

// required int32 LiStrategyLevel = 8;
inline bool LogStrategyUseFlow::has_listrategylevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogStrategyUseFlow::set_has_listrategylevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogStrategyUseFlow::clear_has_listrategylevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogStrategyUseFlow::clear_listrategylevel() {
  listrategylevel_ = 0;
  clear_has_listrategylevel();
}
inline ::google::protobuf::int32 LogStrategyUseFlow::listrategylevel() const {
  return listrategylevel_;
}
inline void LogStrategyUseFlow::set_listrategylevel(::google::protobuf::int32 value) {
  set_has_listrategylevel();
  listrategylevel_ = value;
}

// required int32 LiBattleType = 9;
inline bool LogStrategyUseFlow::has_libattletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogStrategyUseFlow::set_has_libattletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogStrategyUseFlow::clear_has_libattletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogStrategyUseFlow::clear_libattletype() {
  libattletype_ = 0;
  clear_has_libattletype();
}
inline ::google::protobuf::int32 LogStrategyUseFlow::libattletype() const {
  return libattletype_;
}
inline void LogStrategyUseFlow::set_libattletype(::google::protobuf::int32 value) {
  set_has_libattletype();
  libattletype_ = value;
}

// optional string LZoneID = 10;
inline bool LogStrategyUseFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogStrategyUseFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogStrategyUseFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogStrategyUseFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogStrategyUseFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogStrategyUseFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogStrategyUseFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogStrategyUseFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStrategyUseFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogStrategyUseFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogReceiveCharFlow

// required string LGameSvrId = 1;
inline bool LogReceiveCharFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogReceiveCharFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogReceiveCharFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogReceiveCharFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogReceiveCharFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogReceiveCharFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogReceiveCharFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogReceiveCharFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogReceiveCharFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogReceiveCharFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogReceiveCharFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogReceiveCharFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogReceiveCharFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogReceiveCharFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogReceiveCharFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogReceiveCharFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogReceiveCharFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogReceiveCharFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogReceiveCharFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogReceiveCharFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogReceiveCharFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogReceiveCharFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogReceiveCharFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogReceiveCharFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogReceiveCharFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogReceiveCharFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogReceiveCharFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogReceiveCharFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogReceiveCharFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogReceiveCharFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogReceiveCharFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogReceiveCharFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogReceiveCharFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogReceiveCharFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogReceiveCharFlow::lplatid() const {
  return lplatid_;
}
inline void LogReceiveCharFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogReceiveCharFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogReceiveCharFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogReceiveCharFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogReceiveCharFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogReceiveCharFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogReceiveCharFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogReceiveCharFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogReceiveCharFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogReceiveCharFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogReceiveCharFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Lichartype = 6;
inline bool LogReceiveCharFlow::has_lichartype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogReceiveCharFlow::set_has_lichartype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogReceiveCharFlow::clear_has_lichartype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogReceiveCharFlow::clear_lichartype() {
  lichartype_ = 0;
  clear_has_lichartype();
}
inline ::google::protobuf::int32 LogReceiveCharFlow::lichartype() const {
  return lichartype_;
}
inline void LogReceiveCharFlow::set_lichartype(::google::protobuf::int32 value) {
  set_has_lichartype();
  lichartype_ = value;
}

// required int32 Licharlevel = 7;
inline bool LogReceiveCharFlow::has_licharlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogReceiveCharFlow::set_has_licharlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogReceiveCharFlow::clear_has_licharlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogReceiveCharFlow::clear_licharlevel() {
  licharlevel_ = 0;
  clear_has_licharlevel();
}
inline ::google::protobuf::int32 LogReceiveCharFlow::licharlevel() const {
  return licharlevel_;
}
inline void LogReceiveCharFlow::set_licharlevel(::google::protobuf::int32 value) {
  set_has_licharlevel();
  licharlevel_ = value;
}

// required int32 Lisource = 8;
inline bool LogReceiveCharFlow::has_lisource() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogReceiveCharFlow::set_has_lisource() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogReceiveCharFlow::clear_has_lisource() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogReceiveCharFlow::clear_lisource() {
  lisource_ = 0;
  clear_has_lisource();
}
inline ::google::protobuf::int32 LogReceiveCharFlow::lisource() const {
  return lisource_;
}
inline void LogReceiveCharFlow::set_lisource(::google::protobuf::int32 value) {
  set_has_lisource();
  lisource_ = value;
}

// required int32 LiCenterLevel = 9;
inline bool LogReceiveCharFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogReceiveCharFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogReceiveCharFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogReceiveCharFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogReceiveCharFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogReceiveCharFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional string LZoneID = 10;
inline bool LogReceiveCharFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogReceiveCharFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogReceiveCharFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogReceiveCharFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogReceiveCharFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogReceiveCharFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogReceiveCharFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogReceiveCharFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogReceiveCharFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogReceiveCharFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogFriendHouseFlow

// required string LGameSvrId = 1;
inline bool LogFriendHouseFlow::has_lgamesvrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogFriendHouseFlow::set_has_lgamesvrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogFriendHouseFlow::clear_has_lgamesvrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogFriendHouseFlow::clear_lgamesvrid() {
  if (lgamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_->clear();
  }
  clear_has_lgamesvrid();
}
inline const ::std::string& LogFriendHouseFlow::lgamesvrid() const {
  return *lgamesvrid_;
}
inline void LogFriendHouseFlow::set_lgamesvrid(const ::std::string& value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogFriendHouseFlow::set_lgamesvrid(const char* value) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(value);
}
inline void LogFriendHouseFlow::set_lgamesvrid(const char* value, size_t size) {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  lgamesvrid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendHouseFlow::mutable_lgamesvrid() {
  set_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    lgamesvrid_ = new ::std::string;
  }
  return lgamesvrid_;
}
inline ::std::string* LogFriendHouseFlow::release_lgamesvrid() {
  clear_has_lgamesvrid();
  if (lgamesvrid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lgamesvrid_;
    lgamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LdtEventTime = 2;
inline bool LogFriendHouseFlow::has_ldteventtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogFriendHouseFlow::set_has_ldteventtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogFriendHouseFlow::clear_has_ldteventtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogFriendHouseFlow::clear_ldteventtime() {
  if (ldteventtime_ != &::google::protobuf::internal::kEmptyString) {
    ldteventtime_->clear();
  }
  clear_has_ldteventtime();
}
inline const ::std::string& LogFriendHouseFlow::ldteventtime() const {
  return *ldteventtime_;
}
inline void LogFriendHouseFlow::set_ldteventtime(const ::std::string& value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogFriendHouseFlow::set_ldteventtime(const char* value) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(value);
}
inline void LogFriendHouseFlow::set_ldteventtime(const char* value, size_t size) {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  ldteventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendHouseFlow::mutable_ldteventtime() {
  set_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    ldteventtime_ = new ::std::string;
  }
  return ldteventtime_;
}
inline ::std::string* LogFriendHouseFlow::release_ldteventtime() {
  clear_has_ldteventtime();
  if (ldteventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldteventtime_;
    ldteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string LvGameAppid = 3;
inline bool LogFriendHouseFlow::has_lvgameappid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogFriendHouseFlow::set_has_lvgameappid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogFriendHouseFlow::clear_has_lvgameappid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogFriendHouseFlow::clear_lvgameappid() {
  if (lvgameappid_ != &::google::protobuf::internal::kEmptyString) {
    lvgameappid_->clear();
  }
  clear_has_lvgameappid();
}
inline const ::std::string& LogFriendHouseFlow::lvgameappid() const {
  return *lvgameappid_;
}
inline void LogFriendHouseFlow::set_lvgameappid(const ::std::string& value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogFriendHouseFlow::set_lvgameappid(const char* value) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(value);
}
inline void LogFriendHouseFlow::set_lvgameappid(const char* value, size_t size) {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  lvgameappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendHouseFlow::mutable_lvgameappid() {
  set_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    lvgameappid_ = new ::std::string;
  }
  return lvgameappid_;
}
inline ::std::string* LogFriendHouseFlow::release_lvgameappid() {
  clear_has_lvgameappid();
  if (lvgameappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvgameappid_;
    lvgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LPlatID = 4;
inline bool LogFriendHouseFlow::has_lplatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogFriendHouseFlow::set_has_lplatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogFriendHouseFlow::clear_has_lplatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogFriendHouseFlow::clear_lplatid() {
  lplatid_ = 0;
  clear_has_lplatid();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::lplatid() const {
  return lplatid_;
}
inline void LogFriendHouseFlow::set_lplatid(::google::protobuf::int32 value) {
  set_has_lplatid();
  lplatid_ = value;
}

// required string Lvopenid = 5;
inline bool LogFriendHouseFlow::has_lvopenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogFriendHouseFlow::set_has_lvopenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogFriendHouseFlow::clear_has_lvopenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogFriendHouseFlow::clear_lvopenid() {
  if (lvopenid_ != &::google::protobuf::internal::kEmptyString) {
    lvopenid_->clear();
  }
  clear_has_lvopenid();
}
inline const ::std::string& LogFriendHouseFlow::lvopenid() const {
  return *lvopenid_;
}
inline void LogFriendHouseFlow::set_lvopenid(const ::std::string& value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogFriendHouseFlow::set_lvopenid(const char* value) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(value);
}
inline void LogFriendHouseFlow::set_lvopenid(const char* value, size_t size) {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  lvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendHouseFlow::mutable_lvopenid() {
  set_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    lvopenid_ = new ::std::string;
  }
  return lvopenid_;
}
inline ::std::string* LogFriendHouseFlow::release_lvopenid() {
  clear_has_lvopenid();
  if (lvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lvopenid_;
    lvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 LiCenterLevel = 6;
inline bool LogFriendHouseFlow::has_licenterlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogFriendHouseFlow::set_has_licenterlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogFriendHouseFlow::clear_has_licenterlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogFriendHouseFlow::clear_licenterlevel() {
  licenterlevel_ = 0;
  clear_has_licenterlevel();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::licenterlevel() const {
  return licenterlevel_;
}
inline void LogFriendHouseFlow::set_licenterlevel(::google::protobuf::int32 value) {
  set_has_licenterlevel();
  licenterlevel_ = value;
}

// optional int32 LiResType1 = 7 [default = 0];
inline bool LogFriendHouseFlow::has_lirestype1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogFriendHouseFlow::set_has_lirestype1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogFriendHouseFlow::clear_has_lirestype1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogFriendHouseFlow::clear_lirestype1() {
  lirestype1_ = 0;
  clear_has_lirestype1();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::lirestype1() const {
  return lirestype1_;
}
inline void LogFriendHouseFlow::set_lirestype1(::google::protobuf::int32 value) {
  set_has_lirestype1();
  lirestype1_ = value;
}

// optional int32 LiResNum1 = 8 [default = 0];
inline bool LogFriendHouseFlow::has_liresnum1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogFriendHouseFlow::set_has_liresnum1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogFriendHouseFlow::clear_has_liresnum1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogFriendHouseFlow::clear_liresnum1() {
  liresnum1_ = 0;
  clear_has_liresnum1();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::liresnum1() const {
  return liresnum1_;
}
inline void LogFriendHouseFlow::set_liresnum1(::google::protobuf::int32 value) {
  set_has_liresnum1();
  liresnum1_ = value;
}

// optional int32 LiResType2 = 9 [default = 0];
inline bool LogFriendHouseFlow::has_lirestype2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogFriendHouseFlow::set_has_lirestype2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogFriendHouseFlow::clear_has_lirestype2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogFriendHouseFlow::clear_lirestype2() {
  lirestype2_ = 0;
  clear_has_lirestype2();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::lirestype2() const {
  return lirestype2_;
}
inline void LogFriendHouseFlow::set_lirestype2(::google::protobuf::int32 value) {
  set_has_lirestype2();
  lirestype2_ = value;
}

// optional int32 LiResNum2 = 10 [default = 0];
inline bool LogFriendHouseFlow::has_liresnum2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogFriendHouseFlow::set_has_liresnum2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogFriendHouseFlow::clear_has_liresnum2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogFriendHouseFlow::clear_liresnum2() {
  liresnum2_ = 0;
  clear_has_liresnum2();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::liresnum2() const {
  return liresnum2_;
}
inline void LogFriendHouseFlow::set_liresnum2(::google::protobuf::int32 value) {
  set_has_liresnum2();
  liresnum2_ = value;
}

// optional int32 LiResType3 = 11 [default = 0];
inline bool LogFriendHouseFlow::has_lirestype3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogFriendHouseFlow::set_has_lirestype3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogFriendHouseFlow::clear_has_lirestype3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogFriendHouseFlow::clear_lirestype3() {
  lirestype3_ = 0;
  clear_has_lirestype3();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::lirestype3() const {
  return lirestype3_;
}
inline void LogFriendHouseFlow::set_lirestype3(::google::protobuf::int32 value) {
  set_has_lirestype3();
  lirestype3_ = value;
}

// optional int32 LiResNum3 = 12 [default = 0];
inline bool LogFriendHouseFlow::has_liresnum3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogFriendHouseFlow::set_has_liresnum3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogFriendHouseFlow::clear_has_liresnum3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogFriendHouseFlow::clear_liresnum3() {
  liresnum3_ = 0;
  clear_has_liresnum3();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::liresnum3() const {
  return liresnum3_;
}
inline void LogFriendHouseFlow::set_liresnum3(::google::protobuf::int32 value) {
  set_has_liresnum3();
  liresnum3_ = value;
}

// optional int32 LiResType4 = 13 [default = 0];
inline bool LogFriendHouseFlow::has_lirestype4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogFriendHouseFlow::set_has_lirestype4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogFriendHouseFlow::clear_has_lirestype4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogFriendHouseFlow::clear_lirestype4() {
  lirestype4_ = 0;
  clear_has_lirestype4();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::lirestype4() const {
  return lirestype4_;
}
inline void LogFriendHouseFlow::set_lirestype4(::google::protobuf::int32 value) {
  set_has_lirestype4();
  lirestype4_ = value;
}

// optional int32 LiResNum4 = 14 [default = 0];
inline bool LogFriendHouseFlow::has_liresnum4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogFriendHouseFlow::set_has_liresnum4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogFriendHouseFlow::clear_has_liresnum4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogFriendHouseFlow::clear_liresnum4() {
  liresnum4_ = 0;
  clear_has_liresnum4();
}
inline ::google::protobuf::int32 LogFriendHouseFlow::liresnum4() const {
  return liresnum4_;
}
inline void LogFriendHouseFlow::set_liresnum4(::google::protobuf::int32 value) {
  set_has_liresnum4();
  liresnum4_ = value;
}

// optional string LZoneID = 15;
inline bool LogFriendHouseFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogFriendHouseFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogFriendHouseFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogFriendHouseFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogFriendHouseFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogFriendHouseFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogFriendHouseFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogFriendHouseFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogFriendHouseFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogFriendHouseFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogCommonFlow

// required string LDetail = 1;
inline bool LogCommonFlow::has_ldetail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogCommonFlow::set_has_ldetail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogCommonFlow::clear_has_ldetail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogCommonFlow::clear_ldetail() {
  if (ldetail_ != &::google::protobuf::internal::kEmptyString) {
    ldetail_->clear();
  }
  clear_has_ldetail();
}
inline const ::std::string& LogCommonFlow::ldetail() const {
  return *ldetail_;
}
inline void LogCommonFlow::set_ldetail(const ::std::string& value) {
  set_has_ldetail();
  if (ldetail_ == &::google::protobuf::internal::kEmptyString) {
    ldetail_ = new ::std::string;
  }
  ldetail_->assign(value);
}
inline void LogCommonFlow::set_ldetail(const char* value) {
  set_has_ldetail();
  if (ldetail_ == &::google::protobuf::internal::kEmptyString) {
    ldetail_ = new ::std::string;
  }
  ldetail_->assign(value);
}
inline void LogCommonFlow::set_ldetail(const char* value, size_t size) {
  set_has_ldetail();
  if (ldetail_ == &::google::protobuf::internal::kEmptyString) {
    ldetail_ = new ::std::string;
  }
  ldetail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogCommonFlow::mutable_ldetail() {
  set_has_ldetail();
  if (ldetail_ == &::google::protobuf::internal::kEmptyString) {
    ldetail_ = new ::std::string;
  }
  return ldetail_;
}
inline ::std::string* LogCommonFlow::release_ldetail() {
  clear_has_ldetail();
  if (ldetail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ldetail_;
    ldetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 2;
inline bool LogCommonFlow::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogCommonFlow::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogCommonFlow::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogCommonFlow::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& LogCommonFlow::lzoneid() const {
  return *lzoneid_;
}
inline void LogCommonFlow::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogCommonFlow::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void LogCommonFlow::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogCommonFlow::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* LogCommonFlow::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TpLogin

// required string TvOpenid = 1;
inline bool TpLogin::has_tvopenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpLogin::set_has_tvopenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpLogin::clear_has_tvopenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpLogin::clear_tvopenid() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    tvopenid_->clear();
  }
  clear_has_tvopenid();
}
inline const ::std::string& TpLogin::tvopenid() const {
  return *tvopenid_;
}
inline void TpLogin::set_tvopenid(const ::std::string& value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpLogin::set_tvopenid(const char* value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpLogin::set_tvopenid(const char* value, size_t size) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpLogin::mutable_tvopenid() {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  return tvopenid_;
}
inline ::std::string* TpLogin::release_tvopenid() {
  clear_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tvopenid_;
    tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nChannel = 2;
inline bool TpLogin::has_nchannel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpLogin::set_has_nchannel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpLogin::clear_has_nchannel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpLogin::clear_nchannel() {
  nchannel_ = 0;
  clear_has_nchannel();
}
inline ::google::protobuf::int32 TpLogin::nchannel() const {
  return nchannel_;
}
inline void TpLogin::set_nchannel(::google::protobuf::int32 value) {
  set_has_nchannel();
  nchannel_ = value;
}

// required uint64 nConnId = 3;
inline bool TpLogin::has_nconnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpLogin::set_has_nconnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TpLogin::clear_has_nconnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TpLogin::clear_nconnid() {
  nconnid_ = GOOGLE_ULONGLONG(0);
  clear_has_nconnid();
}
inline ::google::protobuf::uint64 TpLogin::nconnid() const {
  return nconnid_;
}
inline void TpLogin::set_nconnid(::google::protobuf::uint64 value) {
  set_has_nconnid();
  nconnid_ = value;
}

// required int32 TClientVer = 4;
inline bool TpLogin::has_tclientver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TpLogin::set_has_tclientver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TpLogin::clear_has_tclientver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TpLogin::clear_tclientver() {
  tclientver_ = 0;
  clear_has_tclientver();
}
inline ::google::protobuf::int32 TpLogin::tclientver() const {
  return tclientver_;
}
inline void TpLogin::set_tclientver(::google::protobuf::int32 value) {
  set_has_tclientver();
  tclientver_ = value;
}

// required uint32 TClientIp = 5;
inline bool TpLogin::has_tclientip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TpLogin::set_has_tclientip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TpLogin::clear_has_tclientip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TpLogin::clear_tclientip() {
  tclientip_ = 0u;
  clear_has_tclientip();
}
inline ::google::protobuf::uint32 TpLogin::tclientip() const {
  return tclientip_;
}
inline void TpLogin::set_tclientip(::google::protobuf::uint32 value) {
  set_has_tclientip();
  tclientip_ = value;
}

// optional string LZoneID = 6;
inline bool TpLogin::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TpLogin::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TpLogin::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TpLogin::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& TpLogin::lzoneid() const {
  return *lzoneid_;
}
inline void TpLogin::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpLogin::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpLogin::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpLogin::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* TpLogin::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TpLogout

// required string TvOpenid = 1;
inline bool TpLogout::has_tvopenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpLogout::set_has_tvopenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpLogout::clear_has_tvopenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpLogout::clear_tvopenid() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    tvopenid_->clear();
  }
  clear_has_tvopenid();
}
inline const ::std::string& TpLogout::tvopenid() const {
  return *tvopenid_;
}
inline void TpLogout::set_tvopenid(const ::std::string& value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpLogout::set_tvopenid(const char* value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpLogout::set_tvopenid(const char* value, size_t size) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpLogout::mutable_tvopenid() {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  return tvopenid_;
}
inline ::std::string* TpLogout::release_tvopenid() {
  clear_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tvopenid_;
    tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nChannel = 2;
inline bool TpLogout::has_nchannel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpLogout::set_has_nchannel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpLogout::clear_has_nchannel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpLogout::clear_nchannel() {
  nchannel_ = 0;
  clear_has_nchannel();
}
inline ::google::protobuf::int32 TpLogout::nchannel() const {
  return nchannel_;
}
inline void TpLogout::set_nchannel(::google::protobuf::int32 value) {
  set_has_nchannel();
  nchannel_ = value;
}

// optional string LZoneID = 3;
inline bool TpLogout::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpLogout::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TpLogout::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TpLogout::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& TpLogout::lzoneid() const {
  return *lzoneid_;
}
inline void TpLogout::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpLogout::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpLogout::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpLogout::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* TpLogout::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TpDataRecv

// required string TvOpenid = 1;
inline bool TpDataRecv::has_tvopenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpDataRecv::set_has_tvopenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpDataRecv::clear_has_tvopenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpDataRecv::clear_tvopenid() {
  if (tvopenid_ != &::google::protobuf::internal::kEmptyString) {
    tvopenid_->clear();
  }
  clear_has_tvopenid();
}
inline const ::std::string& TpDataRecv::tvopenid() const {
  return *tvopenid_;
}
inline void TpDataRecv::set_tvopenid(const ::std::string& value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpDataRecv::set_tvopenid(const char* value) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(value);
}
inline void TpDataRecv::set_tvopenid(const char* value, size_t size) {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  tvopenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpDataRecv::mutable_tvopenid() {
  set_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    tvopenid_ = new ::std::string;
  }
  return tvopenid_;
}
inline ::std::string* TpDataRecv::release_tvopenid() {
  clear_has_tvopenid();
  if (tvopenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tvopenid_;
    tvopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nChannel = 2;
inline bool TpDataRecv::has_nchannel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpDataRecv::set_has_nchannel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpDataRecv::clear_has_nchannel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpDataRecv::clear_nchannel() {
  nchannel_ = 0;
  clear_has_nchannel();
}
inline ::google::protobuf::int32 TpDataRecv::nchannel() const {
  return nchannel_;
}
inline void TpDataRecv::set_nchannel(::google::protobuf::int32 value) {
  set_has_nchannel();
  nchannel_ = value;
}

// required bytes TData = 3;
inline bool TpDataRecv::has_tdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpDataRecv::set_has_tdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TpDataRecv::clear_has_tdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TpDataRecv::clear_tdata() {
  if (tdata_ != &::google::protobuf::internal::kEmptyString) {
    tdata_->clear();
  }
  clear_has_tdata();
}
inline const ::std::string& TpDataRecv::tdata() const {
  return *tdata_;
}
inline void TpDataRecv::set_tdata(const ::std::string& value) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(value);
}
inline void TpDataRecv::set_tdata(const char* value) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(value);
}
inline void TpDataRecv::set_tdata(const void* value, size_t size) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpDataRecv::mutable_tdata() {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  return tdata_;
}
inline ::std::string* TpDataRecv::release_tdata() {
  clear_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tdata_;
    tdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 4;
inline bool TpDataRecv::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TpDataRecv::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TpDataRecv::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TpDataRecv::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& TpDataRecv::lzoneid() const {
  return *lzoneid_;
}
inline void TpDataRecv::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpDataRecv::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpDataRecv::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpDataRecv::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* TpDataRecv::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TpDataSend

// required uint64 nConnId = 1;
inline bool TpDataSend::has_nconnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpDataSend::set_has_nconnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpDataSend::clear_has_nconnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpDataSend::clear_nconnid() {
  nconnid_ = GOOGLE_ULONGLONG(0);
  clear_has_nconnid();
}
inline ::google::protobuf::uint64 TpDataSend::nconnid() const {
  return nconnid_;
}
inline void TpDataSend::set_nconnid(::google::protobuf::uint64 value) {
  set_has_nconnid();
  nconnid_ = value;
}

// required bytes TData = 2;
inline bool TpDataSend::has_tdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpDataSend::set_has_tdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpDataSend::clear_has_tdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpDataSend::clear_tdata() {
  if (tdata_ != &::google::protobuf::internal::kEmptyString) {
    tdata_->clear();
  }
  clear_has_tdata();
}
inline const ::std::string& TpDataSend::tdata() const {
  return *tdata_;
}
inline void TpDataSend::set_tdata(const ::std::string& value) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(value);
}
inline void TpDataSend::set_tdata(const char* value) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(value);
}
inline void TpDataSend::set_tdata(const void* value, size_t size) {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  tdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpDataSend::mutable_tdata() {
  set_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    tdata_ = new ::std::string;
  }
  return tdata_;
}
inline ::std::string* TpDataSend::release_tdata() {
  clear_has_tdata();
  if (tdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tdata_;
    tdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string LZoneID = 3;
inline bool TpDataSend::has_lzoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpDataSend::set_has_lzoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TpDataSend::clear_has_lzoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TpDataSend::clear_lzoneid() {
  if (lzoneid_ != &::google::protobuf::internal::kEmptyString) {
    lzoneid_->clear();
  }
  clear_has_lzoneid();
}
inline const ::std::string& TpDataSend::lzoneid() const {
  return *lzoneid_;
}
inline void TpDataSend::set_lzoneid(const ::std::string& value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpDataSend::set_lzoneid(const char* value) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(value);
}
inline void TpDataSend::set_lzoneid(const char* value, size_t size) {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  lzoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TpDataSend::mutable_lzoneid() {
  set_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    lzoneid_ = new ::std::string;
  }
  return lzoneid_;
}
inline ::std::string* TpDataSend::release_lzoneid() {
  clear_has_lzoneid();
  if (lzoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lzoneid_;
    lzoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogMoneyFlow_ADDORREDUCE>() {
  return ::rpc::LogMoneyFlow_ADDORREDUCE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogSnsFlow_SNSTYPE>() {
  return ::rpc::LogSnsFlow_SNSTYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogRoundFlow_BATTLETYPE>() {
  return ::rpc::LogRoundFlow_BATTLETYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogRoundFlow_PVEBATTLEMODE>() {
  return ::rpc::LogRoundFlow_PVEBATTLEMODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogRoundFlow_PVEAUTOMODE>() {
  return ::rpc::LogRoundFlow_PVEAUTOMODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogBuildingSpeedUpFlow_SpeedUpSource>() {
  return ::rpc::LogBuildingSpeedUpFlow_SpeedUpSource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogReceiveCharFlow_ReceiveSource>() {
  return ::rpc::LogReceiveCharFlow_ReceiveSource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::LogFriendHouseFlow_ResType>() {
  return ::rpc::LogFriendHouseFlow_ResType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2eproto__INCLUDED
