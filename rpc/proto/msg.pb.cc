// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* PlayerBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItemNofity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemNofity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankruptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankruptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreNofify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreNofify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginCnsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginCnsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlinePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlinePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlinePlayerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlinePlayerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReadOneMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReadOneMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBroadCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBroadCast_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadCastNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadCastNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFightRoomChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFightRoomChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRoomChatNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRoomChatNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInsurenceMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInsurenceMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchFriendNofify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchFriendNofify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqResponseAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqResponseAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendNofify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendNofify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendNofity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendNofity_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFriendChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFriendChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineMsgNofity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineMsgNofity_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendStatusNofify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendStatusNofify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorCodeNofify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorCodeNofify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskFinishNofity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskFinishNofity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTaskShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTaskShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormatedMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatedMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuestBindOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuestBindOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickPlayerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPlayerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SChatP2P_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SChatP2P_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SChatAlliance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SChatAlliance_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SChatWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SChatWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CChatP2P_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CChatP2P_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CChatWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CChatWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickEnterRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickEnterRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightCurrentStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightCurrentStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChiAtionArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChiAtionArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountdownNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountdownNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassCardNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassCardNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassedNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassedNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MingTang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MingTang_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSuanCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSuanCoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaerPlayerJieSuanPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaerPlayerJieSuanPattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSuanNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSuanNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSuanAdditionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSuanAdditionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalJieSuanNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalJieSuanNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJPattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJQuickEnterRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJQuickEnterRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJEnterRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJEnterRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJLeaveRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJLeaveRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJLeaveRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJLeaveRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJCountDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJCountDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJFightPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJFightPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJFightCurrentStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJFightCurrentStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJGameStartACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJGameStartACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJActionACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJActionACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJActionArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJActionArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJActionNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJActionNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJCountdownNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJCountdownNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJRemoveCardNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJRemoveCardNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJTieGuiREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJTieGuiREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJMingTang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJMingTang_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJPlayerJieSuanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJPlayerJieSuanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJJieSuanNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJJieSuanNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSanRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSanRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSanPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSanPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSanRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSanRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* JieSanRoomUpdateStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JieSanRoomUpdateStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterCustomRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterCustomRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterCustomRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterCustomRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveCustomRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveCustomRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveCustomRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveCustomRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindRoomACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindRoomACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceLeaveRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceLeaveRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFirendsJionCustomRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFirendsJionCustomRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFirendsJionCustomRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFirendsJionCustomRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherPlayerInfoREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherPlayerInfoREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchListREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchListREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchListACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchListACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnrollREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnrollREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnrollACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnrollACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithdrawREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithdrawACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmountChangeNotifyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmountChangeNotifyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartEntranceACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartEntranceACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfoNofity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfoNofity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PokerQuickEnterRoomREQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokerQuickEnterRoomREQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePockerRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePockerRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePockerRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePockerRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComparePokerPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComparePokerPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PockerBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PockerBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CPockerManInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CPockerManInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PockerManBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PockerManBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pocker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pocker_reflection_ = NULL;
const ::google::protobuf::Descriptor* PockerRoomBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PockerRoomBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PockerRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PockerRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeavePockerRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeavePockerRoom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerBaseInfo_descriptor_ = file->message_type(0);
  static const int PlayerBaseInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, vipleftday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, insurcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, frienduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, bmodifyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, bmodifysex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, profits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, exptotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, vipopentime_),
  };
  PlayerBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBaseInfo_descriptor_,
      PlayerBaseInfo::default_instance_,
      PlayerBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBaseInfo));
  PlayerExtraInfo_descriptor_ = file->message_type(1);
  static const int PlayerExtraInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, bankrupt_),
  };
  PlayerExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerExtraInfo_descriptor_,
      PlayerExtraInfo::default_instance_,
      PlayerExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerExtraInfo));
  BagItem_descriptor_ = file->message_type(2);
  static const int BagItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, num_),
  };
  BagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItem_descriptor_,
      BagItem::default_instance_,
      BagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItem));
  BagItemNofity_descriptor_ = file->message_type(3);
  static const int BagItemNofity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemNofity, items_),
  };
  BagItemNofity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemNofity_descriptor_,
      BagItemNofity::default_instance_,
      BagItemNofity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemNofity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemNofity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemNofity));
  Signature_descriptor_ = file->message_type(4);
  static const int Signature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, lastsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, contiday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, contirewardtms_),
  };
  Signature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signature_descriptor_,
      Signature::default_instance_,
      Signature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signature));
  DailyTask_descriptor_ = file->message_type(5);
  static const int DailyTask_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, doneids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, getids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, shares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, sharefris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, daertms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, mjtms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, pokertms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, windaertms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, winmjtms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, winpokertms_),
  };
  DailyTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTask_descriptor_,
      DailyTask::default_instance_,
      DailyTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTask));
  Score_descriptor_ = file->message_type(6);
  static const int Score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, loss_),
  };
  Score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score));
  BankruptInfo_descriptor_ = file->message_type(7);
  static const int BankruptInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankruptInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankruptInfo, rewardtimes_),
  };
  BankruptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankruptInfo_descriptor_,
      BankruptInfo::default_instance_,
      BankruptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankruptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankruptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankruptInfo));
  ScoreNofify_descriptor_ = file->message_type(8);
  static const int ScoreNofify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreNofify, scores_),
  };
  ScoreNofify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreNofify_descriptor_,
      ScoreNofify::default_instance_,
      ScoreNofify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreNofify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreNofify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreNofify));
  Request_descriptor_ = file->message_type(9);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, serialized_request_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  LoginCnsInfo_descriptor_ = file->message_type(10);
  static const int LoginCnsInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, cnsip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, gsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, versionold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, versionnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, versionmid_),
  };
  LoginCnsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginCnsInfo_descriptor_,
      LoginCnsInfo::default_instance_,
      LoginCnsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCnsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginCnsInfo));
  Login_descriptor_ = file->message_type(11);
  static const int Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, clientversion_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginResult_descriptor_ = file->message_type(12);
  static const int LoginResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, roleid_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  PlayerInfo_descriptor_ = file->message_type(13);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, extra_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  ResourceNotify_descriptor_ = file->message_type(14);
  static const int ResourceNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, insurcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, exp_),
  };
  ResourceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceNotify_descriptor_,
      ResourceNotify::default_instance_,
      ResourceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceNotify));
  OnlineBody_descriptor_ = file->message_type(15);
  static const int OnlineBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineBody, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineBody, num_),
  };
  OnlineBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineBody_descriptor_,
      OnlineBody::default_instance_,
      OnlineBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineBody));
  OnlineInfo_descriptor_ = file->message_type(16);
  static const int OnlineInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, info_),
  };
  OnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineInfo_descriptor_,
      OnlineInfo::default_instance_,
      OnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineInfo));
  OnlinePlayerReq_descriptor_ = file->message_type(17);
  static const int OnlinePlayerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerReq, partids_),
  };
  OnlinePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlinePlayerReq_descriptor_,
      OnlinePlayerReq::default_instance_,
      OnlinePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlinePlayerReq));
  OnlinePlayerMsg_descriptor_ = file->message_type(18);
  static const int OnlinePlayerMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerMsg, daerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerMsg, mjinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerMsg, pokerinfo_),
  };
  OnlinePlayerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlinePlayerMsg_descriptor_,
      OnlinePlayerMsg::default_instance_,
      OnlinePlayerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlinePlayerMsg));
  NotifyMsg_descriptor_ = file->message_type(19);
  static const int NotifyMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, txtid_),
  };
  NotifyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMsg_descriptor_,
      NotifyMsg::default_instance_,
      NotifyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMsg));
  HeartBeat_descriptor_ = file->message_type(20);
  static const int HeartBeat_offsets_[1] = {
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  HeartBeatRst_descriptor_ = file->message_type(21);
  static const int HeartBeatRst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRst, time_),
  };
  HeartBeatRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatRst_descriptor_,
      HeartBeatRst::default_instance_,
      HeartBeatRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatRst));
  PlayerInRoomNotify_descriptor_ = file->message_type(22);
  static const int PlayerInRoomNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInRoomNotify, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInRoomNotify, roomtype_),
  };
  PlayerInRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInRoomNotify_descriptor_,
      PlayerInRoomNotify::default_instance_,
      PlayerInRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInRoomNotify));
  RoleInfo_descriptor_ = file->message_type(23);
  static const int RoleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, phone_),
  };
  RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfo_descriptor_,
      RoleInfo::default_instance_,
      RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfo));
  SysMail_descriptor_ = file->message_type(24);
  static const int SysMail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, overduetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, bread_),
  };
  SysMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMail_descriptor_,
      SysMail::default_instance_,
      SysMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMail));
  PlayerMailInfo_descriptor_ = file->message_type(25);
  static const int PlayerMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMailInfo, sysmail_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMailInfo, maillist_),
  };
  PlayerMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMailInfo_descriptor_,
      PlayerMailInfo::default_instance_,
      PlayerMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMailInfo));
  ReqReadOneMail_descriptor_ = file->message_type(26);
  static const int ReqReadOneMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadOneMail, mailid_),
  };
  ReqReadOneMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReadOneMail_descriptor_,
      ReqReadOneMail::default_instance_,
      ReqReadOneMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadOneMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadOneMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReadOneMail));
  RemoveMailNotify_descriptor_ = file->message_type(27);
  static const int RemoveMailNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMailNotify, mailids_),
  };
  RemoveMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMailNotify_descriptor_,
      RemoveMailNotify::default_instance_,
      RemoveMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMailNotify));
  AddMailNotify_descriptor_ = file->message_type(28);
  static const int AddMailNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailNotify, maillist_),
  };
  AddMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMailNotify_descriptor_,
      AddMailNotify::default_instance_,
      AddMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMailNotify));
  ReqBroadCast_descriptor_ = file->message_type(29);
  static const int ReqBroadCast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, bvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, playername_),
  };
  ReqBroadCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBroadCast_descriptor_,
      ReqBroadCast::default_instance_,
      ReqBroadCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBroadCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBroadCast));
  BroadCastNotify_descriptor_ = file->message_type(30);
  static const int BroadCastNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, broadcastid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, sysbroad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, vip_),
  };
  BroadCastNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadCastNotify_descriptor_,
      BroadCastNotify::default_instance_,
      BroadCastNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadCastNotify));
  FightChat_descriptor_ = file->message_type(31);
  static const int FightChat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, fixwordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, customcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, receiverplayerid_),
  };
  FightChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightChat_descriptor_,
      FightChat::default_instance_,
      FightChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightChat));
  ReqFightRoomChat_descriptor_ = file->message_type(32);
  static const int ReqFightRoomChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFightRoomChat, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFightRoomChat, fighchatinfo_),
  };
  ReqFightRoomChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFightRoomChat_descriptor_,
      ReqFightRoomChat::default_instance_,
      ReqFightRoomChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFightRoomChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFightRoomChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFightRoomChat));
  FightRoomChatNotify_descriptor_ = file->message_type(33);
  static const int FightRoomChatNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRoomChatNotify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRoomChatNotify, fighchatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRoomChatNotify, offline_),
  };
  FightRoomChatNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRoomChatNotify_descriptor_,
      FightRoomChatNotify::default_instance_,
      FightRoomChatNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRoomChatNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRoomChatNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRoomChatNotify));
  Notice_descriptor_ = file->message_type(34);
  static const int Notice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, content_),
  };
  Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notice_descriptor_,
      Notice::default_instance_,
      Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notice));
  ReqInsurenceMoney_descriptor_ = file->message_type(35);
  static const int ReqInsurenceMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInsurenceMoney, bwithdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInsurenceMoney, value_),
  };
  ReqInsurenceMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInsurenceMoney_descriptor_,
      ReqInsurenceMoney::default_instance_,
      ReqInsurenceMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInsurenceMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInsurenceMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInsurenceMoney));
  Player_descriptor_ = file->message_type(36);
  static const int Player_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, diamond_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  FriendsList_descriptor_ = file->message_type(37);
  static const int FriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsList, friends_),
  };
  FriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsList_descriptor_,
      FriendsList::default_instance_,
      FriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsList));
  RequestFriendsList_descriptor_ = file->message_type(38);
  static const int RequestFriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriendsList, friends_),
  };
  RequestFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFriendsList_descriptor_,
      RequestFriendsList::default_instance_,
      RequestFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFriendsList));
  ReqString_descriptor_ = file->message_type(39);
  static const int ReqString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqString, id_),
  };
  ReqString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqString_descriptor_,
      ReqString::default_instance_,
      ReqString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqString));
  ReqInt_descriptor_ = file->message_type(40);
  static const int ReqInt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInt, id_),
  };
  ReqInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInt_descriptor_,
      ReqInt::default_instance_,
      ReqInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInt));
  SearchFriendNofify_descriptor_ = file->message_type(41);
  static const int SearchFriendNofify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendNofify, player_),
  };
  SearchFriendNofify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchFriendNofify_descriptor_,
      SearchFriendNofify::default_instance_,
      SearchFriendNofify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendNofify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFriendNofify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchFriendNofify));
  ReqResponseAddFriend_descriptor_ = file->message_type(42);
  static const int ReqResponseAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResponseAddFriend, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResponseAddFriend, baccept_),
  };
  ReqResponseAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqResponseAddFriend_descriptor_,
      ReqResponseAddFriend::default_instance_,
      ReqResponseAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResponseAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResponseAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqResponseAddFriend));
  AddFriendNofify_descriptor_ = file->message_type(43);
  static const int AddFriendNofify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNofify, rst_),
  };
  AddFriendNofify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendNofify_descriptor_,
      AddFriendNofify::default_instance_,
      AddFriendNofify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNofify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNofify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendNofify));
  DelFriendNofity_descriptor_ = file->message_type(44);
  static const int DelFriendNofity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNofity, rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNofity, id_),
  };
  DelFriendNofity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendNofity_descriptor_,
      DelFriendNofity::default_instance_,
      DelFriendNofity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNofity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendNofity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendNofity));
  FriendsIdList_descriptor_ = file->message_type(45);
  static const int FriendsIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsIdList, friends_),
  };
  FriendsIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsIdList_descriptor_,
      FriendsIdList::default_instance_,
      FriendsIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsIdList));
  SendFriendChat_descriptor_ = file->message_type(46);
  static const int SendFriendChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, senderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, receiveruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, sendtime_),
  };
  SendFriendChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFriendChat_descriptor_,
      SendFriendChat::default_instance_,
      SendFriendChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFriendChat));
  OfflineMsgNofity_descriptor_ = file->message_type(47);
  static const int OfflineMsgNofity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgNofity, chatinfo_),
  };
  OfflineMsgNofity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineMsgNofity_descriptor_,
      OfflineMsgNofity::default_instance_,
      OfflineMsgNofity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgNofity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgNofity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineMsgNofity));
  FriendStatusNofify_descriptor_ = file->message_type(48);
  static const int FriendStatusNofify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNofify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNofify, bonline_),
  };
  FriendStatusNofify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendStatusNofify_descriptor_,
      FriendStatusNofify::default_instance_,
      FriendStatusNofify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNofify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNofify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendStatusNofify));
  ErrorCodeNofify_descriptor_ = file->message_type(49);
  static const int ErrorCodeNofify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCodeNofify, code_),
  };
  ErrorCodeNofify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorCodeNofify_descriptor_,
      ErrorCodeNofify::default_instance_,
      ErrorCodeNofify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCodeNofify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCodeNofify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorCodeNofify));
  TaskFinishNofity_descriptor_ = file->message_type(50);
  static const int TaskFinishNofity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishNofity, taskid_),
  };
  TaskFinishNofity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskFinishNofity_descriptor_,
      TaskFinishNofity::default_instance_,
      TaskFinishNofity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishNofity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishNofity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskFinishNofity));
  ReqTaskShare_descriptor_ = file->message_type(51);
  static const int ReqTaskShare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTaskShare, bshare2friend_),
  };
  ReqTaskShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTaskShare_descriptor_,
      ReqTaskShare::default_instance_,
      ReqTaskShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTaskShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTaskShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTaskShare));
  ReqRankList_descriptor_ = file->message_type(52);
  static const int ReqRankList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankList, ranktype_),
  };
  ReqRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRankList_descriptor_,
      ReqRankList::default_instance_,
      ReqRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRankList));
  RankInfo_descriptor_ = file->message_type(53);
  static const int RankInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, bvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rankvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, ranknum_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  RankList_descriptor_ = file->message_type(54);
  static const int RankList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankList, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankList, ranktype_),
  };
  RankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankList_descriptor_,
      RankList::default_instance_,
      RankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankList));
  FormatedMsg_descriptor_ = file->message_type(55);
  static const int FormatedMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatedMsg, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatedMsg, args_),
  };
  FormatedMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatedMsg_descriptor_,
      FormatedMsg::default_instance_,
      FormatedMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatedMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatedMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatedMsg));
  Msg_descriptor_ = file->message_type(56);
  static const int Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, text_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
  NumberMsg_descriptor_ = file->message_type(57);
  static const int NumberMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberMsg, value_),
  };
  NumberMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberMsg_descriptor_,
      NumberMsg::default_instance_,
      NumberMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberMsg));
  MsgArg_descriptor_ = file->message_type(58);
  static const int MsgArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArg, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArg, i_),
  };
  MsgArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgArg_descriptor_,
      MsgArg::default_instance_,
      MsgArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgArg));
  GuestBindOk_descriptor_ = file->message_type(59);
  static const int GuestBindOk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestBindOk, success_),
  };
  GuestBindOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuestBindOk_descriptor_,
      GuestBindOk::default_instance_,
      GuestBindOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestBindOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestBindOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuestBindOk));
  Ping_descriptor_ = file->message_type(60);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, clienttime_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  PingResult_descriptor_ = file->message_type(61);
  static const int PingResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResult, server_time_),
  };
  PingResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingResult_descriptor_,
      PingResult::default_instance_,
      PingResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingResult));
  KickPlayerMsg_descriptor_ = file->message_type(62);
  static const int KickPlayerMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerMsg, time_),
  };
  KickPlayerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPlayerMsg_descriptor_,
      KickPlayerMsg::default_instance_,
      KickPlayerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPlayerMsg));
  C2SChatP2P_descriptor_ = file->message_type(63);
  static const int C2SChatP2P_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatP2P, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatP2P, chatcontent_),
  };
  C2SChatP2P_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SChatP2P_descriptor_,
      C2SChatP2P::default_instance_,
      C2SChatP2P_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatP2P, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatP2P, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SChatP2P));
  C2SChatAlliance_descriptor_ = file->message_type(64);
  static const int C2SChatAlliance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatAlliance, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatAlliance, useim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatAlliance, voicetime_),
  };
  C2SChatAlliance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SChatAlliance_descriptor_,
      C2SChatAlliance::default_instance_,
      C2SChatAlliance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatAlliance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatAlliance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SChatAlliance));
  C2SChatWorld_descriptor_ = file->message_type(65);
  static const int C2SChatWorld_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatWorld, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatWorld, useim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatWorld, voicetime_),
  };
  C2SChatWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SChatWorld_descriptor_,
      C2SChatWorld::default_instance_,
      C2SChatWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SChatWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SChatWorld));
  S2CChatP2P_descriptor_ = file->message_type(66);
  static const int S2CChatP2P_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, fromplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, fromplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, fromplayerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, chatcontent_),
  };
  S2CChatP2P_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CChatP2P_descriptor_,
      S2CChatP2P::default_instance_,
      S2CChatP2P_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatP2P, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CChatP2P));
  S2CChatWorld_descriptor_ = file->message_type(67);
  static const int S2CChatWorld_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, fromplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, fromplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, fromplayerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, chattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, useim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, voicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, messageid_),
  };
  S2CChatWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CChatWorld_descriptor_,
      S2CChatWorld::default_instance_,
      S2CChatWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CChatWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CChatWorld));
  Card_descriptor_ = file->message_type(68);
  static const int Card_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, bbig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, bchi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, bhu_),
  };
  Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Card));
  Pattern_descriptor_ = file->message_type(69);
  static const int Pattern_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, hu_),
  };
  Pattern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pattern_descriptor_,
      Pattern::default_instance_,
      Pattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pattern));
  UserInfo_descriptor_ = file->message_type(70);
  static const int UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, playeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, bvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  EnterRoomREQ_descriptor_ = file->message_type(71);
  static const int EnterRoomREQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomREQ, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomREQ, roomtype_),
  };
  EnterRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomREQ_descriptor_,
      EnterRoomREQ::default_instance_,
      EnterRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomREQ));
  QuickEnterRoomREQ_descriptor_ = file->message_type(72);
  static const int QuickEnterRoomREQ_offsets_[1] = {
  };
  QuickEnterRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickEnterRoomREQ_descriptor_,
      QuickEnterRoomREQ::default_instance_,
      QuickEnterRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnterRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickEnterRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickEnterRoomREQ));
  EnterRoomACK_descriptor_ = file->message_type(73);
  static const int EnterRoomACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, shangjiatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, bready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, isnormalreqenterroom_),
  };
  EnterRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomACK_descriptor_,
      EnterRoomACK::default_instance_,
      EnterRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomACK));
  LeaveRoomREQ_descriptor_ = file->message_type(74);
  static const int LeaveRoomREQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomREQ, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomREQ, ischangedesk_),
  };
  LeaveRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveRoomREQ_descriptor_,
      LeaveRoomREQ::default_instance_,
      LeaveRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveRoomREQ));
  LeaveRoomACK_descriptor_ = file->message_type(75);
  static const int LeaveRoomACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomACK, ischangedesk_),
  };
  LeaveRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveRoomACK_descriptor_,
      LeaveRoomACK::default_instance_,
      LeaveRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveRoomACK));
  CountDown_descriptor_ = file->message_type(76);
  static const int CountDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDown, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDown, currentcountdown_),
  };
  CountDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountDown_descriptor_,
      CountDown::default_instance_,
      CountDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountDown));
  FightPlayerInfo_descriptor_ = file->message_type(77);
  static const int FightPlayerInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, handcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, longpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, kanpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, erlongtouyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, chuguocards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, chipengzhaolongcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, currenthu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, bzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, bbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, btuoguan_),
  };
  FightPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightPlayerInfo_descriptor_,
      FightPlayerInfo::default_instance_,
      FightPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightPlayerInfo));
  FightCurrentStateInfo_descriptor_ = file->message_type(78);
  static const int FightCurrentStateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, currentdeskcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, currentcountdowninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, currentdeskcardplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, currentdeskremaincard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, bcurrentdeskcardmo_),
  };
  FightCurrentStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightCurrentStateInfo_descriptor_,
      FightCurrentStateInfo::default_instance_,
      FightCurrentStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCurrentStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightCurrentStateInfo));
  GameStartACK_descriptor_ = file->message_type(79);
  static const int GameStartACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartACK, fightplayersinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartACK, currentfightstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartACK, fightstate_),
  };
  GameStartACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartACK_descriptor_,
      GameStartACK::default_instance_,
      GameStartACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartACK));
  ActionREQ_descriptor_ = file->message_type(80);
  static const int ActionREQ_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, chicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, bicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, chupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, cardargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, systype_),
  };
  ActionREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionREQ_descriptor_,
      ActionREQ::default_instance_,
      ActionREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionREQ));
  ChiAtionArgs_descriptor_ = file->message_type(81);
  static const int ChiAtionArgs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiAtionArgs, canchicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiAtionArgs, needbicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiAtionArgs, cardargs_),
  };
  ChiAtionArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChiAtionArgs_descriptor_,
      ChiAtionArgs::default_instance_,
      ChiAtionArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiAtionArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiAtionArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChiAtionArgs));
  ActionACK_descriptor_ = file->message_type(82);
  static const int ActionACK_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, cardargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, chipengzhaolongcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, updatehu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, currendeskremiancard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, result_),
  };
  ActionACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionACK_descriptor_,
      ActionACK::default_instance_,
      ActionACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionACK));
  ActionNotifyACK_descriptor_ = file->message_type(83);
  static const int ActionNotifyACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionNotifyACK, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionNotifyACK, chiationargs_),
  };
  ActionNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionNotifyACK_descriptor_,
      ActionNotifyACK::default_instance_,
      ActionNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionNotifyACK));
  CountdownNotifyACK_descriptor_ = file->message_type(84);
  static const int CountdownNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownNotifyACK, countdown_),
  };
  CountdownNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountdownNotifyACK_descriptor_,
      CountdownNotifyACK::default_instance_,
      CountdownNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountdownNotifyACK));
  PassCardNotifyACK_descriptor_ = file->message_type(85);
  static const int PassCardNotifyACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCardNotifyACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCardNotifyACK, card_),
  };
  PassCardNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassCardNotifyACK_descriptor_,
      PassCardNotifyACK::default_instance_,
      PassCardNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCardNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCardNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassCardNotifyACK));
  PassedNotifyACK_descriptor_ = file->message_type(86);
  static const int PassedNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassedNotifyACK, card_),
  };
  PassedNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassedNotifyACK_descriptor_,
      PassedNotifyACK::default_instance_,
      PassedNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassedNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassedNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassedNotifyACK));
  MingTang_descriptor_ = file->message_type(87);
  static const int MingTang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MingTang, mingtang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MingTang, value_),
  };
  MingTang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MingTang_descriptor_,
      MingTang::default_instance_,
      MingTang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MingTang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MingTang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MingTang));
  JieSuanCoin_descriptor_ = file->message_type(88);
  static const int JieSuanCoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanCoin, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanCoin, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanCoin, tag_),
  };
  JieSuanCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSuanCoin_descriptor_,
      JieSuanCoin::default_instance_,
      JieSuanCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSuanCoin));
  DaerPlayerJieSuanPattern_descriptor_ = file->message_type(89);
  static const int DaerPlayerJieSuanPattern_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, mingtang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, tag_),
  };
  DaerPlayerJieSuanPattern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaerPlayerJieSuanPattern_descriptor_,
      DaerPlayerJieSuanPattern::default_instance_,
      DaerPlayerJieSuanPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaerPlayerJieSuanPattern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaerPlayerJieSuanPattern));
  JieSuanNotifyACK_descriptor_ = file->message_type(90);
  static const int JieSuanNotifyACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, daerplayerjiesuanpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, dicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, huangzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, addi_),
  };
  JieSuanNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSuanNotifyACK_descriptor_,
      JieSuanNotifyACK::default_instance_,
      JieSuanNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSuanNotifyACK));
  JieSuanAdditionData_descriptor_ = file->message_type(91);
  static const int JieSuanAdditionData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, systype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, stageend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, jiesuantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, curtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, continuetime_),
  };
  JieSuanAdditionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSuanAdditionData_descriptor_,
      JieSuanAdditionData::default_instance_,
      JieSuanAdditionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSuanAdditionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSuanAdditionData));
  FinalJieSuanNotifyACK_descriptor_ = file->message_type(92);
  static const int FinalJieSuanNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalJieSuanNotifyACK, jiesuaninfo_),
  };
  FinalJieSuanNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalJieSuanNotifyACK_descriptor_,
      FinalJieSuanNotifyACK::default_instance_,
      FinalJieSuanNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalJieSuanNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalJieSuanNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalJieSuanNotifyACK));
  MJCard_descriptor_ = file->message_type(93);
  static const int MJCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, rctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, flag_),
  };
  MJCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJCard_descriptor_,
      MJCard::default_instance_,
      MJCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJCard));
  MJPattern_descriptor_ = file->message_type(94);
  static const int MJPattern_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, isshow_),
  };
  MJPattern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJPattern_descriptor_,
      MJPattern::default_instance_,
      MJPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPattern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJPattern));
  MJQuickEnterRoomREQ_descriptor_ = file->message_type(95);
  static const int MJQuickEnterRoomREQ_offsets_[1] = {
  };
  MJQuickEnterRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJQuickEnterRoomREQ_descriptor_,
      MJQuickEnterRoomREQ::default_instance_,
      MJQuickEnterRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJQuickEnterRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJQuickEnterRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJQuickEnterRoomREQ));
  MJEnterRoomACK_descriptor_ = file->message_type(96);
  static const int MJEnterRoomACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, bready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, isnormalreqenterroom_),
  };
  MJEnterRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJEnterRoomACK_descriptor_,
      MJEnterRoomACK::default_instance_,
      MJEnterRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJEnterRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJEnterRoomACK));
  MJLeaveRoomREQ_descriptor_ = file->message_type(97);
  static const int MJLeaveRoomREQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomREQ, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomREQ, ischangedesk_),
  };
  MJLeaveRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJLeaveRoomREQ_descriptor_,
      MJLeaveRoomREQ::default_instance_,
      MJLeaveRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJLeaveRoomREQ));
  MJLeaveRoomACK_descriptor_ = file->message_type(98);
  static const int MJLeaveRoomACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomACK, ischangedesk_),
  };
  MJLeaveRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJLeaveRoomACK_descriptor_,
      MJLeaveRoomACK::default_instance_,
      MJLeaveRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJLeaveRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJLeaveRoomACK));
  MJCountDown_descriptor_ = file->message_type(99);
  static const int MJCountDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountDown, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountDown, currentcountdown_),
  };
  MJCountDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJCountDown_descriptor_,
      MJCountDown::default_instance_,
      MJCountDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJCountDown));
  MJFightPlayerInfo_descriptor_ = file->message_type(100);
  static const int MJFightPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, handcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, showpatterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, chucards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, bzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, bbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, btuoguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, handcardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, alreadycardarg_),
  };
  MJFightPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJFightPlayerInfo_descriptor_,
      MJFightPlayerInfo::default_instance_,
      MJFightPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJFightPlayerInfo));
  MJFightCurrentStateInfo_descriptor_ = file->message_type(101);
  static const int MJFightCurrentStateInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, currentcountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, activeplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, lastactiveplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, currentdeskremaincard_),
  };
  MJFightCurrentStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJFightCurrentStateInfo_descriptor_,
      MJFightCurrentStateInfo::default_instance_,
      MJFightCurrentStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJFightCurrentStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJFightCurrentStateInfo));
  MJGameStartACK_descriptor_ = file->message_type(102);
  static const int MJGameStartACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJGameStartACK, fightplayersinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJGameStartACK, currentfightstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJGameStartACK, fightstate_),
  };
  MJGameStartACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJGameStartACK_descriptor_,
      MJGameStartACK::default_instance_,
      MJGameStartACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJGameStartACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJGameStartACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJGameStartACK));
  MJActionACK_descriptor_ = file->message_type(103);
  static const int MJActionACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, cardargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, penggangpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, currendeskremiancard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, result_),
  };
  MJActionACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJActionACK_descriptor_,
      MJActionACK::default_instance_,
      MJActionACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJActionACK));
  MJActionArgs_descriptor_ = file->message_type(104);
  static const int MJActionArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionArgs, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionArgs, cardsargs_),
  };
  MJActionArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJActionArgs_descriptor_,
      MJActionArgs::default_instance_,
      MJActionArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJActionArgs));
  MJActionNotifyACK_descriptor_ = file->message_type(105);
  static const int MJActionNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionNotifyACK, actions_),
  };
  MJActionNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJActionNotifyACK_descriptor_,
      MJActionNotifyACK::default_instance_,
      MJActionNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJActionNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJActionNotifyACK));
  MJCountdownNotifyACK_descriptor_ = file->message_type(106);
  static const int MJCountdownNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountdownNotifyACK, countdown_),
  };
  MJCountdownNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJCountdownNotifyACK_descriptor_,
      MJCountdownNotifyACK::default_instance_,
      MJCountdownNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountdownNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCountdownNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJCountdownNotifyACK));
  MJRemoveCardNotifyACK_descriptor_ = file->message_type(107);
  static const int MJRemoveCardNotifyACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJRemoveCardNotifyACK, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJRemoveCardNotifyACK, isremovehandcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJRemoveCardNotifyACK, card_),
  };
  MJRemoveCardNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJRemoveCardNotifyACK_descriptor_,
      MJRemoveCardNotifyACK::default_instance_,
      MJRemoveCardNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJRemoveCardNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJRemoveCardNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJRemoveCardNotifyACK));
  MJTieGuiREQ_descriptor_ = file->message_type(108);
  static const int MJTieGuiREQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJTieGuiREQ, btiegui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJTieGuiREQ, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJTieGuiREQ, systype_),
  };
  MJTieGuiREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJTieGuiREQ_descriptor_,
      MJTieGuiREQ::default_instance_,
      MJTieGuiREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJTieGuiREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJTieGuiREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJTieGuiREQ));
  MJMingTang_descriptor_ = file->message_type(109);
  static const int MJMingTang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJMingTang, mingtang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJMingTang, value_),
  };
  MJMingTang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJMingTang_descriptor_,
      MJMingTang::default_instance_,
      MJMingTang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJMingTang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJMingTang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJMingTang));
  MJPlayerJieSuanInfo_descriptor_ = file->message_type(110);
  static const int MJPlayerJieSuanInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, mingtang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, tag_),
  };
  MJPlayerJieSuanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJPlayerJieSuanInfo_descriptor_,
      MJPlayerJieSuanInfo::default_instance_,
      MJPlayerJieSuanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJPlayerJieSuanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJPlayerJieSuanInfo));
  MJJieSuanNotifyACK_descriptor_ = file->message_type(111);
  static const int MJJieSuanNotifyACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJJieSuanNotifyACK, playerjiesuaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJJieSuanNotifyACK, huangzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJJieSuanNotifyACK, addi_),
  };
  MJJieSuanNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJJieSuanNotifyACK_descriptor_,
      MJJieSuanNotifyACK::default_instance_,
      MJJieSuanNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJJieSuanNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJJieSuanNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJJieSuanNotifyACK));
  CreateRoomREQ_descriptor_ = file->message_type(112);
  static const int CreateRoomREQ_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, limitcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, maxmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, isdaigui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, tiyongamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, qihukeamount_),
  };
  CreateRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomREQ_descriptor_,
      CreateRoomREQ::default_instance_,
      CreateRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomREQ));
  RoomInfo_descriptor_ = file->message_type(113);
  static const int RoomInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, limitcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, maxmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, isdaigui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, tiyongamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, qihukeamount_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  CreateRoomACK_descriptor_ = file->message_type(114);
  static const int CreateRoomACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomACK, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomACK, code_),
  };
  CreateRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomACK_descriptor_,
      CreateRoomACK::default_instance_,
      CreateRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomACK));
  RoomListREQ_descriptor_ = file->message_type(115);
  static const int RoomListREQ_offsets_[1] = {
  };
  RoomListREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListREQ_descriptor_,
      RoomListREQ::default_instance_,
      RoomListREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListREQ));
  RoomListACK_descriptor_ = file->message_type(116);
  static const int RoomListACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListACK, roomlist_),
  };
  RoomListACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListACK_descriptor_,
      RoomListACK::default_instance_,
      RoomListACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListACK));
  JieSanRoomREQ_descriptor_ = file->message_type(117);
  static const int JieSanRoomREQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomREQ, operatorstatus_),
  };
  JieSanRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSanRoomREQ_descriptor_,
      JieSanRoomREQ::default_instance_,
      JieSanRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSanRoomREQ));
  JieSanPlayerInfo_descriptor_ = file->message_type(118);
  static const int JieSanPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanPlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanPlayerInfo, status_),
  };
  JieSanPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSanPlayerInfo_descriptor_,
      JieSanPlayerInfo::default_instance_,
      JieSanPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSanPlayerInfo));
  JieSanRoomNotify_descriptor_ = file->message_type(119);
  static const int JieSanRoomNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomNotify, jiesanplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomNotify, remaintime_),
  };
  JieSanRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSanRoomNotify_descriptor_,
      JieSanRoomNotify::default_instance_,
      JieSanRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSanRoomNotify));
  JieSanRoomUpdateStatusNotify_descriptor_ = file->message_type(120);
  static const int JieSanRoomUpdateStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomUpdateStatusNotify, jiesanplayerinfo_),
  };
  JieSanRoomUpdateStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JieSanRoomUpdateStatusNotify_descriptor_,
      JieSanRoomUpdateStatusNotify::default_instance_,
      JieSanRoomUpdateStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomUpdateStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JieSanRoomUpdateStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JieSanRoomUpdateStatusNotify));
  EnterCustomRoomREQ_descriptor_ = file->message_type(121);
  static const int EnterCustomRoomREQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomREQ, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomREQ, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomREQ, pwd_),
  };
  EnterCustomRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterCustomRoomREQ_descriptor_,
      EnterCustomRoomREQ::default_instance_,
      EnterCustomRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterCustomRoomREQ));
  EnterCustomRoomACK_descriptor_ = file->message_type(122);
  static const int EnterCustomRoomACK_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, shangjiatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, bready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, curtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, isowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, qihukeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, tiyongamount_),
  };
  EnterCustomRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterCustomRoomACK_descriptor_,
      EnterCustomRoomACK::default_instance_,
      EnterCustomRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCustomRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterCustomRoomACK));
  LeaveCustomRoomREQ_descriptor_ = file->message_type(123);
  static const int LeaveCustomRoomREQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomREQ, playerid_),
  };
  LeaveCustomRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveCustomRoomREQ_descriptor_,
      LeaveCustomRoomREQ::default_instance_,
      LeaveCustomRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveCustomRoomREQ));
  LeaveCustomRoomACK_descriptor_ = file->message_type(124);
  static const int LeaveCustomRoomACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomACK, playerid_),
  };
  LeaveCustomRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveCustomRoomACK_descriptor_,
      LeaveCustomRoomACK::default_instance_,
      LeaveCustomRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCustomRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveCustomRoomACK));
  FindRoomREQ_descriptor_ = file->message_type(125);
  static const int FindRoomREQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomREQ, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomREQ, name_),
  };
  FindRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindRoomREQ_descriptor_,
      FindRoomREQ::default_instance_,
      FindRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindRoomREQ));
  FindRoomACK_descriptor_ = file->message_type(126);
  static const int FindRoomACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomACK, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomACK, code_),
  };
  FindRoomACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindRoomACK_descriptor_,
      FindRoomACK::default_instance_,
      FindRoomACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindRoomACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindRoomACK));
  ForceLeaveRoomREQ_descriptor_ = file->message_type(127);
  static const int ForceLeaveRoomREQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceLeaveRoomREQ, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceLeaveRoomREQ, systype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceLeaveRoomREQ, gametype_),
  };
  ForceLeaveRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceLeaveRoomREQ_descriptor_,
      ForceLeaveRoomREQ::default_instance_,
      ForceLeaveRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceLeaveRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceLeaveRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceLeaveRoomREQ));
  InviteFirendsJionCustomRoomREQ_descriptor_ = file->message_type(128);
  static const int InviteFirendsJionCustomRoomREQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomREQ, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomREQ, currencytype_),
  };
  InviteFirendsJionCustomRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFirendsJionCustomRoomREQ_descriptor_,
      InviteFirendsJionCustomRoomREQ::default_instance_,
      InviteFirendsJionCustomRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFirendsJionCustomRoomREQ));
  InviteFirendsJionCustomRoomNotify_descriptor_ = file->message_type(129);
  static const int InviteFirendsJionCustomRoomNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, inviteplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, currencytype_),
  };
  InviteFirendsJionCustomRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFirendsJionCustomRoomNotify_descriptor_,
      InviteFirendsJionCustomRoomNotify::default_instance_,
      InviteFirendsJionCustomRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFirendsJionCustomRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFirendsJionCustomRoomNotify));
  OtherPlayerInfo_descriptor_ = file->message_type(130);
  static const int OtherPlayerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, userheadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, userwechatheadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, losenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, coin_),
  };
  OtherPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherPlayerInfo_descriptor_,
      OtherPlayerInfo::default_instance_,
      OtherPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherPlayerInfo));
  OtherPlayerInfoREQ_descriptor_ = file->message_type(131);
  static const int OtherPlayerInfoREQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfoREQ, playerid_),
  };
  OtherPlayerInfoREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherPlayerInfoREQ_descriptor_,
      OtherPlayerInfoREQ::default_instance_,
      OtherPlayerInfoREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfoREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerInfoREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherPlayerInfoREQ));
  MatchListREQ_descriptor_ = file->message_type(132);
  static const int MatchListREQ_offsets_[1] = {
  };
  MatchListREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchListREQ_descriptor_,
      MatchListREQ::default_instance_,
      MatchListREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchListREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchListREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchListREQ));
  MatchListACK_descriptor_ = file->message_type(133);
  static const int MatchListACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchListACK, matches_),
  };
  MatchListACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchListACK_descriptor_,
      MatchListACK::default_instance_,
      MatchListACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchListACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchListACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchListACK));
  Match_descriptor_ = file->message_type(134);
  static const int Match_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, enrollamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, countdown_),
  };
  Match_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_descriptor_,
      Match::default_instance_,
      Match_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match));
  EnrollREQ_descriptor_ = file->message_type(135);
  static const int EnrollREQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollREQ, id_),
  };
  EnrollREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnrollREQ_descriptor_,
      EnrollREQ::default_instance_,
      EnrollREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnrollREQ));
  EnrollACK_descriptor_ = file->message_type(136);
  static const int EnrollACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollACK, result_),
  };
  EnrollACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnrollACK_descriptor_,
      EnrollACK::default_instance_,
      EnrollACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnrollACK));
  WithdrawREQ_descriptor_ = file->message_type(137);
  static const int WithdrawREQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawREQ, id_),
  };
  WithdrawREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawREQ_descriptor_,
      WithdrawREQ::default_instance_,
      WithdrawREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawREQ));
  WithdrawACK_descriptor_ = file->message_type(138);
  static const int WithdrawACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawACK, result_),
  };
  WithdrawACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawACK_descriptor_,
      WithdrawACK::default_instance_,
      WithdrawACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawACK));
  AmountChangeNotifyACK_descriptor_ = file->message_type(139);
  static const int AmountChangeNotifyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmountChangeNotifyACK, matches_),
  };
  AmountChangeNotifyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmountChangeNotifyACK_descriptor_,
      AmountChangeNotifyACK::default_instance_,
      AmountChangeNotifyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmountChangeNotifyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmountChangeNotifyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmountChangeNotifyACK));
  StartEntranceACK_descriptor_ = file->message_type(140);
  static const int StartEntranceACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEntranceACK, match_),
  };
  StartEntranceACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartEntranceACK_descriptor_,
      StartEntranceACK::default_instance_,
      StartEntranceACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEntranceACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEntranceACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartEntranceACK));
  OrderInfoNofity_descriptor_ = file->message_type(141);
  static const int OrderInfoNofity_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, prepayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, noncestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, appid_),
  };
  OrderInfoNofity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderInfoNofity_descriptor_,
      OrderInfoNofity::default_instance_,
      OrderInfoNofity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfoNofity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderInfoNofity));
  PayResultNotify_descriptor_ = file->message_type(142);
  static const int PayResultNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, error_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, vipday_),
  };
  PayResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayResultNotify_descriptor_,
      PayResultNotify::default_instance_,
      PayResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayResultNotify));
  PokerQuickEnterRoomREQ_descriptor_ = file->message_type(143);
  static const int PokerQuickEnterRoomREQ_offsets_[1] = {
  };
  PokerQuickEnterRoomREQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PokerQuickEnterRoomREQ_descriptor_,
      PokerQuickEnterRoomREQ::default_instance_,
      PokerQuickEnterRoomREQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerQuickEnterRoomREQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerQuickEnterRoomREQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerQuickEnterRoomREQ));
  CreatePockerRoomReq_descriptor_ = file->message_type(144);
  static const int CreatePockerRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomReq, blindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomReq, limid_),
  };
  CreatePockerRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePockerRoomReq_descriptor_,
      CreatePockerRoomReq::default_instance_,
      CreatePockerRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePockerRoomReq));
  CreatePockerRoomAck_descriptor_ = file->message_type(145);
  static const int CreatePockerRoomAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomAck, roomno_),
  };
  CreatePockerRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePockerRoomAck_descriptor_,
      CreatePockerRoomAck::default_instance_,
      CreatePockerRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePockerRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePockerRoomAck));
  C2SAction_descriptor_ = file->message_type(146);
  static const int C2SAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, raise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, base_),
  };
  C2SAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SAction_descriptor_,
      C2SAction::default_instance_,
      C2SAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SAction));
  S2CAction_descriptor_ = file->message_type(147);
  static const int S2CAction_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, operater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, raise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, pockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, combinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, countdownend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, pots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, winners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, begininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, compareplayers_),
  };
  S2CAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CAction_descriptor_,
      S2CAction::default_instance_,
      S2CAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CAction));
  ComparePokerPlayer_descriptor_ = file->message_type(148);
  static const int ComparePokerPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, pockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, combinepockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, combinenum_),
  };
  ComparePokerPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComparePokerPlayer_descriptor_,
      ComparePokerPlayer::default_instance_,
      ComparePokerPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparePokerPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComparePokerPlayer));
  PockerBegin_descriptor_ = file->message_type(149);
  static const int PockerBegin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, dealeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, smblinduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, bigblinduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, attenduids_),
  };
  PockerBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PockerBegin_descriptor_,
      PockerBegin::default_instance_,
      PockerBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PockerBegin));
  S2CPockerManInfo_descriptor_ = file->message_type(150);
  static const int S2CPockerManInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, bestpocker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, lv_),
  };
  S2CPockerManInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CPockerManInfo_descriptor_,
      S2CPockerManInfo::default_instance_,
      S2CPockerManInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CPockerManInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CPockerManInfo));
  PockerManBase_descriptor_ = file->message_type(151);
  static const int PockerManBase_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, headerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, drops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, pockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, deskidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, sex_),
  };
  PockerManBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PockerManBase_descriptor_,
      PockerManBase::default_instance_,
      PockerManBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerManBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PockerManBase));
  Pocker_descriptor_ = file->message_type(152);
  static const int Pocker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pocker, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pocker, num_),
  };
  Pocker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pocker_descriptor_,
      Pocker::default_instance_,
      Pocker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pocker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pocker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pocker));
  PockerRoomBase_descriptor_ = file->message_type(153);
  static const int PockerRoomBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, pockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, pots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, dealeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, smallblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, bigblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, roomno_),
  };
  PockerRoomBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PockerRoomBase_descriptor_,
      PockerRoomBase::default_instance_,
      PockerRoomBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PockerRoomBase));
  PockerRoomInfo_descriptor_ = file->message_type(154);
  static const int PockerRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomInfo, roombase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomInfo, code_),
  };
  PockerRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PockerRoomInfo_descriptor_,
      PockerRoomInfo::default_instance_,
      PockerRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PockerRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PockerRoomInfo));
  LeavePockerRoom_descriptor_ = file->message_type(155);
  static const int LeavePockerRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePockerRoom, uid_),
  };
  LeavePockerRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeavePockerRoom_descriptor_,
      LeavePockerRoom::default_instance_,
      LeavePockerRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePockerRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePockerRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeavePockerRoom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBaseInfo_descriptor_, &PlayerBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerExtraInfo_descriptor_, &PlayerExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItem_descriptor_, &BagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemNofity_descriptor_, &BagItemNofity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signature_descriptor_, &Signature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTask_descriptor_, &DailyTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankruptInfo_descriptor_, &BankruptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreNofify_descriptor_, &ScoreNofify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginCnsInfo_descriptor_, &LoginCnsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceNotify_descriptor_, &ResourceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineBody_descriptor_, &OnlineBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineInfo_descriptor_, &OnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlinePlayerReq_descriptor_, &OnlinePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlinePlayerMsg_descriptor_, &OnlinePlayerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMsg_descriptor_, &NotifyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatRst_descriptor_, &HeartBeatRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInRoomNotify_descriptor_, &PlayerInRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfo_descriptor_, &RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMail_descriptor_, &SysMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMailInfo_descriptor_, &PlayerMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReadOneMail_descriptor_, &ReqReadOneMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMailNotify_descriptor_, &RemoveMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMailNotify_descriptor_, &AddMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBroadCast_descriptor_, &ReqBroadCast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadCastNotify_descriptor_, &BroadCastNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightChat_descriptor_, &FightChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFightRoomChat_descriptor_, &ReqFightRoomChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRoomChatNotify_descriptor_, &FightRoomChatNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notice_descriptor_, &Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInsurenceMoney_descriptor_, &ReqInsurenceMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsList_descriptor_, &FriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFriendsList_descriptor_, &RequestFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqString_descriptor_, &ReqString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInt_descriptor_, &ReqInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchFriendNofify_descriptor_, &SearchFriendNofify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqResponseAddFriend_descriptor_, &ReqResponseAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendNofify_descriptor_, &AddFriendNofify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendNofity_descriptor_, &DelFriendNofity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsIdList_descriptor_, &FriendsIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFriendChat_descriptor_, &SendFriendChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineMsgNofity_descriptor_, &OfflineMsgNofity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendStatusNofify_descriptor_, &FriendStatusNofify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorCodeNofify_descriptor_, &ErrorCodeNofify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskFinishNofity_descriptor_, &TaskFinishNofity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTaskShare_descriptor_, &ReqTaskShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRankList_descriptor_, &ReqRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankList_descriptor_, &RankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatedMsg_descriptor_, &FormatedMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberMsg_descriptor_, &NumberMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgArg_descriptor_, &MsgArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuestBindOk_descriptor_, &GuestBindOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingResult_descriptor_, &PingResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPlayerMsg_descriptor_, &KickPlayerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SChatP2P_descriptor_, &C2SChatP2P::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SChatAlliance_descriptor_, &C2SChatAlliance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SChatWorld_descriptor_, &C2SChatWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CChatP2P_descriptor_, &S2CChatP2P::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CChatWorld_descriptor_, &S2CChatWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pattern_descriptor_, &Pattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomREQ_descriptor_, &EnterRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickEnterRoomREQ_descriptor_, &QuickEnterRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomACK_descriptor_, &EnterRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveRoomREQ_descriptor_, &LeaveRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveRoomACK_descriptor_, &LeaveRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountDown_descriptor_, &CountDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightPlayerInfo_descriptor_, &FightPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightCurrentStateInfo_descriptor_, &FightCurrentStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartACK_descriptor_, &GameStartACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionREQ_descriptor_, &ActionREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChiAtionArgs_descriptor_, &ChiAtionArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionACK_descriptor_, &ActionACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionNotifyACK_descriptor_, &ActionNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountdownNotifyACK_descriptor_, &CountdownNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassCardNotifyACK_descriptor_, &PassCardNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassedNotifyACK_descriptor_, &PassedNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MingTang_descriptor_, &MingTang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSuanCoin_descriptor_, &JieSuanCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaerPlayerJieSuanPattern_descriptor_, &DaerPlayerJieSuanPattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSuanNotifyACK_descriptor_, &JieSuanNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSuanAdditionData_descriptor_, &JieSuanAdditionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalJieSuanNotifyACK_descriptor_, &FinalJieSuanNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJCard_descriptor_, &MJCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJPattern_descriptor_, &MJPattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJQuickEnterRoomREQ_descriptor_, &MJQuickEnterRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJEnterRoomACK_descriptor_, &MJEnterRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJLeaveRoomREQ_descriptor_, &MJLeaveRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJLeaveRoomACK_descriptor_, &MJLeaveRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJCountDown_descriptor_, &MJCountDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJFightPlayerInfo_descriptor_, &MJFightPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJFightCurrentStateInfo_descriptor_, &MJFightCurrentStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJGameStartACK_descriptor_, &MJGameStartACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJActionACK_descriptor_, &MJActionACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJActionArgs_descriptor_, &MJActionArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJActionNotifyACK_descriptor_, &MJActionNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJCountdownNotifyACK_descriptor_, &MJCountdownNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJRemoveCardNotifyACK_descriptor_, &MJRemoveCardNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJTieGuiREQ_descriptor_, &MJTieGuiREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJMingTang_descriptor_, &MJMingTang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJPlayerJieSuanInfo_descriptor_, &MJPlayerJieSuanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJJieSuanNotifyACK_descriptor_, &MJJieSuanNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomREQ_descriptor_, &CreateRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomACK_descriptor_, &CreateRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListREQ_descriptor_, &RoomListREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListACK_descriptor_, &RoomListACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSanRoomREQ_descriptor_, &JieSanRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSanPlayerInfo_descriptor_, &JieSanPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSanRoomNotify_descriptor_, &JieSanRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JieSanRoomUpdateStatusNotify_descriptor_, &JieSanRoomUpdateStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterCustomRoomREQ_descriptor_, &EnterCustomRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterCustomRoomACK_descriptor_, &EnterCustomRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveCustomRoomREQ_descriptor_, &LeaveCustomRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveCustomRoomACK_descriptor_, &LeaveCustomRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindRoomREQ_descriptor_, &FindRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindRoomACK_descriptor_, &FindRoomACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceLeaveRoomREQ_descriptor_, &ForceLeaveRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFirendsJionCustomRoomREQ_descriptor_, &InviteFirendsJionCustomRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFirendsJionCustomRoomNotify_descriptor_, &InviteFirendsJionCustomRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherPlayerInfo_descriptor_, &OtherPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherPlayerInfoREQ_descriptor_, &OtherPlayerInfoREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchListREQ_descriptor_, &MatchListREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchListACK_descriptor_, &MatchListACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_descriptor_, &Match::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnrollREQ_descriptor_, &EnrollREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnrollACK_descriptor_, &EnrollACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawREQ_descriptor_, &WithdrawREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawACK_descriptor_, &WithdrawACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmountChangeNotifyACK_descriptor_, &AmountChangeNotifyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartEntranceACK_descriptor_, &StartEntranceACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderInfoNofity_descriptor_, &OrderInfoNofity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayResultNotify_descriptor_, &PayResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerQuickEnterRoomREQ_descriptor_, &PokerQuickEnterRoomREQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePockerRoomReq_descriptor_, &CreatePockerRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePockerRoomAck_descriptor_, &CreatePockerRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SAction_descriptor_, &C2SAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CAction_descriptor_, &S2CAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComparePokerPlayer_descriptor_, &ComparePokerPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PockerBegin_descriptor_, &PockerBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CPockerManInfo_descriptor_, &S2CPockerManInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PockerManBase_descriptor_, &PockerManBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pocker_descriptor_, &Pocker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PockerRoomBase_descriptor_, &PockerRoomBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PockerRoomInfo_descriptor_, &PockerRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeavePockerRoom_descriptor_, &LeavePockerRoom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete PlayerBaseInfo::default_instance_;
  delete PlayerBaseInfo_reflection_;
  delete PlayerExtraInfo::default_instance_;
  delete PlayerExtraInfo_reflection_;
  delete BagItem::default_instance_;
  delete BagItem_reflection_;
  delete BagItemNofity::default_instance_;
  delete BagItemNofity_reflection_;
  delete Signature::default_instance_;
  delete Signature_reflection_;
  delete DailyTask::default_instance_;
  delete DailyTask_reflection_;
  delete Score::default_instance_;
  delete Score_reflection_;
  delete BankruptInfo::default_instance_;
  delete BankruptInfo_reflection_;
  delete ScoreNofify::default_instance_;
  delete ScoreNofify_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete LoginCnsInfo::default_instance_;
  delete LoginCnsInfo_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete ResourceNotify::default_instance_;
  delete ResourceNotify_reflection_;
  delete OnlineBody::default_instance_;
  delete OnlineBody_reflection_;
  delete OnlineInfo::default_instance_;
  delete OnlineInfo_reflection_;
  delete OnlinePlayerReq::default_instance_;
  delete OnlinePlayerReq_reflection_;
  delete OnlinePlayerMsg::default_instance_;
  delete OnlinePlayerMsg_reflection_;
  delete NotifyMsg::default_instance_;
  delete NotifyMsg_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete HeartBeatRst::default_instance_;
  delete HeartBeatRst_reflection_;
  delete PlayerInRoomNotify::default_instance_;
  delete PlayerInRoomNotify_reflection_;
  delete RoleInfo::default_instance_;
  delete RoleInfo_reflection_;
  delete SysMail::default_instance_;
  delete SysMail_reflection_;
  delete PlayerMailInfo::default_instance_;
  delete PlayerMailInfo_reflection_;
  delete ReqReadOneMail::default_instance_;
  delete ReqReadOneMail_reflection_;
  delete RemoveMailNotify::default_instance_;
  delete RemoveMailNotify_reflection_;
  delete AddMailNotify::default_instance_;
  delete AddMailNotify_reflection_;
  delete ReqBroadCast::default_instance_;
  delete ReqBroadCast_reflection_;
  delete BroadCastNotify::default_instance_;
  delete BroadCastNotify_reflection_;
  delete FightChat::default_instance_;
  delete FightChat_reflection_;
  delete ReqFightRoomChat::default_instance_;
  delete ReqFightRoomChat_reflection_;
  delete FightRoomChatNotify::default_instance_;
  delete FightRoomChatNotify_reflection_;
  delete Notice::default_instance_;
  delete Notice_reflection_;
  delete ReqInsurenceMoney::default_instance_;
  delete ReqInsurenceMoney_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete FriendsList::default_instance_;
  delete FriendsList_reflection_;
  delete RequestFriendsList::default_instance_;
  delete RequestFriendsList_reflection_;
  delete ReqString::default_instance_;
  delete ReqString_reflection_;
  delete ReqInt::default_instance_;
  delete ReqInt_reflection_;
  delete SearchFriendNofify::default_instance_;
  delete SearchFriendNofify_reflection_;
  delete ReqResponseAddFriend::default_instance_;
  delete ReqResponseAddFriend_reflection_;
  delete AddFriendNofify::default_instance_;
  delete AddFriendNofify_reflection_;
  delete DelFriendNofity::default_instance_;
  delete DelFriendNofity_reflection_;
  delete FriendsIdList::default_instance_;
  delete FriendsIdList_reflection_;
  delete SendFriendChat::default_instance_;
  delete SendFriendChat_reflection_;
  delete OfflineMsgNofity::default_instance_;
  delete OfflineMsgNofity_reflection_;
  delete FriendStatusNofify::default_instance_;
  delete FriendStatusNofify_reflection_;
  delete ErrorCodeNofify::default_instance_;
  delete ErrorCodeNofify_reflection_;
  delete TaskFinishNofity::default_instance_;
  delete TaskFinishNofity_reflection_;
  delete ReqTaskShare::default_instance_;
  delete ReqTaskShare_reflection_;
  delete ReqRankList::default_instance_;
  delete ReqRankList_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete RankList::default_instance_;
  delete RankList_reflection_;
  delete FormatedMsg::default_instance_;
  delete FormatedMsg_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete NumberMsg::default_instance_;
  delete NumberMsg_reflection_;
  delete MsgArg::default_instance_;
  delete MsgArg_reflection_;
  delete GuestBindOk::default_instance_;
  delete GuestBindOk_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete PingResult::default_instance_;
  delete PingResult_reflection_;
  delete KickPlayerMsg::default_instance_;
  delete KickPlayerMsg_reflection_;
  delete C2SChatP2P::default_instance_;
  delete C2SChatP2P_reflection_;
  delete C2SChatAlliance::default_instance_;
  delete C2SChatAlliance_reflection_;
  delete C2SChatWorld::default_instance_;
  delete C2SChatWorld_reflection_;
  delete S2CChatP2P::default_instance_;
  delete S2CChatP2P_reflection_;
  delete S2CChatWorld::default_instance_;
  delete S2CChatWorld_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete Pattern::default_instance_;
  delete Pattern_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete EnterRoomREQ::default_instance_;
  delete EnterRoomREQ_reflection_;
  delete QuickEnterRoomREQ::default_instance_;
  delete QuickEnterRoomREQ_reflection_;
  delete EnterRoomACK::default_instance_;
  delete EnterRoomACK_reflection_;
  delete LeaveRoomREQ::default_instance_;
  delete LeaveRoomREQ_reflection_;
  delete LeaveRoomACK::default_instance_;
  delete LeaveRoomACK_reflection_;
  delete CountDown::default_instance_;
  delete CountDown_reflection_;
  delete FightPlayerInfo::default_instance_;
  delete FightPlayerInfo_reflection_;
  delete FightCurrentStateInfo::default_instance_;
  delete FightCurrentStateInfo_reflection_;
  delete GameStartACK::default_instance_;
  delete GameStartACK_reflection_;
  delete ActionREQ::default_instance_;
  delete ActionREQ_reflection_;
  delete ChiAtionArgs::default_instance_;
  delete ChiAtionArgs_reflection_;
  delete ActionACK::default_instance_;
  delete ActionACK_reflection_;
  delete ActionNotifyACK::default_instance_;
  delete ActionNotifyACK_reflection_;
  delete CountdownNotifyACK::default_instance_;
  delete CountdownNotifyACK_reflection_;
  delete PassCardNotifyACK::default_instance_;
  delete PassCardNotifyACK_reflection_;
  delete PassedNotifyACK::default_instance_;
  delete PassedNotifyACK_reflection_;
  delete MingTang::default_instance_;
  delete MingTang_reflection_;
  delete JieSuanCoin::default_instance_;
  delete JieSuanCoin_reflection_;
  delete DaerPlayerJieSuanPattern::default_instance_;
  delete DaerPlayerJieSuanPattern_reflection_;
  delete JieSuanNotifyACK::default_instance_;
  delete JieSuanNotifyACK_reflection_;
  delete JieSuanAdditionData::default_instance_;
  delete JieSuanAdditionData_reflection_;
  delete FinalJieSuanNotifyACK::default_instance_;
  delete FinalJieSuanNotifyACK_reflection_;
  delete MJCard::default_instance_;
  delete MJCard_reflection_;
  delete MJPattern::default_instance_;
  delete MJPattern_reflection_;
  delete MJQuickEnterRoomREQ::default_instance_;
  delete MJQuickEnterRoomREQ_reflection_;
  delete MJEnterRoomACK::default_instance_;
  delete MJEnterRoomACK_reflection_;
  delete MJLeaveRoomREQ::default_instance_;
  delete MJLeaveRoomREQ_reflection_;
  delete MJLeaveRoomACK::default_instance_;
  delete MJLeaveRoomACK_reflection_;
  delete MJCountDown::default_instance_;
  delete MJCountDown_reflection_;
  delete MJFightPlayerInfo::default_instance_;
  delete MJFightPlayerInfo_reflection_;
  delete MJFightCurrentStateInfo::default_instance_;
  delete MJFightCurrentStateInfo_reflection_;
  delete MJGameStartACK::default_instance_;
  delete MJGameStartACK_reflection_;
  delete MJActionACK::default_instance_;
  delete MJActionACK_reflection_;
  delete MJActionArgs::default_instance_;
  delete MJActionArgs_reflection_;
  delete MJActionNotifyACK::default_instance_;
  delete MJActionNotifyACK_reflection_;
  delete MJCountdownNotifyACK::default_instance_;
  delete MJCountdownNotifyACK_reflection_;
  delete MJRemoveCardNotifyACK::default_instance_;
  delete MJRemoveCardNotifyACK_reflection_;
  delete MJTieGuiREQ::default_instance_;
  delete MJTieGuiREQ_reflection_;
  delete MJMingTang::default_instance_;
  delete MJMingTang_reflection_;
  delete MJPlayerJieSuanInfo::default_instance_;
  delete MJPlayerJieSuanInfo_reflection_;
  delete MJJieSuanNotifyACK::default_instance_;
  delete MJJieSuanNotifyACK_reflection_;
  delete CreateRoomREQ::default_instance_;
  delete CreateRoomREQ_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete CreateRoomACK::default_instance_;
  delete CreateRoomACK_reflection_;
  delete RoomListREQ::default_instance_;
  delete RoomListREQ_reflection_;
  delete RoomListACK::default_instance_;
  delete RoomListACK_reflection_;
  delete JieSanRoomREQ::default_instance_;
  delete JieSanRoomREQ_reflection_;
  delete JieSanPlayerInfo::default_instance_;
  delete JieSanPlayerInfo_reflection_;
  delete JieSanRoomNotify::default_instance_;
  delete JieSanRoomNotify_reflection_;
  delete JieSanRoomUpdateStatusNotify::default_instance_;
  delete JieSanRoomUpdateStatusNotify_reflection_;
  delete EnterCustomRoomREQ::default_instance_;
  delete EnterCustomRoomREQ_reflection_;
  delete EnterCustomRoomACK::default_instance_;
  delete EnterCustomRoomACK_reflection_;
  delete LeaveCustomRoomREQ::default_instance_;
  delete LeaveCustomRoomREQ_reflection_;
  delete LeaveCustomRoomACK::default_instance_;
  delete LeaveCustomRoomACK_reflection_;
  delete FindRoomREQ::default_instance_;
  delete FindRoomREQ_reflection_;
  delete FindRoomACK::default_instance_;
  delete FindRoomACK_reflection_;
  delete ForceLeaveRoomREQ::default_instance_;
  delete ForceLeaveRoomREQ_reflection_;
  delete InviteFirendsJionCustomRoomREQ::default_instance_;
  delete InviteFirendsJionCustomRoomREQ_reflection_;
  delete InviteFirendsJionCustomRoomNotify::default_instance_;
  delete InviteFirendsJionCustomRoomNotify_reflection_;
  delete OtherPlayerInfo::default_instance_;
  delete OtherPlayerInfo_reflection_;
  delete OtherPlayerInfoREQ::default_instance_;
  delete OtherPlayerInfoREQ_reflection_;
  delete MatchListREQ::default_instance_;
  delete MatchListREQ_reflection_;
  delete MatchListACK::default_instance_;
  delete MatchListACK_reflection_;
  delete Match::default_instance_;
  delete Match_reflection_;
  delete EnrollREQ::default_instance_;
  delete EnrollREQ_reflection_;
  delete EnrollACK::default_instance_;
  delete EnrollACK_reflection_;
  delete WithdrawREQ::default_instance_;
  delete WithdrawREQ_reflection_;
  delete WithdrawACK::default_instance_;
  delete WithdrawACK_reflection_;
  delete AmountChangeNotifyACK::default_instance_;
  delete AmountChangeNotifyACK_reflection_;
  delete StartEntranceACK::default_instance_;
  delete StartEntranceACK_reflection_;
  delete OrderInfoNofity::default_instance_;
  delete OrderInfoNofity_reflection_;
  delete PayResultNotify::default_instance_;
  delete PayResultNotify_reflection_;
  delete PokerQuickEnterRoomREQ::default_instance_;
  delete PokerQuickEnterRoomREQ_reflection_;
  delete CreatePockerRoomReq::default_instance_;
  delete CreatePockerRoomReq_reflection_;
  delete CreatePockerRoomAck::default_instance_;
  delete CreatePockerRoomAck_reflection_;
  delete C2SAction::default_instance_;
  delete C2SAction_reflection_;
  delete S2CAction::default_instance_;
  delete S2CAction_reflection_;
  delete ComparePokerPlayer::default_instance_;
  delete ComparePokerPlayer_reflection_;
  delete PockerBegin::default_instance_;
  delete PockerBegin_reflection_;
  delete S2CPockerManInfo::default_instance_;
  delete S2CPockerManInfo_reflection_;
  delete PockerManBase::default_instance_;
  delete PockerManBase_reflection_;
  delete Pocker::default_instance_;
  delete Pocker_reflection_;
  delete PockerRoomBase::default_instance_;
  delete PockerRoomBase_reflection_;
  delete PockerRoomInfo::default_instance_;
  delete PockerRoomInfo_reflection_;
  delete LeavePockerRoom::default_instance_;
  delete LeavePockerRoom_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\003rpc\"\235\003\n\016PlayerBaseInfo\022\013\n\003u"
    "id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\013\n\003sex\030\003 \001(\005\022\r\n\005l"
    "evel\030\004 \002(\005\022\013\n\003exp\030\005 \001(\005\022\022\n\nvipLeftDay\030\006 "
    "\001(\005\022\016\n\006header\030\007 \001(\005\022\014\n\004coin\030\010 \001(\005\022\013\n\003gem"
    "\030\t \001(\005\022\016\n\006roleId\030\n \001(\005\022\020\n\010gameType\030\013 \001(\t"
    "\022\020\n\010roomType\030\014 \001(\005\022\021\n\tinsurCoin\030\r \001(\005\022\023\n"
    "\013accountType\030\016 \001(\005\022\022\n\nfriendUids\030\017 \003(\t\022\021"
    "\n\theaderUrl\030\020 \001(\t\022\r\n\005phone\030\021 \001(\t\022\023\n\013bMod"
    "ifyName\030\022 \001(\010\022\022\n\nbModifySex\030\023 \001(\010\022\025\n\rlas"
    "tLoginTime\030\024 \001(\005\022\017\n\007profits\030\025 \001(\005\022\020\n\010exp"
    "Total\030\026 \001(\005\022\023\n\013vipOpenTime\030\027 \001(\005\"\254\001\n\017Pla"
    "yerExtraInfo\022\033\n\005items\030\001 \003(\0132\014.rpc.BagIte"
    "m\022\034\n\004sign\030\002 \001(\0132\016.rpc.Signature\022\035\n\005tasks"
    "\030\003 \001(\0132\016.rpc.DailyTask\022\032\n\006scores\030\004 \003(\0132\n"
    ".rpc.Score\022#\n\010bankrupt\030\005 \001(\0132\021.rpc.Bankr"
    "uptInfo\"\"\n\007BagItem\022\n\n\002id\030\001 \002(\t\022\013\n\003num\030\002 "
    "\002(\005\",\n\rBagItemNofity\022\033\n\005items\030\001 \003(\0132\014.rp"
    "c.BagItem\"e\n\tSignature\022\r\n\005month\030\001 \001(\005\022\r\n"
    "\005signs\030\002 \003(\005\022\020\n\010lastSign\030\003 \001(\005\022\020\n\010contiD"
    "ay\030\004 \001(\005\022\026\n\016contiRewardTms\030\005 \001(\005\"\317\001\n\tDai"
    "lyTask\022\021\n\tresetTime\030\001 \001(\005\022\017\n\007doneIds\030\002 \003"
    "(\005\022\016\n\006getIds\030\003 \003(\005\022\016\n\006shares\030\004 \001(\005\022\021\n\tsh"
    "areFris\030\005 \001(\005\022\017\n\007daerTms\030\006 \001(\005\022\r\n\005mjTms\030"
    "\007 \001(\005\022\020\n\010pokerTms\030\010 \001(\005\022\022\n\nwinDaerTms\030\t "
    "\001(\005\022\020\n\010winMjTms\030\n \001(\005\022\023\n\013winPokerTms\030\013 \001"
    "(\005\"0\n\005Score\022\014\n\004name\030\001 \002(\t\022\013\n\003win\030\002 \002(\005\022\014"
    "\n\004loss\030\003 \002(\005\"1\n\014BankruptInfo\022\014\n\004time\030\001 \001"
    "(\005\022\023\n\013rewardTimes\030\002 \001(\005\")\n\013ScoreNofify\022\032"
    "\n\006scores\030\001 \003(\0132\n.rpc.Score\"5\n\007Request\022\016\n"
    "\006method\030\001 \002(\t\022\032\n\022serialized_request\030\002 \001("
    "\014\"~\n\014LoginCnsInfo\022\r\n\005cnsIp\030\001 \002(\t\022\016\n\006gsIn"
    "fo\030\002 \002(\t\022\022\n\nversionOld\030\003 \001(\005\022\022\n\nversionN"
    "ew\030\004 \001(\005\022\023\n\013downloadUrl\030\005 \001(\t\022\022\n\nversion"
    "Mid\030\006 \001(\005\"}\n\005Login\022\013\n\003uid\030\001 \001(\t\022\016\n\006openi"
    "d\030\002 \001(\t\022\016\n\006roleId\030\003 \001(\005\022\021\n\theaderUrl\030\004 \001"
    "(\t\022\020\n\010nickName\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\022\025\n\rcli"
    "entVersion\030\007 \001(\t\"o\n\013LoginResult\022\016\n\006resul"
    "t\030\001 \002(\t\022\023\n\013server_time\030\002 \002(\003\022\016\n\006errmsg\030\003"
    " \001(\t\022\016\n\006openid\030\004 \001(\t\022\013\n\003uid\030\005 \001(\t\022\016\n\006rol"
    "eId\030\006 \001(\005\"T\n\nPlayerInfo\022!\n\004base\030\001 \002(\0132\023."
    "rpc.PlayerBaseInfo\022#\n\005extra\030\002 \001(\0132\024.rpc."
    "PlayerExtraInfo\"Z\n\016ResourceNotify\022\014\n\004coi"
    "n\030\001 \001(\005\022\013\n\003gem\030\002 \001(\005\022\021\n\tinsurCoin\030\003 \001(\005\022"
    "\r\n\005level\030\004 \001(\005\022\013\n\003exp\030\005 \001(\005\")\n\nOnlineBod"
    "y\022\016\n\006roomId\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"+\n\nOnline"
    "Info\022\035\n\004info\030\001 \003(\0132\017.rpc.OnlineBody\"\"\n\017O"
    "nlinePlayerReq\022\017\n\007partIds\030\001 \003(\005\"y\n\017Onlin"
    "ePlayerMsg\022!\n\010daerInfo\030\001 \001(\0132\017.rpc.Onlin"
    "eInfo\022\037\n\006mjInfo\030\002 \001(\0132\017.rpc.OnlineInfo\022\""
    "\n\tpokerInfo\030\003 \001(\0132\017.rpc.OnlineInfo\"\032\n\tNo"
    "tifyMsg\022\r\n\005txtId\030\001 \001(\t\"\013\n\tHeartBeat\"\034\n\014H"
    "eartBeatRst\022\014\n\004time\030\001 \001(\003\"8\n\022PlayerInRoo"
    "mNotify\022\020\n\010gameType\030\001 \002(\t\022\020\n\010roomType\030\002 "
    "\002(\005\"4\n\010RoleInfo\022\014\n\004name\030\001 \001(\t\022\013\n\003sex\030\002 \001"
    "(\005\022\r\n\005phone\030\003 \001(\t\"\220\001\n\007SysMail\022\016\n\006mailId\030"
    "\001 \002(\t\022\017\n\007version\030\002 \002(\005\022\r\n\005title\030\003 \002(\t\022\017\n"
    "\007content\030\004 \002(\t\022\020\n\010sendtime\030\005 \002(\005\022\016\n\006atta"
    "ch\030\006 \001(\t\022\023\n\013overduetime\030\007 \001(\005\022\r\n\005bRead\030\010"
    " \001(\010\"I\n\016PlayerMailInfo\022\027\n\017sysmail_versio"
    "n\030\001 \002(\005\022\036\n\010maillist\030\002 \003(\0132\014.rpc.SysMail\""
    " \n\016ReqReadOneMail\022\016\n\006mailId\030\001 \002(\t\"#\n\020Rem"
    "oveMailNotify\022\017\n\007mailIds\030\001 \003(\005\"/\n\rAddMai"
    "lNotify\022\036\n\010maillist\030\001 \003(\0132\014.rpc.SysMail\""
    "S\n\014ReqBroadCast\022\020\n\010playerID\030\001 \002(\t\022\017\n\007con"
    "tent\030\002 \001(\t\022\014\n\004bVip\030\003 \001(\010\022\022\n\nplayerName\030\004"
    " \001(\t\"|\n\017BroadCastNotify\022\023\n\013broadCastID\030\001"
    " \002(\005\022\020\n\010sysBroad\030\002 \002(\010\022\017\n\007content\030\003 \002(\t\022"
    "\022\n\nplayerName\030\004 \001(\t\022\020\n\010playerID\030\005 \001(\t\022\013\n"
    "\003vip\030\006 \001(\010\"\223\001\n\tFightChat\022\020\n\010chatType\030\001 \001"
    "(\005\022\016\n\006faceID\030\002 \001(\005\022\021\n\tfixWordID\030\003 \001(\005\022\020\n"
    "\010gameType\030\004 \001(\t\022\025\n\rcustomContent\030\005 \001(\t\022\016"
    "\n\006itemId\030\006 \001(\t\022\030\n\020receiverPlayerID\030\007 \001(\t"
    "\"J\n\020ReqFightRoomChat\022\020\n\010playerID\030\001 \002(\t\022$"
    "\n\014fighChatinfo\030\002 \002(\0132\016.rpc.FightChat\"^\n\023"
    "FightRoomChatNotify\022\020\n\010playerID\030\001 \002(\t\022$\n"
    "\014fighChatinfo\030\002 \001(\0132\016.rpc.FightChat\022\017\n\007o"
    "ffline\030\003 \001(\010\"\031\n\006Notice\022\017\n\007content\030\001 \002(\t\""
    "5\n\021ReqInsurenceMoney\022\021\n\tbWithdraw\030\001 \002(\010\022"
    "\r\n\005value\030\002 \002(\005\"\313\001\n\006Player\022\014\n\004name\030\001 \002(\t\022"
    "\013\n\003sex\030\002 \001(\005\022\r\n\005level\030\003 \002(\005\022\016\n\006header\030\004 "
    "\001(\005\022\016\n\006roleId\030\005 \001(\005\022\021\n\theaderUrl\030\006 \001(\t\022\013"
    "\n\003uid\030\007 \001(\t\022\017\n\007bOnline\030\010 \001(\010\022\013\n\003exp\030\t \001("
    "\005\022\014\n\004coin\030\n \001(\005\022\032\n\006scores\030\013 \003(\0132\n.rpc.Sc"
    "ore\022\017\n\007diamond\030\014 \001(\005\"+\n\013FriendsList\022\034\n\007f"
    "riends\030\001 \003(\0132\013.rpc.Player\"2\n\022RequestFrie"
    "ndsList\022\034\n\007friends\030\001 \003(\0132\013.rpc.Player\"\027\n"
    "\tReqString\022\n\n\002id\030\001 \001(\t\"\024\n\006ReqInt\022\n\n\002id\030\001"
    " \001(\005\"1\n\022SearchFriendNofify\022\033\n\006player\030\001 \001"
    "(\0132\013.rpc.Player\"4\n\024ReqResponseAddFriend\022"
    "\013\n\003uid\030\001 \002(\t\022\017\n\007bAccept\030\002 \001(\010\"\036\n\017AddFrie"
    "ndNofify\022\013\n\003rst\030\001 \002(\005\"*\n\017DelFriendNofity"
    "\022\013\n\003rst\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\" \n\rFriendsIdLi"
    "st\022\017\n\007friends\030\001 \003(\t\"X\n\016SendFriendChat\022\021\n"
    "\tsenderUid\030\001 \002(\t\022\023\n\013receiverUid\030\002 \002(\t\022\014\n"
    "\004text\030\003 \002(\t\022\020\n\010sendtime\030\004 \001(\005\"9\n\020Offline"
    "MsgNofity\022%\n\010chatInfo\030\001 \003(\0132\023.rpc.SendFr"
    "iendChat\"2\n\022FriendStatusNofify\022\013\n\003uid\030\001 "
    "\002(\t\022\017\n\007bOnline\030\002 \002(\010\"\037\n\017ErrorCodeNofify\022"
    "\014\n\004code\030\001 \001(\005\"\"\n\020TaskFinishNofity\022\016\n\006tas"
    "kId\030\001 \001(\t\"%\n\014ReqTaskShare\022\025\n\rbShare2Frie"
    "nd\030\001 \001(\010\"\037\n\013ReqRankList\022\020\n\010rankType\030\001 \002("
    "\005\"\276\001\n\010RankInfo\022\013\n\003uid\030\001 \002(\t\022\016\n\006roleId\030\002 "
    "\002(\005\022\013\n\003sex\030\003 \002(\005\022\014\n\004name\030\004 \002(\t\022\r\n\005level\030"
    "\005 \002(\005\022\013\n\003exp\030\006 \002(\005\022\014\n\004bVip\030\007 \002(\010\022\014\n\004coin"
    "\030\010 \002(\005\022\013\n\003gem\030\t \002(\005\022\021\n\theaderUrl\030\n \002(\t\022\021"
    "\n\trankValue\030\013 \002(\003\022\017\n\007rankNum\030\014 \001(\005\"=\n\010Ra"
    "nkList\022\037\n\010rankList\030\001 \003(\0132\r.rpc.RankInfo\022"
    "\020\n\010rankType\030\002 \002(\005\"6\n\013FormatedMsg\022\014\n\004code"
    "\030\001 \002(\t\022\031\n\004args\030\002 \003(\0132\013.rpc.MsgArg\"!\n\003Msg"
    "\022\014\n\004code\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\"\032\n\tNumberMs"
    "g\022\r\n\005value\030\001 \001(\005\"\036\n\006MsgArg\022\t\n\001s\030\001 \001(\t\022\t\n"
    "\001i\030\002 \001(\005\"\036\n\013GuestBindOk\022\017\n\007success\030\001 \001(\010"
    "\"\032\n\004Ping\022\022\n\nClientTime\030\001 \001(\003\"!\n\nPingResu"
    "lt\022\023\n\013server_time\030\001 \002(\005\"\035\n\rKickPlayerMsg"
    "\022\014\n\004time\030\001 \001(\005\"5\n\nC2SChatP2P\022\022\n\nToPlayer"
    "Id\030\001 \002(\t\022\023\n\013ChatContent\030\002 \002(\t\"H\n\017C2SChat"
    "Alliance\022\023\n\013ChatContent\030\001 \002(\t\022\r\n\005useIM\030\002"
    " \001(\010\022\021\n\tvoiceTime\030\003 \001(\t\"E\n\014C2SChatWorld\022"
    "\023\n\013ChatContent\030\001 \002(\t\022\r\n\005useIM\030\002 \001(\010\022\021\n\tv"
    "oiceTime\030\003 \001(\t\"h\n\nS2CChatP2P\022\024\n\014FromPlay"
    "erId\030\001 \002(\t\022\026\n\016FromPlayerName\030\002 \002(\t\022\027\n\017Fr"
    "omPlayerLevel\030\003 \002(\005\022\023\n\013ChatContent\030\004 \002(\t"
    "\"\261\001\n\014S2CChatWorld\022\024\n\014FromPlayerId\030\001 \002(\t\022"
    "\026\n\016FromPlayerName\030\002 \002(\t\022\027\n\017FromPlayerLev"
    "el\030\003 \002(\005\022\020\n\010ChatTime\030\006 \002(\003\022\023\n\013ChatConten"
    "t\030\007 \002(\t\022\r\n\005useIM\030\n \001(\010\022\021\n\tvoiceTime\030\013 \001("
    "\t\022\021\n\tmessageId\030\014 \001(\005\"M\n\004Card\022\r\n\005value\030\001 "
    "\002(\005\022\014\n\004bBig\030\002 \002(\010\022\r\n\005bLock\030\003 \002(\010\022\014\n\004bChi"
    "\030\004 \001(\010\022\013\n\003bHu\030\005 \001(\010\">\n\007Pattern\022\r\n\005ptype\030"
    "\001 \001(\005\022\030\n\005cards\030\002 \003(\0132\t.rpc.Card\022\n\n\002hu\030\003 "
    "\001(\005\"a\n\010UserInfo\022\017\n\007playeID\030\001 \002(\t\022\014\n\004name"
    "\030\002 \002(\t\022\r\n\005coins\030\003 \002(\005\022\014\n\004bVip\030\004 \001(\010\022\014\n\004h"
    "ead\030\005 \002(\t\022\013\n\003sex\030\006 \002(\005\"2\n\014EnterRoomREQ\022\020"
    "\n\010gameType\030\001 \002(\t\022\020\n\010roomType\030\002 \002(\005\"\023\n\021Qu"
    "ickEnterRoomREQ\"\231\001\n\014EnterRoomACK\022\'\n\nplay"
    "erInfo\030\001 \001(\0132\023.rpc.PlayerBaseInfo\022\024\n\014sha"
    "ngjiaType\030\002 \001(\005\022\016\n\006bReady\030\003 \001(\010\022\014\n\004code\030"
    "\004 \001(\005\022\016\n\006roomId\030\005 \001(\005\022\034\n\024isNormalReqEnte"
    "rRoom\030\006 \001(\010\"6\n\014LeaveRoomREQ\022\020\n\010playerID\030"
    "\001 \002(\t\022\024\n\014isChangeDesk\030\002 \002(\010\"6\n\014LeaveRoom"
    "ACK\022\020\n\010playerID\030\001 \002(\t\022\024\n\014isChangeDesk\030\002 "
    "\002(\010\"7\n\tCountDown\022\020\n\010playerID\030\001 \002(\t\022\030\n\020cu"
    "rrentCountDown\030\002 \001(\005\"\266\002\n\017FightPlayerInfo"
    "\022\020\n\010playerID\030\001 \002(\t\022\034\n\thandCards\030\002 \003(\0132\t."
    "rpc.Card\022!\n\013longPattern\030\003 \003(\0132\014.rpc.Patt"
    "ern\022 \n\nkanPattern\030\004 \003(\0132\014.rpc.Pattern\022\036\n"
    "\013erLongTouYi\030\005 \003(\0132\t.rpc.Card\022\036\n\013chuGuoC"
    "ards\030\006 \003(\0132\t.rpc.Card\022*\n\024chiPengZhaoLong"
    "Cards\030\007 \003(\0132\014.rpc.Pattern\022\021\n\tcurrentHu\030\010"
    " \001(\005\022\017\n\007bZhuang\030\t \001(\010\022\014\n\004bBao\030\n \001(\010\022\020\n\010b"
    "TuoGuan\030\013 \001(\010\"\305\001\n\025FightCurrentStateInfo\022"
    "\"\n\017currentDeskCard\030\001 \001(\0132\t.rpc.Card\022,\n\024c"
    "urrentCountDownInfo\030\002 \003(\0132\016.rpc.CountDow"
    "n\022\037\n\027currentDeskCardPlayerID\030\004 \001(\t\022\035\n\025cu"
    "rrentDeskRemainCard\030\005 \002(\005\022\032\n\022bCurrentDes"
    "kCardMo\030\006 \001(\010\"\211\001\n\014GameStartACK\022.\n\020fightP"
    "layersInfo\030\001 \003(\0132\024.rpc.FightPlayerInfo\0225"
    "\n\021currentFightState\030\002 \001(\0132\032.rpc.FightCur"
    "rentStateInfo\022\022\n\nfightState\030\005 \001(\005\"\267\001\n\tAc"
    "tionREQ\022\016\n\006action\030\001 \002(\005\022\020\n\010playerID\030\002 \002("
    "\t\022\036\n\010chiCards\030\003 \001(\0132\014.rpc.Pattern\022\035\n\007biC"
    "ards\030\004 \001(\0132\014.rpc.Pattern\022\031\n\006chuPai\030\005 \001(\013"
    "2\t.rpc.Card\022\035\n\010cardArgs\030\n \001(\0132\013.rpc.MJCa"
    "rd\022\017\n\007sysType\030\006 \002(\005\"q\n\014ChiAtionArgs\022!\n\013c"
    "anChiCards\030\001 \001(\0132\014.rpc.Pattern\022!\n\013needBi"
    "Cards\030\002 \003(\0132\014.rpc.Pattern\022\033\n\010cardArgs\030\003 "
    "\001(\0132\t.rpc.Card\"\266\001\n\tActionACK\022\016\n\006action\030\001"
    " \002(\005\022\020\n\010playerID\030\002 \001(\t\022\033\n\010cardArgs\030\004 \001(\013"
    "2\t.rpc.Card\022*\n\024chiPengZhaoLongCards\030\006 \003("
    "\0132\014.rpc.Pattern\022\020\n\010updateHu\030\007 \001(\005\022\034\n\024cur"
    "renDeskRemianCard\030\010 \001(\005\022\016\n\006result\030\t \002(\005\""
    "J\n\017ActionNotifyACK\022\016\n\006action\030\001 \002(\005\022\'\n\014ch"
    "iAtionArgs\030\003 \003(\0132\021.rpc.ChiAtionArgs\"7\n\022C"
    "ountdownNotifyACK\022!\n\tcountDown\030\001 \002(\0132\016.r"
    "pc.CountDown\">\n\021PassCardNotifyACK\022\020\n\010pla"
    "yerID\030\001 \002(\t\022\027\n\004card\030\002 \002(\0132\t.rpc.Card\"*\n\017"
    "PassedNotifyACK\022\027\n\004card\030\001 \002(\0132\t.rpc.Card"
    "\"+\n\010MingTang\022\020\n\010mingTang\030\001 \002(\005\022\r\n\005value\030"
    "\002 \002(\005\":\n\013JieSuanCoin\022\020\n\010playerID\030\001 \002(\t\022\014"
    "\n\004coin\030\002 \001(\005\022\013\n\003tag\030\003 \001(\005\"\243\001\n\030DaerPlayer"
    "JieSuanPattern\022\020\n\010playerID\030\001 \002(\t\022\n\n\002hu\030\003"
    " \001(\005\022\r\n\005score\030\005 \001(\005\022\036\n\010patterns\030\007 \003(\0132\014."
    "rpc.Pattern\022\037\n\010mingTang\030\t \003(\0132\r.rpc.Ming"
    "Tang\022\014\n\004coin\030\013 \002(\005\022\013\n\003tag\030\r \002(\005\"\254\001\n\020JieS"
    "uanNotifyACK\022\?\n\030daerPlayerJieSuanPattern"
    "\030\001 \003(\0132\035.rpc.DaerPlayerJieSuanPattern\022\032\n"
    "\007diCards\030\007 \003(\0132\t.rpc.Card\022\023\n\013huangZhuang"
    "\030\t \001(\010\022&\n\004addi\030\013 \001(\0132\030.rpc.JieSuanAdditi"
    "onData\"\246\001\n\023JieSuanAdditionData\022\017\n\007sysTyp"
    "e\030\001 \001(\005\022\020\n\010stageEnd\030\002 \001(\010\022\017\n\007success\030\003 \001"
    "(\010\022\036\n\004coin\030\004 \003(\0132\020.rpc.JieSuanCoin\022\023\n\013ji"
    "eSuanTime\030\005 \001(\003\022\020\n\010curTimes\030\006 \001(\005\022\024\n\014con"
    "tinueTime\030\007 \001(\005\"F\n\025FinalJieSuanNotifyACK"
    "\022-\n\013jieSuanInfo\030\001 \002(\0132\030.rpc.JieSuanAddit"
    "ionData\"D\n\006MJCard\022\r\n\005value\030\001 \002(\005\022\r\n\005cTyp"
    "e\030\002 \002(\005\022\016\n\006rcType\030\003 \002(\005\022\014\n\004flag\030\004 \001(\005\"U\n"
    "\tMJPattern\022\r\n\005ptype\030\001 \002(\005\022\r\n\005cType\030\002 \002(\005"
    "\022\032\n\005cards\030\003 \003(\0132\013.rpc.MJCard\022\016\n\006isShow\030\004"
    " \001(\010\"\025\n\023MJQuickEnterRoomREQ\"\227\001\n\016MJEnterR"
    "oomACK\022\'\n\nplayerInfo\030\001 \001(\0132\023.rpc.PlayerB"
    "aseInfo\022\020\n\010location\030\002 \001(\005\022\016\n\006bReady\030\003 \001("
    "\010\022\014\n\004code\030\004 \001(\005\022\016\n\006roomId\030\005 \001(\005\022\034\n\024isNor"
    "malReqEnterRoom\030\006 \001(\010\"8\n\016MJLeaveRoomREQ\022"
    "\020\n\010playerID\030\001 \002(\t\022\024\n\014isChangeDesk\030\002 \002(\010\""
    "8\n\016MJLeaveRoomACK\022\020\n\010playerID\030\001 \002(\t\022\024\n\014i"
    "sChangeDesk\030\002 \002(\010\"9\n\013MJCountDown\022\020\n\010play"
    "erID\030\001 \002(\t\022\030\n\020currentCountDown\030\002 \001(\005\"\367\001\n"
    "\021MJFightPlayerInfo\022\020\n\010playerID\030\001 \002(\t\022\036\n\t"
    "handCards\030\002 \003(\0132\013.rpc.MJCard\022$\n\014showPatt"
    "erns\030\004 \003(\0132\016.rpc.MJPattern\022\035\n\010chuCards\030\006"
    " \003(\0132\013.rpc.MJCard\022\017\n\007bZhuang\030\t \001(\010\022\014\n\004bB"
    "ao\030\n \001(\010\022\020\n\010bTuoGuan\030\013 \001(\010\022\025\n\rhandCardCo"
    "unt\030\014 \001(\005\022#\n\016alreadyCardArg\030\r \001(\0132\013.rpc."
    "MJCard\"\206\001\n\027MJFightCurrentStateInfo\022\030\n\020cu"
    "rrentCountDown\030\002 \002(\005\022\026\n\016activePlayerID\030\003"
    " \002(\t\022\032\n\022lastActivePlayerID\030\004 \001(\t\022\035\n\025curr"
    "entDeskRemainCard\030\005 \002(\005\"\217\001\n\016MJGameStartA"
    "CK\0220\n\020fightPlayersInfo\030\001 \003(\0132\026.rpc.MJFig"
    "htPlayerInfo\0227\n\021currentFightState\030\002 \001(\0132"
    "\034.rpc.MJFightCurrentStateInfo\022\022\n\nfightSt"
    "ate\030\005 \001(\005\"\245\001\n\013MJActionACK\022\016\n\006action\030\001 \002("
    "\005\022\020\n\010playerID\030\002 \001(\t\022\035\n\010cardArgs\030\004 \001(\0132\013."
    "rpc.MJCard\022\'\n\017pengGangPattern\030\006 \003(\0132\016.rp"
    "c.MJPattern\022\034\n\024currenDeskRemianCard\030\010 \001("
    "\005\022\016\n\006result\030\t \002(\005\">\n\014MJActionArgs\022\016\n\006act"
    "ion\030\001 \002(\005\022\036\n\tcardsArgs\030\003 \003(\0132\013.rpc.MJCar"
    "d\"7\n\021MJActionNotifyACK\022\"\n\007actions\030\001 \003(\0132"
    "\021.rpc.MJActionArgs\";\n\024MJCountdownNotifyA"
    "CK\022#\n\tcountDown\030\001 \002(\0132\020.rpc.MJCountDown\""
    "^\n\025MJRemoveCardNotifyACK\022\020\n\010playerID\030\001 \002"
    "(\t\022\030\n\020isRemoveHandCard\030\002 \002(\010\022\031\n\004card\030\003 \002"
    "(\0132\013.rpc.MJCard\"A\n\013MJTieGuiREQ\022\017\n\007bTieGu"
    "i\030\001 \002(\010\022\020\n\010playerID\030\002 \002(\t\022\017\n\007sysType\030\006 \002"
    "(\005\"-\n\nMJMingTang\022\020\n\010mingTang\030\001 \002(\005\022\r\n\005va"
    "lue\030\002 \002(\005\"\207\001\n\023MJPlayerJieSuanInfo\022\020\n\010pla"
    "yerID\030\001 \002(\t\022\014\n\004coin\030\002 \001(\005\022 \n\010patterns\030\006 "
    "\003(\0132\016.rpc.MJPattern\022!\n\010mingTang\030\n \003(\0132\017."
    "rpc.MJMingTang\022\013\n\003tag\030\003 \001(\005\"\206\001\n\022MJJieSua"
    "nNotifyACK\0223\n\021playerJieSuanInfo\030\003 \003(\0132\030."
    "rpc.MJPlayerJieSuanInfo\022\023\n\013huangZhuang\030\t"
    " \001(\010\022&\n\004addi\030\013 \001(\0132\030.rpc.JieSuanAddition"
    "Data\"\273\001\n\rCreateRoomREQ\022\024\n\014currencyType\030\001"
    " \002(\005\022\020\n\010gameType\030\002 \002(\005\022\r\n\005difen\030\004 \001(\005\022\021\n"
    "\tlimitCoin\030\005 \001(\005\022\r\n\005times\030\006 \001(\005\022\023\n\013maxMu"
    "ltiple\030\007 \002(\005\022\020\n\010isDaiGui\030\010 \001(\010\022\024\n\014tiYong"
    "Amount\030\t \001(\005\022\024\n\014qiHuKeAmount\030\n \001(\005\"\302\001\n\010R"
    "oomInfo\022\n\n\002id\030\001 \002(\005\022\024\n\014currencyType\030\002 \002("
    "\005\022\020\n\010gameType\030\003 \002(\005\022\r\n\005difen\030\004 \002(\005\022\021\n\tli"
    "mitCoin\030\005 \002(\005\022\r\n\005times\030\006 \002(\005\022\023\n\013maxMulti"
    "ple\030\007 \002(\005\022\020\n\010isDaiGui\030\010 \001(\010\022\024\n\014tiYongAmo"
    "unt\030\t \001(\005\022\024\n\014qiHuKeAmount\030\n \001(\005\":\n\rCreat"
    "eRoomACK\022\033\n\004room\030\001 \001(\0132\r.rpc.RoomInfo\022\014\n"
    "\004code\030\002 \002(\005\"\r\n\013RoomListREQ\".\n\013RoomListAC"
    "K\022\037\n\010roomList\030\001 \003(\0132\r.rpc.RoomInfo\"\'\n\rJi"
    "eSanRoomREQ\022\026\n\016operatorStatus\030\003 \002(\005\"4\n\020J"
    "ieSanPlayerInfo\022\020\n\010playerID\030\001 \002(\t\022\016\n\006sta"
    "tus\030\003 \002(\005\"W\n\020JieSanRoomNotify\022/\n\020jieSanP"
    "layerInfo\030\001 \003(\0132\025.rpc.JieSanPlayerInfo\022\022"
    "\n\nremainTime\030\003 \002(\005\"O\n\034JieSanRoomUpdateSt"
    "atusNotify\022/\n\020jieSanPlayerInfo\030\001 \002(\0132\025.r"
    "pc.JieSanPlayerInfo\"\?\n\022EnterCustomRoomRE"
    "Q\022\020\n\010gameType\030\001 \002(\t\022\n\n\002id\030\003 \002(\005\022\013\n\003pwd\030\004"
    " \001(\t\"\250\002\n\022EnterCustomRoomACK\022\'\n\nplayerInf"
    "o\030\001 \001(\0132\023.rpc.PlayerBaseInfo\022\024\n\014shangjia"
    "Type\030\002 \001(\005\022\020\n\010location\030\024 \001(\005\022\016\n\006bReady\030\003"
    " \001(\010\022\014\n\004code\030\004 \001(\005\022\016\n\006roomId\030\005 \001(\005\022\020\n\010ga"
    "meType\030\006 \001(\005\022\r\n\005times\030\007 \001(\005\022\020\n\010curTimes\030"
    "\010 \001(\005\022\017\n\007isOwner\030\t \001(\010\022\024\n\014currencyType\030\n"
    " \001(\005\022\r\n\005difen\030\013 \001(\005\022\024\n\014qiHuKeAmount\030\014 \001("
    "\005\022\024\n\014tiYongAmount\030\r \001(\005\"&\n\022LeaveCustomRo"
    "omREQ\022\020\n\010playerID\030\001 \002(\t\"&\n\022LeaveCustomRo"
    "omACK\022\020\n\010playerID\030\001 \002(\t\"\'\n\013FindRoomREQ\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\"8\n\013FindRoomACK\022"
    "\033\n\004room\030\001 \001(\0132\r.rpc.RoomInfo\022\014\n\004code\030\002 \002"
    "(\005\"B\n\021ForceLeaveRoomREQ\022\n\n\002id\030\001 \002(\t\022\017\n\007s"
    "ysType\030\002 \002(\005\022\020\n\010gameType\030\003 \002(\005\"H\n\036Invite"
    "FirendsJionCustomRoomREQ\022\020\n\010playerID\030\001 \003"
    "(\t\022\024\n\014currencyType\030\002 \001(\005\"\203\001\n!InviteFiren"
    "dsJionCustomRoomNotify\022\014\n\004code\030\001 \001(\005\022\020\n\010"
    "gameType\030\002 \001(\t\022\016\n\006roomID\030\003 \001(\005\022\030\n\020invite"
    "PlayerName\030\004 \001(\t\022\024\n\014currencyType\030\005 \001(\005\"\235"
    "\001\n\017OtherPlayerInfo\022\016\n\006userID\030\001 \002(\005\022\020\n\010us"
    "erName\030\002 \002(\005\022\022\n\nuserHeadID\030\003 \001(\005\022\031\n\021user"
    "wechatHeadURL\030\004 \001(\005\022\016\n\006winNum\030\005 \001(\005\022\017\n\007l"
    "oseNum\030\006 \001(\005\022\n\n\002lv\030\007 \001(\005\022\014\n\004coin\030\010 \001(\005\"&"
    "\n\022OtherPlayerInfoREQ\022\020\n\010playerID\030\001 \002(\t\"\016"
    "\n\014MatchListREQ\"+\n\014MatchListACK\022\033\n\007matche"
    "s\030\001 \003(\0132\n.rpc.Match\"<\n\005Match\022\n\n\002id\030\001 \002(\005"
    "\022\024\n\014enrollAmount\030\002 \002(\005\022\021\n\tcountdown\030\003 \001("
    "\003\"\027\n\tEnrollREQ\022\n\n\002id\030\001 \002(\005\"\033\n\tEnrollACK\022"
    "\016\n\006result\030\001 \002(\005\"\031\n\013WithdrawREQ\022\n\n\002id\030\001 \002"
    "(\005\"\035\n\013WithdrawACK\022\016\n\006result\030\001 \002(\005\"4\n\025Amo"
    "untChangeNotifyACK\022\033\n\007matches\030\001 \003(\0132\n.rp"
    "c.Match\"-\n\020StartEntranceACK\022\031\n\005match\030\001 \002"
    "(\0132\n.rpc.Match\"\211\001\n\017OrderInfoNofity\022\021\n\tpa"
    "rtnerId\030\001 \001(\t\022\020\n\010prepayId\030\002 \001(\t\022\017\n\007packa"
    "ge\030\003 \001(\t\022\020\n\010nonceStr\030\004 \001(\t\022\021\n\ttimeStamp\030"
    "\005 \001(\005\022\014\n\004sign\030\006 \001(\t\022\r\n\005appId\030\007 \001(\t\"X\n\017Pa"
    "yResultNotify\022\021\n\tpartnerId\030\001 \001(\t\022\016\n\006resu"
    "lt\030\002 \001(\010\022\022\n\nerror_desc\030\003 \001(\t\022\016\n\006vipDay\030\004"
    " \001(\005\"\030\n\026PokerQuickEnterRoomREQ\"B\n\023Create"
    "PockerRoomReq\022\013\n\003uid\030\001 \001(\t\022\017\n\007BlindId\030\002 "
    "\001(\005\022\r\n\005LimId\030\003 \001(\005\"%\n\023CreatePockerRoomAc"
    "k\022\016\n\006roomNo\030\001 \001(\005\"W\n\tC2SAction\022\013\n\003act\030\001 "
    "\001(\005\022\013\n\003uid\030\002 \001(\t\022\r\n\005raise\030\003 \001(\005\022!\n\004base\030"
    "\004 \001(\0132\023.rpc.PlayerBaseInfo\"\231\002\n\tS2CAction"
    "\022\020\n\010operater\030\001 \001(\t\022\013\n\003act\030\002 \001(\005\022\r\n\005raise"
    "\030\003 \001(\005\022\034\n\007pockers\030\004 \003(\0132\013.rpc.Pocker\022\022\n\n"
    "combineNum\030\005 \001(\005\022\024\n\014countdownEnd\030\006 \001(\005\022\014"
    "\n\004pots\030\007 \003(\005\022\017\n\007winners\030\010 \003(\t\022!\n\005infos\030\t"
    " \003(\0132\022.rpc.PockerManBase\022#\n\tbeginInfo\030\n "
    "\001(\0132\020.rpc.PockerBegin\022/\n\016comparePlayers\030"
    "\013 \003(\0132\027.rpc.ComparePokerPlayer\"x\n\022Compar"
    "ePokerPlayer\022\013\n\003uid\030\001 \002(\t\022\034\n\007pockers\030\002 \003"
    "(\0132\013.rpc.Pocker\022#\n\016combinePockers\030\003 \003(\0132"
    "\013.rpc.Pocker\022\022\n\ncombineNum\030\004 \001(\005\"]\n\013Pock"
    "erBegin\022\021\n\tdealerUid\030\001 \001(\t\022\022\n\nsmBlindUid"
    "\030\002 \001(\t\022\023\n\013bigBlindUid\030\003 \001(\t\022\022\n\nattendUid"
    "s\030\004 \003(\t\"\213\001\n\020S2CPockerManInfo\022\021\n\theaderUr"
    "l\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\005\022\014\n\004co"
    "in\030\004 \001(\005\022\013\n\003gem\030\005 \001(\005\022\016\n\006roleId\030\006 \001(\005\022\022\n"
    "\nbestPocker\030\007 \001(\005\022\n\n\002lv\030\010 \001(\005\"\273\001\n\rPocker"
    "ManBase\022\013\n\003uid\030\001 \001(\t\022\021\n\theaderUrl\030\002 \001(\t\022"
    "\014\n\004coin\030\003 \001(\005\022\r\n\005drops\030\004 \001(\005\022\016\n\006status\030\005"
    " \001(\005\022\034\n\007pockers\030\006 \003(\0132\013.rpc.Pocker\022\017\n\007de"
    "skIdx\030\007 \001(\005\022\020\n\010nickName\030\010 \001(\t\022\017\n\007endTime"
    "\030\t \001(\005\022\013\n\003sex\030\n \001(\005\"$\n\006Pocker\022\r\n\005eType\030\001"
    " \002(\005\022\013\n\003num\030\002 \002(\005\"\225\001\n\016PockerRoomBase\022\034\n\007"
    "pockers\030\001 \003(\0132\013.rpc.Pocker\022\014\n\004pots\030\002 \003(\005"
    "\022\021\n\tdealerUid\030\003 \001(\t\022\016\n\006roomId\030\004 \001(\005\022\022\n\ns"
    "mallBlind\030\005 \001(\005\022\020\n\010bigBlind\030\006 \001(\005\022\016\n\006roo"
    "mNo\030\007 \001(\005\"j\n\016PockerRoomInfo\022#\n\007players\030\001"
    " \003(\0132\022.rpc.PockerManBase\022%\n\010roombase\030\002 \001"
    "(\0132\023.rpc.PockerRoomBase\022\014\n\004code\030\003 \001(\005\"\036\n"
    "\017LeavePockerRoom\022\013\n\003uid\030\001 \001(\t", 13389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  PlayerBaseInfo::default_instance_ = new PlayerBaseInfo();
  PlayerExtraInfo::default_instance_ = new PlayerExtraInfo();
  BagItem::default_instance_ = new BagItem();
  BagItemNofity::default_instance_ = new BagItemNofity();
  Signature::default_instance_ = new Signature();
  DailyTask::default_instance_ = new DailyTask();
  Score::default_instance_ = new Score();
  BankruptInfo::default_instance_ = new BankruptInfo();
  ScoreNofify::default_instance_ = new ScoreNofify();
  Request::default_instance_ = new Request();
  LoginCnsInfo::default_instance_ = new LoginCnsInfo();
  Login::default_instance_ = new Login();
  LoginResult::default_instance_ = new LoginResult();
  PlayerInfo::default_instance_ = new PlayerInfo();
  ResourceNotify::default_instance_ = new ResourceNotify();
  OnlineBody::default_instance_ = new OnlineBody();
  OnlineInfo::default_instance_ = new OnlineInfo();
  OnlinePlayerReq::default_instance_ = new OnlinePlayerReq();
  OnlinePlayerMsg::default_instance_ = new OnlinePlayerMsg();
  NotifyMsg::default_instance_ = new NotifyMsg();
  HeartBeat::default_instance_ = new HeartBeat();
  HeartBeatRst::default_instance_ = new HeartBeatRst();
  PlayerInRoomNotify::default_instance_ = new PlayerInRoomNotify();
  RoleInfo::default_instance_ = new RoleInfo();
  SysMail::default_instance_ = new SysMail();
  PlayerMailInfo::default_instance_ = new PlayerMailInfo();
  ReqReadOneMail::default_instance_ = new ReqReadOneMail();
  RemoveMailNotify::default_instance_ = new RemoveMailNotify();
  AddMailNotify::default_instance_ = new AddMailNotify();
  ReqBroadCast::default_instance_ = new ReqBroadCast();
  BroadCastNotify::default_instance_ = new BroadCastNotify();
  FightChat::default_instance_ = new FightChat();
  ReqFightRoomChat::default_instance_ = new ReqFightRoomChat();
  FightRoomChatNotify::default_instance_ = new FightRoomChatNotify();
  Notice::default_instance_ = new Notice();
  ReqInsurenceMoney::default_instance_ = new ReqInsurenceMoney();
  Player::default_instance_ = new Player();
  FriendsList::default_instance_ = new FriendsList();
  RequestFriendsList::default_instance_ = new RequestFriendsList();
  ReqString::default_instance_ = new ReqString();
  ReqInt::default_instance_ = new ReqInt();
  SearchFriendNofify::default_instance_ = new SearchFriendNofify();
  ReqResponseAddFriend::default_instance_ = new ReqResponseAddFriend();
  AddFriendNofify::default_instance_ = new AddFriendNofify();
  DelFriendNofity::default_instance_ = new DelFriendNofity();
  FriendsIdList::default_instance_ = new FriendsIdList();
  SendFriendChat::default_instance_ = new SendFriendChat();
  OfflineMsgNofity::default_instance_ = new OfflineMsgNofity();
  FriendStatusNofify::default_instance_ = new FriendStatusNofify();
  ErrorCodeNofify::default_instance_ = new ErrorCodeNofify();
  TaskFinishNofity::default_instance_ = new TaskFinishNofity();
  ReqTaskShare::default_instance_ = new ReqTaskShare();
  ReqRankList::default_instance_ = new ReqRankList();
  RankInfo::default_instance_ = new RankInfo();
  RankList::default_instance_ = new RankList();
  FormatedMsg::default_instance_ = new FormatedMsg();
  Msg::default_instance_ = new Msg();
  NumberMsg::default_instance_ = new NumberMsg();
  MsgArg::default_instance_ = new MsgArg();
  GuestBindOk::default_instance_ = new GuestBindOk();
  Ping::default_instance_ = new Ping();
  PingResult::default_instance_ = new PingResult();
  KickPlayerMsg::default_instance_ = new KickPlayerMsg();
  C2SChatP2P::default_instance_ = new C2SChatP2P();
  C2SChatAlliance::default_instance_ = new C2SChatAlliance();
  C2SChatWorld::default_instance_ = new C2SChatWorld();
  S2CChatP2P::default_instance_ = new S2CChatP2P();
  S2CChatWorld::default_instance_ = new S2CChatWorld();
  Card::default_instance_ = new Card();
  Pattern::default_instance_ = new Pattern();
  UserInfo::default_instance_ = new UserInfo();
  EnterRoomREQ::default_instance_ = new EnterRoomREQ();
  QuickEnterRoomREQ::default_instance_ = new QuickEnterRoomREQ();
  EnterRoomACK::default_instance_ = new EnterRoomACK();
  LeaveRoomREQ::default_instance_ = new LeaveRoomREQ();
  LeaveRoomACK::default_instance_ = new LeaveRoomACK();
  CountDown::default_instance_ = new CountDown();
  FightPlayerInfo::default_instance_ = new FightPlayerInfo();
  FightCurrentStateInfo::default_instance_ = new FightCurrentStateInfo();
  GameStartACK::default_instance_ = new GameStartACK();
  ActionREQ::default_instance_ = new ActionREQ();
  ChiAtionArgs::default_instance_ = new ChiAtionArgs();
  ActionACK::default_instance_ = new ActionACK();
  ActionNotifyACK::default_instance_ = new ActionNotifyACK();
  CountdownNotifyACK::default_instance_ = new CountdownNotifyACK();
  PassCardNotifyACK::default_instance_ = new PassCardNotifyACK();
  PassedNotifyACK::default_instance_ = new PassedNotifyACK();
  MingTang::default_instance_ = new MingTang();
  JieSuanCoin::default_instance_ = new JieSuanCoin();
  DaerPlayerJieSuanPattern::default_instance_ = new DaerPlayerJieSuanPattern();
  JieSuanNotifyACK::default_instance_ = new JieSuanNotifyACK();
  JieSuanAdditionData::default_instance_ = new JieSuanAdditionData();
  FinalJieSuanNotifyACK::default_instance_ = new FinalJieSuanNotifyACK();
  MJCard::default_instance_ = new MJCard();
  MJPattern::default_instance_ = new MJPattern();
  MJQuickEnterRoomREQ::default_instance_ = new MJQuickEnterRoomREQ();
  MJEnterRoomACK::default_instance_ = new MJEnterRoomACK();
  MJLeaveRoomREQ::default_instance_ = new MJLeaveRoomREQ();
  MJLeaveRoomACK::default_instance_ = new MJLeaveRoomACK();
  MJCountDown::default_instance_ = new MJCountDown();
  MJFightPlayerInfo::default_instance_ = new MJFightPlayerInfo();
  MJFightCurrentStateInfo::default_instance_ = new MJFightCurrentStateInfo();
  MJGameStartACK::default_instance_ = new MJGameStartACK();
  MJActionACK::default_instance_ = new MJActionACK();
  MJActionArgs::default_instance_ = new MJActionArgs();
  MJActionNotifyACK::default_instance_ = new MJActionNotifyACK();
  MJCountdownNotifyACK::default_instance_ = new MJCountdownNotifyACK();
  MJRemoveCardNotifyACK::default_instance_ = new MJRemoveCardNotifyACK();
  MJTieGuiREQ::default_instance_ = new MJTieGuiREQ();
  MJMingTang::default_instance_ = new MJMingTang();
  MJPlayerJieSuanInfo::default_instance_ = new MJPlayerJieSuanInfo();
  MJJieSuanNotifyACK::default_instance_ = new MJJieSuanNotifyACK();
  CreateRoomREQ::default_instance_ = new CreateRoomREQ();
  RoomInfo::default_instance_ = new RoomInfo();
  CreateRoomACK::default_instance_ = new CreateRoomACK();
  RoomListREQ::default_instance_ = new RoomListREQ();
  RoomListACK::default_instance_ = new RoomListACK();
  JieSanRoomREQ::default_instance_ = new JieSanRoomREQ();
  JieSanPlayerInfo::default_instance_ = new JieSanPlayerInfo();
  JieSanRoomNotify::default_instance_ = new JieSanRoomNotify();
  JieSanRoomUpdateStatusNotify::default_instance_ = new JieSanRoomUpdateStatusNotify();
  EnterCustomRoomREQ::default_instance_ = new EnterCustomRoomREQ();
  EnterCustomRoomACK::default_instance_ = new EnterCustomRoomACK();
  LeaveCustomRoomREQ::default_instance_ = new LeaveCustomRoomREQ();
  LeaveCustomRoomACK::default_instance_ = new LeaveCustomRoomACK();
  FindRoomREQ::default_instance_ = new FindRoomREQ();
  FindRoomACK::default_instance_ = new FindRoomACK();
  ForceLeaveRoomREQ::default_instance_ = new ForceLeaveRoomREQ();
  InviteFirendsJionCustomRoomREQ::default_instance_ = new InviteFirendsJionCustomRoomREQ();
  InviteFirendsJionCustomRoomNotify::default_instance_ = new InviteFirendsJionCustomRoomNotify();
  OtherPlayerInfo::default_instance_ = new OtherPlayerInfo();
  OtherPlayerInfoREQ::default_instance_ = new OtherPlayerInfoREQ();
  MatchListREQ::default_instance_ = new MatchListREQ();
  MatchListACK::default_instance_ = new MatchListACK();
  Match::default_instance_ = new Match();
  EnrollREQ::default_instance_ = new EnrollREQ();
  EnrollACK::default_instance_ = new EnrollACK();
  WithdrawREQ::default_instance_ = new WithdrawREQ();
  WithdrawACK::default_instance_ = new WithdrawACK();
  AmountChangeNotifyACK::default_instance_ = new AmountChangeNotifyACK();
  StartEntranceACK::default_instance_ = new StartEntranceACK();
  OrderInfoNofity::default_instance_ = new OrderInfoNofity();
  PayResultNotify::default_instance_ = new PayResultNotify();
  PokerQuickEnterRoomREQ::default_instance_ = new PokerQuickEnterRoomREQ();
  CreatePockerRoomReq::default_instance_ = new CreatePockerRoomReq();
  CreatePockerRoomAck::default_instance_ = new CreatePockerRoomAck();
  C2SAction::default_instance_ = new C2SAction();
  S2CAction::default_instance_ = new S2CAction();
  ComparePokerPlayer::default_instance_ = new ComparePokerPlayer();
  PockerBegin::default_instance_ = new PockerBegin();
  S2CPockerManInfo::default_instance_ = new S2CPockerManInfo();
  PockerManBase::default_instance_ = new PockerManBase();
  Pocker::default_instance_ = new Pocker();
  PockerRoomBase::default_instance_ = new PockerRoomBase();
  PockerRoomInfo::default_instance_ = new PockerRoomInfo();
  LeavePockerRoom::default_instance_ = new LeavePockerRoom();
  PlayerBaseInfo::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo::default_instance_->InitAsDefaultInstance();
  BagItem::default_instance_->InitAsDefaultInstance();
  BagItemNofity::default_instance_->InitAsDefaultInstance();
  Signature::default_instance_->InitAsDefaultInstance();
  DailyTask::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  BankruptInfo::default_instance_->InitAsDefaultInstance();
  ScoreNofify::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  LoginCnsInfo::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  ResourceNotify::default_instance_->InitAsDefaultInstance();
  OnlineBody::default_instance_->InitAsDefaultInstance();
  OnlineInfo::default_instance_->InitAsDefaultInstance();
  OnlinePlayerReq::default_instance_->InitAsDefaultInstance();
  OnlinePlayerMsg::default_instance_->InitAsDefaultInstance();
  NotifyMsg::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  HeartBeatRst::default_instance_->InitAsDefaultInstance();
  PlayerInRoomNotify::default_instance_->InitAsDefaultInstance();
  RoleInfo::default_instance_->InitAsDefaultInstance();
  SysMail::default_instance_->InitAsDefaultInstance();
  PlayerMailInfo::default_instance_->InitAsDefaultInstance();
  ReqReadOneMail::default_instance_->InitAsDefaultInstance();
  RemoveMailNotify::default_instance_->InitAsDefaultInstance();
  AddMailNotify::default_instance_->InitAsDefaultInstance();
  ReqBroadCast::default_instance_->InitAsDefaultInstance();
  BroadCastNotify::default_instance_->InitAsDefaultInstance();
  FightChat::default_instance_->InitAsDefaultInstance();
  ReqFightRoomChat::default_instance_->InitAsDefaultInstance();
  FightRoomChatNotify::default_instance_->InitAsDefaultInstance();
  Notice::default_instance_->InitAsDefaultInstance();
  ReqInsurenceMoney::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  FriendsList::default_instance_->InitAsDefaultInstance();
  RequestFriendsList::default_instance_->InitAsDefaultInstance();
  ReqString::default_instance_->InitAsDefaultInstance();
  ReqInt::default_instance_->InitAsDefaultInstance();
  SearchFriendNofify::default_instance_->InitAsDefaultInstance();
  ReqResponseAddFriend::default_instance_->InitAsDefaultInstance();
  AddFriendNofify::default_instance_->InitAsDefaultInstance();
  DelFriendNofity::default_instance_->InitAsDefaultInstance();
  FriendsIdList::default_instance_->InitAsDefaultInstance();
  SendFriendChat::default_instance_->InitAsDefaultInstance();
  OfflineMsgNofity::default_instance_->InitAsDefaultInstance();
  FriendStatusNofify::default_instance_->InitAsDefaultInstance();
  ErrorCodeNofify::default_instance_->InitAsDefaultInstance();
  TaskFinishNofity::default_instance_->InitAsDefaultInstance();
  ReqTaskShare::default_instance_->InitAsDefaultInstance();
  ReqRankList::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  RankList::default_instance_->InitAsDefaultInstance();
  FormatedMsg::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  NumberMsg::default_instance_->InitAsDefaultInstance();
  MsgArg::default_instance_->InitAsDefaultInstance();
  GuestBindOk::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  PingResult::default_instance_->InitAsDefaultInstance();
  KickPlayerMsg::default_instance_->InitAsDefaultInstance();
  C2SChatP2P::default_instance_->InitAsDefaultInstance();
  C2SChatAlliance::default_instance_->InitAsDefaultInstance();
  C2SChatWorld::default_instance_->InitAsDefaultInstance();
  S2CChatP2P::default_instance_->InitAsDefaultInstance();
  S2CChatWorld::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  Pattern::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  EnterRoomREQ::default_instance_->InitAsDefaultInstance();
  QuickEnterRoomREQ::default_instance_->InitAsDefaultInstance();
  EnterRoomACK::default_instance_->InitAsDefaultInstance();
  LeaveRoomREQ::default_instance_->InitAsDefaultInstance();
  LeaveRoomACK::default_instance_->InitAsDefaultInstance();
  CountDown::default_instance_->InitAsDefaultInstance();
  FightPlayerInfo::default_instance_->InitAsDefaultInstance();
  FightCurrentStateInfo::default_instance_->InitAsDefaultInstance();
  GameStartACK::default_instance_->InitAsDefaultInstance();
  ActionREQ::default_instance_->InitAsDefaultInstance();
  ChiAtionArgs::default_instance_->InitAsDefaultInstance();
  ActionACK::default_instance_->InitAsDefaultInstance();
  ActionNotifyACK::default_instance_->InitAsDefaultInstance();
  CountdownNotifyACK::default_instance_->InitAsDefaultInstance();
  PassCardNotifyACK::default_instance_->InitAsDefaultInstance();
  PassedNotifyACK::default_instance_->InitAsDefaultInstance();
  MingTang::default_instance_->InitAsDefaultInstance();
  JieSuanCoin::default_instance_->InitAsDefaultInstance();
  DaerPlayerJieSuanPattern::default_instance_->InitAsDefaultInstance();
  JieSuanNotifyACK::default_instance_->InitAsDefaultInstance();
  JieSuanAdditionData::default_instance_->InitAsDefaultInstance();
  FinalJieSuanNotifyACK::default_instance_->InitAsDefaultInstance();
  MJCard::default_instance_->InitAsDefaultInstance();
  MJPattern::default_instance_->InitAsDefaultInstance();
  MJQuickEnterRoomREQ::default_instance_->InitAsDefaultInstance();
  MJEnterRoomACK::default_instance_->InitAsDefaultInstance();
  MJLeaveRoomREQ::default_instance_->InitAsDefaultInstance();
  MJLeaveRoomACK::default_instance_->InitAsDefaultInstance();
  MJCountDown::default_instance_->InitAsDefaultInstance();
  MJFightPlayerInfo::default_instance_->InitAsDefaultInstance();
  MJFightCurrentStateInfo::default_instance_->InitAsDefaultInstance();
  MJGameStartACK::default_instance_->InitAsDefaultInstance();
  MJActionACK::default_instance_->InitAsDefaultInstance();
  MJActionArgs::default_instance_->InitAsDefaultInstance();
  MJActionNotifyACK::default_instance_->InitAsDefaultInstance();
  MJCountdownNotifyACK::default_instance_->InitAsDefaultInstance();
  MJRemoveCardNotifyACK::default_instance_->InitAsDefaultInstance();
  MJTieGuiREQ::default_instance_->InitAsDefaultInstance();
  MJMingTang::default_instance_->InitAsDefaultInstance();
  MJPlayerJieSuanInfo::default_instance_->InitAsDefaultInstance();
  MJJieSuanNotifyACK::default_instance_->InitAsDefaultInstance();
  CreateRoomREQ::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  CreateRoomACK::default_instance_->InitAsDefaultInstance();
  RoomListREQ::default_instance_->InitAsDefaultInstance();
  RoomListACK::default_instance_->InitAsDefaultInstance();
  JieSanRoomREQ::default_instance_->InitAsDefaultInstance();
  JieSanPlayerInfo::default_instance_->InitAsDefaultInstance();
  JieSanRoomNotify::default_instance_->InitAsDefaultInstance();
  JieSanRoomUpdateStatusNotify::default_instance_->InitAsDefaultInstance();
  EnterCustomRoomREQ::default_instance_->InitAsDefaultInstance();
  EnterCustomRoomACK::default_instance_->InitAsDefaultInstance();
  LeaveCustomRoomREQ::default_instance_->InitAsDefaultInstance();
  LeaveCustomRoomACK::default_instance_->InitAsDefaultInstance();
  FindRoomREQ::default_instance_->InitAsDefaultInstance();
  FindRoomACK::default_instance_->InitAsDefaultInstance();
  ForceLeaveRoomREQ::default_instance_->InitAsDefaultInstance();
  InviteFirendsJionCustomRoomREQ::default_instance_->InitAsDefaultInstance();
  InviteFirendsJionCustomRoomNotify::default_instance_->InitAsDefaultInstance();
  OtherPlayerInfo::default_instance_->InitAsDefaultInstance();
  OtherPlayerInfoREQ::default_instance_->InitAsDefaultInstance();
  MatchListREQ::default_instance_->InitAsDefaultInstance();
  MatchListACK::default_instance_->InitAsDefaultInstance();
  Match::default_instance_->InitAsDefaultInstance();
  EnrollREQ::default_instance_->InitAsDefaultInstance();
  EnrollACK::default_instance_->InitAsDefaultInstance();
  WithdrawREQ::default_instance_->InitAsDefaultInstance();
  WithdrawACK::default_instance_->InitAsDefaultInstance();
  AmountChangeNotifyACK::default_instance_->InitAsDefaultInstance();
  StartEntranceACK::default_instance_->InitAsDefaultInstance();
  OrderInfoNofity::default_instance_->InitAsDefaultInstance();
  PayResultNotify::default_instance_->InitAsDefaultInstance();
  PokerQuickEnterRoomREQ::default_instance_->InitAsDefaultInstance();
  CreatePockerRoomReq::default_instance_->InitAsDefaultInstance();
  CreatePockerRoomAck::default_instance_->InitAsDefaultInstance();
  C2SAction::default_instance_->InitAsDefaultInstance();
  S2CAction::default_instance_->InitAsDefaultInstance();
  ComparePokerPlayer::default_instance_->InitAsDefaultInstance();
  PockerBegin::default_instance_->InitAsDefaultInstance();
  S2CPockerManInfo::default_instance_->InitAsDefaultInstance();
  PockerManBase::default_instance_->InitAsDefaultInstance();
  Pocker::default_instance_->InitAsDefaultInstance();
  PockerRoomBase::default_instance_->InitAsDefaultInstance();
  PockerRoomInfo::default_instance_->InitAsDefaultInstance();
  LeavePockerRoom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PlayerBaseInfo::kUidFieldNumber;
const int PlayerBaseInfo::kNameFieldNumber;
const int PlayerBaseInfo::kSexFieldNumber;
const int PlayerBaseInfo::kLevelFieldNumber;
const int PlayerBaseInfo::kExpFieldNumber;
const int PlayerBaseInfo::kVipLeftDayFieldNumber;
const int PlayerBaseInfo::kHeaderFieldNumber;
const int PlayerBaseInfo::kCoinFieldNumber;
const int PlayerBaseInfo::kGemFieldNumber;
const int PlayerBaseInfo::kRoleIdFieldNumber;
const int PlayerBaseInfo::kGameTypeFieldNumber;
const int PlayerBaseInfo::kRoomTypeFieldNumber;
const int PlayerBaseInfo::kInsurCoinFieldNumber;
const int PlayerBaseInfo::kAccountTypeFieldNumber;
const int PlayerBaseInfo::kFriendUidsFieldNumber;
const int PlayerBaseInfo::kHeaderUrlFieldNumber;
const int PlayerBaseInfo::kPhoneFieldNumber;
const int PlayerBaseInfo::kBModifyNameFieldNumber;
const int PlayerBaseInfo::kBModifySexFieldNumber;
const int PlayerBaseInfo::kLastLoginTimeFieldNumber;
const int PlayerBaseInfo::kProfitsFieldNumber;
const int PlayerBaseInfo::kExpTotalFieldNumber;
const int PlayerBaseInfo::kVipOpenTimeFieldNumber;
#endif  // !_MSC_VER

PlayerBaseInfo::PlayerBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBaseInfo::InitAsDefaultInstance() {
}

PlayerBaseInfo::PlayerBaseInfo(const PlayerBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0;
  exp_ = 0;
  vipleftday_ = 0;
  header_ = 0;
  coin_ = 0;
  gem_ = 0;
  roleid_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  insurcoin_ = 0;
  accounttype_ = 0;
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bmodifyname_ = false;
  bmodifysex_ = false;
  lastlogintime_ = 0;
  profits_ = 0;
  exptotal_ = 0;
  vipopentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBaseInfo::~PlayerBaseInfo() {
  SharedDtor();
}

void PlayerBaseInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void PlayerBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBaseInfo_descriptor_;
}

const PlayerBaseInfo& PlayerBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PlayerBaseInfo* PlayerBaseInfo::default_instance_ = NULL;

PlayerBaseInfo* PlayerBaseInfo::New() const {
  return new PlayerBaseInfo;
}

void PlayerBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    level_ = 0;
    exp_ = 0;
    vipleftday_ = 0;
    header_ = 0;
    coin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gem_ = 0;
    roleid_ = 0;
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    roomtype_ = 0;
    insurcoin_ = 0;
    accounttype_ = 0;
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    bmodifyname_ = false;
    bmodifysex_ = false;
    lastlogintime_ = 0;
    profits_ = 0;
    exptotal_ = 0;
    vipopentime_ = 0;
  }
  frienduids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipLeftDay;
        break;
      }
      
      // optional int32 vipLeftDay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLeftDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipleftday_)));
          set_has_vipleftday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_header;
        break;
      }
      
      // optional int32 header = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gem;
        break;
      }
      
      // optional int32 gem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roleId;
        break;
      }
      
      // optional int32 roleId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gameType;
        break;
      }
      
      // optional string gameType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roomType;
        break;
      }
      
      // optional int32 roomType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_insurCoin;
        break;
      }
      
      // optional int32 insurCoin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insurCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insurcoin_)));
          set_has_insurcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_accountType;
        break;
      }
      
      // optional int32 accountType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_friendUids;
        break;
      }
      
      // repeated string friendUids = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendUids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_frienduids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frienduids(0).data(), this->frienduids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_friendUids;
        if (input->ExpectTag(130)) goto parse_headerUrl;
        break;
      }
      
      // optional string headerUrl = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_phone;
        break;
      }
      
      // optional string phone = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bModifyName;
        break;
      }
      
      // optional bool bModifyName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bModifyName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmodifyname_)));
          set_has_bmodifyname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bModifySex;
        break;
      }
      
      // optional bool bModifySex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bModifySex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmodifysex_)));
          set_has_bmodifysex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_lastLoginTime;
        break;
      }
      
      // optional int32 lastLoginTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_profits;
        break;
      }
      
      // optional int32 profits = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profits_)));
          set_has_profits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_expTotal;
        break;
      }
      
      // optional int32 expTotal = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exptotal_)));
          set_has_exptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_vipOpenTime;
        break;
      }
      
      // optional int32 vipOpenTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipOpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipopentime_)));
          set_has_vipopentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 vipLeftDay = 6;
  if (has_vipleftday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vipleftday(), output);
  }
  
  // optional int32 header = 7;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->header(), output);
  }
  
  // optional int32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coin(), output);
  }
  
  // optional int32 gem = 9;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gem(), output);
  }
  
  // optional int32 roleId = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }
  
  // optional string gameType = 11;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->gametype(), output);
  }
  
  // optional int32 roomType = 12;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->roomtype(), output);
  }
  
  // optional int32 insurCoin = 13;
  if (has_insurcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->insurcoin(), output);
  }
  
  // optional int32 accountType = 14;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->accounttype(), output);
  }
  
  // repeated string friendUids = 15;
  for (int i = 0; i < this->frienduids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->frienduids(i).data(), this->frienduids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->frienduids(i), output);
  }
  
  // optional string headerUrl = 16;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->headerurl(), output);
  }
  
  // optional string phone = 17;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->phone(), output);
  }
  
  // optional bool bModifyName = 18;
  if (has_bmodifyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bmodifyname(), output);
  }
  
  // optional bool bModifySex = 19;
  if (has_bmodifysex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->bmodifysex(), output);
  }
  
  // optional int32 lastLoginTime = 20;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lastlogintime(), output);
  }
  
  // optional int32 profits = 21;
  if (has_profits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->profits(), output);
  }
  
  // optional int32 expTotal = 22;
  if (has_exptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->exptotal(), output);
  }
  
  // optional int32 vipOpenTime = 23;
  if (has_vipopentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->vipopentime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 vipLeftDay = 6;
  if (has_vipleftday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vipleftday(), target);
  }
  
  // optional int32 header = 7;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->header(), target);
  }
  
  // optional int32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coin(), target);
  }
  
  // optional int32 gem = 9;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gem(), target);
  }
  
  // optional int32 roleId = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }
  
  // optional string gameType = 11;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gametype(), target);
  }
  
  // optional int32 roomType = 12;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->roomtype(), target);
  }
  
  // optional int32 insurCoin = 13;
  if (has_insurcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->insurcoin(), target);
  }
  
  // optional int32 accountType = 14;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->accounttype(), target);
  }
  
  // repeated string friendUids = 15;
  for (int i = 0; i < this->frienduids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frienduids(i).data(), this->frienduids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->frienduids(i), target);
  }
  
  // optional string headerUrl = 16;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->headerurl(), target);
  }
  
  // optional string phone = 17;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->phone(), target);
  }
  
  // optional bool bModifyName = 18;
  if (has_bmodifyname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bmodifyname(), target);
  }
  
  // optional bool bModifySex = 19;
  if (has_bmodifysex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->bmodifysex(), target);
  }
  
  // optional int32 lastLoginTime = 20;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lastlogintime(), target);
  }
  
  // optional int32 profits = 21;
  if (has_profits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->profits(), target);
  }
  
  // optional int32 expTotal = 22;
  if (has_exptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->exptotal(), target);
  }
  
  // optional int32 vipOpenTime = 23;
  if (has_vipopentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->vipopentime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 vipLeftDay = 6;
    if (has_vipleftday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipleftday());
    }
    
    // optional int32 header = 7;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }
    
    // optional int32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gem = 9;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }
    
    // optional int32 roleId = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
    // optional string gameType = 11;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // optional int32 roomType = 12;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }
    
    // optional int32 insurCoin = 13;
    if (has_insurcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insurcoin());
    }
    
    // optional int32 accountType = 14;
    if (has_accounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }
    
    // optional string headerUrl = 16;
    if (has_headerurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string phone = 17;
    if (has_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional bool bModifyName = 18;
    if (has_bmodifyname()) {
      total_size += 2 + 1;
    }
    
    // optional bool bModifySex = 19;
    if (has_bmodifysex()) {
      total_size += 2 + 1;
    }
    
    // optional int32 lastLoginTime = 20;
    if (has_lastlogintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogintime());
    }
    
    // optional int32 profits = 21;
    if (has_profits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profits());
    }
    
    // optional int32 expTotal = 22;
    if (has_exptotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exptotal());
    }
    
    // optional int32 vipOpenTime = 23;
    if (has_vipopentime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipopentime());
    }
    
  }
  // repeated string friendUids = 15;
  total_size += 1 * this->frienduids_size();
  for (int i = 0; i < this->frienduids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->frienduids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBaseInfo::MergeFrom(const PlayerBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienduids_.MergeFrom(from.frienduids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vipleftday()) {
      set_vipleftday(from.vipleftday());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_insurcoin()) {
      set_insurcoin(from.insurcoin());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_bmodifyname()) {
      set_bmodifyname(from.bmodifyname());
    }
    if (from.has_bmodifysex()) {
      set_bmodifysex(from.bmodifysex());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_profits()) {
      set_profits(from.profits());
    }
    if (from.has_exptotal()) {
      set_exptotal(from.exptotal());
    }
    if (from.has_vipopentime()) {
      set_vipopentime(from.vipopentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBaseInfo::CopyFrom(const PlayerBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void PlayerBaseInfo::Swap(PlayerBaseInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(vipleftday_, other->vipleftday_);
    std::swap(header_, other->header_);
    std::swap(coin_, other->coin_);
    std::swap(gem_, other->gem_);
    std::swap(roleid_, other->roleid_);
    std::swap(gametype_, other->gametype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(insurcoin_, other->insurcoin_);
    std::swap(accounttype_, other->accounttype_);
    frienduids_.Swap(&other->frienduids_);
    std::swap(headerurl_, other->headerurl_);
    std::swap(phone_, other->phone_);
    std::swap(bmodifyname_, other->bmodifyname_);
    std::swap(bmodifysex_, other->bmodifysex_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(profits_, other->profits_);
    std::swap(exptotal_, other->exptotal_);
    std::swap(vipopentime_, other->vipopentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBaseInfo_descriptor_;
  metadata.reflection = PlayerBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerExtraInfo::kItemsFieldNumber;
const int PlayerExtraInfo::kSignFieldNumber;
const int PlayerExtraInfo::kTasksFieldNumber;
const int PlayerExtraInfo::kScoresFieldNumber;
const int PlayerExtraInfo::kBankruptFieldNumber;
#endif  // !_MSC_VER

PlayerExtraInfo::PlayerExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerExtraInfo::InitAsDefaultInstance() {
  sign_ = const_cast< ::rpc::Signature*>(&::rpc::Signature::default_instance());
  tasks_ = const_cast< ::rpc::DailyTask*>(&::rpc::DailyTask::default_instance());
  bankrupt_ = const_cast< ::rpc::BankruptInfo*>(&::rpc::BankruptInfo::default_instance());
}

PlayerExtraInfo::PlayerExtraInfo(const PlayerExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  sign_ = NULL;
  tasks_ = NULL;
  bankrupt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerExtraInfo::~PlayerExtraInfo() {
  SharedDtor();
}

void PlayerExtraInfo::SharedDtor() {
  if (this != default_instance_) {
    delete sign_;
    delete tasks_;
    delete bankrupt_;
  }
}

void PlayerExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerExtraInfo_descriptor_;
}

const PlayerExtraInfo& PlayerExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PlayerExtraInfo* PlayerExtraInfo::default_instance_ = NULL;

PlayerExtraInfo* PlayerExtraInfo::New() const {
  return new PlayerExtraInfo;
}

void PlayerExtraInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_sign()) {
      if (sign_ != NULL) sign_->::rpc::Signature::Clear();
    }
    if (has_tasks()) {
      if (tasks_ != NULL) tasks_->::rpc::DailyTask::Clear();
    }
    if (has_bankrupt()) {
      if (bankrupt_ != NULL) bankrupt_->::rpc::BankruptInfo::Clear();
    }
  }
  items_.Clear();
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.BagItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_sign;
        break;
      }
      
      // optional .rpc.Signature sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        break;
      }
      
      // optional .rpc.DailyTask tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scores;
        break;
      }
      
      // repeated .rpc.Score scores = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scores;
        if (input->ExpectTag(42)) goto parse_bankrupt;
        break;
      }
      
      // optional .rpc.BankruptInfo bankrupt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankrupt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bankrupt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.BagItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // optional .rpc.Signature sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sign(), output);
  }
  
  // optional .rpc.DailyTask tasks = 3;
  if (has_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasks(), output);
  }
  
  // repeated .rpc.Score scores = 4;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scores(i), output);
  }
  
  // optional .rpc.BankruptInfo bankrupt = 5;
  if (has_bankrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bankrupt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.BagItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // optional .rpc.Signature sign = 2;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sign(), target);
  }
  
  // optional .rpc.DailyTask tasks = 3;
  if (has_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tasks(), target);
  }
  
  // repeated .rpc.Score scores = 4;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scores(i), target);
  }
  
  // optional .rpc.BankruptInfo bankrupt = 5;
  if (has_bankrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bankrupt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerExtraInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rpc.Signature sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }
    
    // optional .rpc.DailyTask tasks = 3;
    if (has_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks());
    }
    
    // optional .rpc.BankruptInfo bankrupt = 5;
    if (has_bankrupt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bankrupt());
    }
    
  }
  // repeated .rpc.BagItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .rpc.Score scores = 4;
  total_size += 1 * this->scores_size();
  for (int i = 0; i < this->scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerExtraInfo::MergeFrom(const PlayerExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  scores_.MergeFrom(from.scores_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sign()) {
      mutable_sign()->::rpc::Signature::MergeFrom(from.sign());
    }
    if (from.has_tasks()) {
      mutable_tasks()->::rpc::DailyTask::MergeFrom(from.tasks());
    }
    if (from.has_bankrupt()) {
      mutable_bankrupt()->::rpc::BankruptInfo::MergeFrom(from.bankrupt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerExtraInfo::CopyFrom(const PlayerExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < scores_size(); i++) {
    if (!this->scores(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerExtraInfo::Swap(PlayerExtraInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(sign_, other->sign_);
    std::swap(tasks_, other->tasks_);
    scores_.Swap(&other->scores_);
    std::swap(bankrupt_, other->bankrupt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerExtraInfo_descriptor_;
  metadata.reflection = PlayerExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItem::kIdFieldNumber;
const int BagItem::kNumFieldNumber;
#endif  // !_MSC_VER

BagItem::BagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItem::InitAsDefaultInstance() {
}

BagItem::BagItem(const BagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItem::~BagItem() {
  SharedDtor();
}

void BagItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItem_descriptor_;
}

const BagItem& BagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

BagItem* BagItem::default_instance_ = NULL;

BagItem* BagItem::New() const {
  return new BagItem;
}

void BagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItem::MergeFrom(const BagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItem::CopyFrom(const BagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BagItem::Swap(BagItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItem_descriptor_;
  metadata.reflection = BagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItemNofity::kItemsFieldNumber;
#endif  // !_MSC_VER

BagItemNofity::BagItemNofity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemNofity::InitAsDefaultInstance() {
}

BagItemNofity::BagItemNofity(const BagItemNofity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemNofity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemNofity::~BagItemNofity() {
  SharedDtor();
}

void BagItemNofity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemNofity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemNofity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemNofity_descriptor_;
}

const BagItemNofity& BagItemNofity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

BagItemNofity* BagItemNofity::default_instance_ = NULL;

BagItemNofity* BagItemNofity::New() const {
  return new BagItemNofity;
}

void BagItemNofity::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemNofity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.BagItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemNofity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.BagItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemNofity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.BagItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemNofity::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.BagItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemNofity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemNofity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemNofity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemNofity::MergeFrom(const BagItemNofity& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemNofity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemNofity::CopyFrom(const BagItemNofity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemNofity::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BagItemNofity::Swap(BagItemNofity* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemNofity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemNofity_descriptor_;
  metadata.reflection = BagItemNofity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Signature::kMonthFieldNumber;
const int Signature::kSignsFieldNumber;
const int Signature::kLastSignFieldNumber;
const int Signature::kContiDayFieldNumber;
const int Signature::kContiRewardTmsFieldNumber;
#endif  // !_MSC_VER

Signature::Signature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signature::InitAsDefaultInstance() {
}

Signature::Signature(const Signature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signature::SharedCtor() {
  _cached_size_ = 0;
  month_ = 0;
  lastsign_ = 0;
  contiday_ = 0;
  contirewardtms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signature::~Signature() {
  SharedDtor();
}

void Signature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signature_descriptor_;
}

const Signature& Signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Signature* Signature::default_instance_ = NULL;

Signature* Signature::New() const {
  return new Signature;
}

void Signature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    month_ = 0;
    lastsign_ = 0;
    contiday_ = 0;
    contirewardtms_ = 0;
  }
  signs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 month = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signs;
        break;
      }
      
      // repeated int32 signs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_signs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signs;
        if (input->ExpectTag(24)) goto parse_lastSign;
        break;
      }
      
      // optional int32 lastSign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsign_)));
          set_has_lastsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contiDay;
        break;
      }
      
      // optional int32 contiDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contiDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contiday_)));
          set_has_contiday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contiRewardTms;
        break;
      }
      
      // optional int32 contiRewardTms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contiRewardTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contirewardtms_)));
          set_has_contirewardtms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 month = 1;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->month(), output);
  }
  
  // repeated int32 signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->signs(i), output);
  }
  
  // optional int32 lastSign = 3;
  if (has_lastsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastsign(), output);
  }
  
  // optional int32 contiDay = 4;
  if (has_contiday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contiday(), output);
  }
  
  // optional int32 contiRewardTms = 5;
  if (has_contirewardtms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contirewardtms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 month = 1;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->month(), target);
  }
  
  // repeated int32 signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->signs(i), target);
  }
  
  // optional int32 lastSign = 3;
  if (has_lastsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastsign(), target);
  }
  
  // optional int32 contiDay = 4;
  if (has_contiday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contiday(), target);
  }
  
  // optional int32 contiRewardTms = 5;
  if (has_contirewardtms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contirewardtms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signature::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 month = 1;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }
    
    // optional int32 lastSign = 3;
    if (has_lastsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastsign());
    }
    
    // optional int32 contiDay = 4;
    if (has_contiday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contiday());
    }
    
    // optional int32 contiRewardTms = 5;
    if (has_contirewardtms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contirewardtms());
    }
    
  }
  // repeated int32 signs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->signs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signs(i));
    }
    total_size += 1 * this->signs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
  GOOGLE_CHECK_NE(&from, this);
  signs_.MergeFrom(from.signs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_lastsign()) {
      set_lastsign(from.lastsign());
    }
    if (from.has_contiday()) {
      set_contiday(from.contiday());
    }
    if (from.has_contirewardtms()) {
      set_contirewardtms(from.contirewardtms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  
  return true;
}

void Signature::Swap(Signature* other) {
  if (other != this) {
    std::swap(month_, other->month_);
    signs_.Swap(&other->signs_);
    std::swap(lastsign_, other->lastsign_);
    std::swap(contiday_, other->contiday_);
    std::swap(contirewardtms_, other->contirewardtms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signature_descriptor_;
  metadata.reflection = Signature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTask::kResetTimeFieldNumber;
const int DailyTask::kDoneIdsFieldNumber;
const int DailyTask::kGetIdsFieldNumber;
const int DailyTask::kSharesFieldNumber;
const int DailyTask::kShareFrisFieldNumber;
const int DailyTask::kDaerTmsFieldNumber;
const int DailyTask::kMjTmsFieldNumber;
const int DailyTask::kPokerTmsFieldNumber;
const int DailyTask::kWinDaerTmsFieldNumber;
const int DailyTask::kWinMjTmsFieldNumber;
const int DailyTask::kWinPokerTmsFieldNumber;
#endif  // !_MSC_VER

DailyTask::DailyTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTask::InitAsDefaultInstance() {
}

DailyTask::DailyTask(const DailyTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTask::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = 0;
  shares_ = 0;
  sharefris_ = 0;
  daertms_ = 0;
  mjtms_ = 0;
  pokertms_ = 0;
  windaertms_ = 0;
  winmjtms_ = 0;
  winpokertms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTask::~DailyTask() {
  SharedDtor();
}

void DailyTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTask_descriptor_;
}

const DailyTask& DailyTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

DailyTask* DailyTask::default_instance_ = NULL;

DailyTask* DailyTask::New() const {
  return new DailyTask;
}

void DailyTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resettime_ = 0;
    shares_ = 0;
    sharefris_ = 0;
    daertms_ = 0;
    mjtms_ = 0;
    pokertms_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    windaertms_ = 0;
    winmjtms_ = 0;
    winpokertms_ = 0;
  }
  doneids_.Clear();
  getids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resetTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doneIds;
        break;
      }
      
      // repeated int32 doneIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doneIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_doneids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_doneids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doneIds;
        if (input->ExpectTag(24)) goto parse_getIds;
        break;
      }
      
      // repeated int32 getIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_getids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getIds;
        if (input->ExpectTag(32)) goto parse_shares;
        break;
      }
      
      // optional int32 shares = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shares:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shares_)));
          set_has_shares();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shareFris;
        break;
      }
      
      // optional int32 shareFris = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shareFris:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sharefris_)));
          set_has_sharefris();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daerTms;
        break;
      }
      
      // optional int32 daerTms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daerTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daertms_)));
          set_has_daertms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mjTms;
        break;
      }
      
      // optional int32 mjTms = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mjTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtms_)));
          set_has_mjtms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pokerTms;
        break;
      }
      
      // optional int32 pokerTms = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokertms_)));
          set_has_pokertms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_winDaerTms;
        break;
      }
      
      // optional int32 winDaerTms = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winDaerTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windaertms_)));
          set_has_windaertms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winMjTms;
        break;
      }
      
      // optional int32 winMjTms = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMjTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmjtms_)));
          set_has_winmjtms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winPokerTms;
        break;
      }
      
      // optional int32 winPokerTms = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winPokerTms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winpokertms_)));
          set_has_winpokertms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resetTime = 1;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resettime(), output);
  }
  
  // repeated int32 doneIds = 2;
  for (int i = 0; i < this->doneids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->doneids(i), output);
  }
  
  // repeated int32 getIds = 3;
  for (int i = 0; i < this->getids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->getids(i), output);
  }
  
  // optional int32 shares = 4;
  if (has_shares()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shares(), output);
  }
  
  // optional int32 shareFris = 5;
  if (has_sharefris()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sharefris(), output);
  }
  
  // optional int32 daerTms = 6;
  if (has_daertms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->daertms(), output);
  }
  
  // optional int32 mjTms = 7;
  if (has_mjtms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mjtms(), output);
  }
  
  // optional int32 pokerTms = 8;
  if (has_pokertms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pokertms(), output);
  }
  
  // optional int32 winDaerTms = 9;
  if (has_windaertms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->windaertms(), output);
  }
  
  // optional int32 winMjTms = 10;
  if (has_winmjtms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->winmjtms(), output);
  }
  
  // optional int32 winPokerTms = 11;
  if (has_winpokertms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->winpokertms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resetTime = 1;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resettime(), target);
  }
  
  // repeated int32 doneIds = 2;
  for (int i = 0; i < this->doneids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->doneids(i), target);
  }
  
  // repeated int32 getIds = 3;
  for (int i = 0; i < this->getids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->getids(i), target);
  }
  
  // optional int32 shares = 4;
  if (has_shares()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shares(), target);
  }
  
  // optional int32 shareFris = 5;
  if (has_sharefris()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sharefris(), target);
  }
  
  // optional int32 daerTms = 6;
  if (has_daertms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->daertms(), target);
  }
  
  // optional int32 mjTms = 7;
  if (has_mjtms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mjtms(), target);
  }
  
  // optional int32 pokerTms = 8;
  if (has_pokertms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pokertms(), target);
  }
  
  // optional int32 winDaerTms = 9;
  if (has_windaertms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->windaertms(), target);
  }
  
  // optional int32 winMjTms = 10;
  if (has_winmjtms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->winmjtms(), target);
  }
  
  // optional int32 winPokerTms = 11;
  if (has_winpokertms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->winpokertms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resetTime = 1;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resettime());
    }
    
    // optional int32 shares = 4;
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shares());
    }
    
    // optional int32 shareFris = 5;
    if (has_sharefris()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sharefris());
    }
    
    // optional int32 daerTms = 6;
    if (has_daertms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daertms());
    }
    
    // optional int32 mjTms = 7;
    if (has_mjtms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtms());
    }
    
    // optional int32 pokerTms = 8;
    if (has_pokertms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokertms());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 winDaerTms = 9;
    if (has_windaertms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windaertms());
    }
    
    // optional int32 winMjTms = 10;
    if (has_winmjtms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmjtms());
    }
    
    // optional int32 winPokerTms = 11;
    if (has_winpokertms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winpokertms());
    }
    
  }
  // repeated int32 doneIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->doneids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->doneids(i));
    }
    total_size += 1 * this->doneids_size() + data_size;
  }
  
  // repeated int32 getIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->getids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getids(i));
    }
    total_size += 1 * this->getids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTask::MergeFrom(const DailyTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  doneids_.MergeFrom(from.doneids_);
  getids_.MergeFrom(from.getids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_shares()) {
      set_shares(from.shares());
    }
    if (from.has_sharefris()) {
      set_sharefris(from.sharefris());
    }
    if (from.has_daertms()) {
      set_daertms(from.daertms());
    }
    if (from.has_mjtms()) {
      set_mjtms(from.mjtms());
    }
    if (from.has_pokertms()) {
      set_pokertms(from.pokertms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_windaertms()) {
      set_windaertms(from.windaertms());
    }
    if (from.has_winmjtms()) {
      set_winmjtms(from.winmjtms());
    }
    if (from.has_winpokertms()) {
      set_winpokertms(from.winpokertms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTask::CopyFrom(const DailyTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTask::IsInitialized() const {
  
  return true;
}

void DailyTask::Swap(DailyTask* other) {
  if (other != this) {
    std::swap(resettime_, other->resettime_);
    doneids_.Swap(&other->doneids_);
    getids_.Swap(&other->getids_);
    std::swap(shares_, other->shares_);
    std::swap(sharefris_, other->sharefris_);
    std::swap(daertms_, other->daertms_);
    std::swap(mjtms_, other->mjtms_);
    std::swap(pokertms_, other->pokertms_);
    std::swap(windaertms_, other->windaertms_);
    std::swap(winmjtms_, other->winmjtms_);
    std::swap(winpokertms_, other->winpokertms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTask_descriptor_;
  metadata.reflection = DailyTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Score::kNameFieldNumber;
const int Score::kWinFieldNumber;
const int Score::kLossFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
}

Score::Score(const Score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = 0;
  loss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    win_ = 0;
    loss_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }
      
      // required int32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loss;
        break;
      }
      
      // required int32 loss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win(), output);
  }
  
  // required int32 loss = 3;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loss(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win(), target);
  }
  
  // required int32 loss = 3;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loss(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }
    
    // required int32 loss = 3;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loss());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(win_, other->win_);
    std::swap(loss_, other->loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankruptInfo::kTimeFieldNumber;
const int BankruptInfo::kRewardTimesFieldNumber;
#endif  // !_MSC_VER

BankruptInfo::BankruptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankruptInfo::InitAsDefaultInstance() {
}

BankruptInfo::BankruptInfo(const BankruptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankruptInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  rewardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankruptInfo::~BankruptInfo() {
  SharedDtor();
}

void BankruptInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BankruptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankruptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankruptInfo_descriptor_;
}

const BankruptInfo& BankruptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

BankruptInfo* BankruptInfo::default_instance_ = NULL;

BankruptInfo* BankruptInfo::New() const {
  return new BankruptInfo;
}

void BankruptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    rewardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankruptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardTimes;
        break;
      }
      
      // optional int32 rewardTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardtimes_)));
          set_has_rewardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankruptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional int32 rewardTimes = 2;
  if (has_rewardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardtimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankruptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // optional int32 rewardTimes = 2;
  if (has_rewardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardtimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankruptInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 rewardTimes = 2;
    if (has_rewardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardtimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankruptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankruptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankruptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankruptInfo::MergeFrom(const BankruptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rewardtimes()) {
      set_rewardtimes(from.rewardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankruptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankruptInfo::CopyFrom(const BankruptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankruptInfo::IsInitialized() const {
  
  return true;
}

void BankruptInfo::Swap(BankruptInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(rewardtimes_, other->rewardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankruptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankruptInfo_descriptor_;
  metadata.reflection = BankruptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreNofify::kScoresFieldNumber;
#endif  // !_MSC_VER

ScoreNofify::ScoreNofify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreNofify::InitAsDefaultInstance() {
}

ScoreNofify::ScoreNofify(const ScoreNofify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreNofify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreNofify::~ScoreNofify() {
  SharedDtor();
}

void ScoreNofify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreNofify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreNofify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreNofify_descriptor_;
}

const ScoreNofify& ScoreNofify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ScoreNofify* ScoreNofify::default_instance_ = NULL;

ScoreNofify* ScoreNofify::New() const {
  return new ScoreNofify;
}

void ScoreNofify::Clear() {
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreNofify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Score scores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_scores;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreNofify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Score scores = 1;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scores(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreNofify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Score scores = 1;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scores(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreNofify::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Score scores = 1;
  total_size += 1 * this->scores_size();
  for (int i = 0; i < this->scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreNofify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreNofify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreNofify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreNofify::MergeFrom(const ScoreNofify& from) {
  GOOGLE_CHECK_NE(&from, this);
  scores_.MergeFrom(from.scores_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreNofify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreNofify::CopyFrom(const ScoreNofify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreNofify::IsInitialized() const {
  
  for (int i = 0; i < scores_size(); i++) {
    if (!this->scores(i).IsInitialized()) return false;
  }
  return true;
}

void ScoreNofify::Swap(ScoreNofify* other) {
  if (other != this) {
    scores_.Swap(&other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreNofify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreNofify_descriptor_;
  metadata.reflection = ScoreNofify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kMethodFieldNumber;
const int Request::kSerializedRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_request_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_serialized_request()) {
      if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
        serialized_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_request;
        break;
      }
      
      // optional bytes serialized_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method(), output);
  }
  
  // optional bytes serialized_request = 2;
  if (has_serialized_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialized_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }
  
  // optional bytes serialized_request = 2;
  if (has_serialized_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }
    
    // optional bytes serialized_request = 2;
    if (has_serialized_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_serialized_request()) {
      set_serialized_request(from.serialized_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(serialized_request_, other->serialized_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginCnsInfo::kCnsIpFieldNumber;
const int LoginCnsInfo::kGsInfoFieldNumber;
const int LoginCnsInfo::kVersionOldFieldNumber;
const int LoginCnsInfo::kVersionNewFieldNumber;
const int LoginCnsInfo::kDownloadUrlFieldNumber;
const int LoginCnsInfo::kVersionMidFieldNumber;
#endif  // !_MSC_VER

LoginCnsInfo::LoginCnsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginCnsInfo::InitAsDefaultInstance() {
}

LoginCnsInfo::LoginCnsInfo(const LoginCnsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginCnsInfo::SharedCtor() {
  _cached_size_ = 0;
  cnsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionold_ = 0;
  versionnew_ = 0;
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionmid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginCnsInfo::~LoginCnsInfo() {
  SharedDtor();
}

void LoginCnsInfo::SharedDtor() {
  if (cnsip_ != &::google::protobuf::internal::kEmptyString) {
    delete cnsip_;
  }
  if (gsinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete gsinfo_;
  }
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (this != default_instance_) {
  }
}

void LoginCnsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginCnsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCnsInfo_descriptor_;
}

const LoginCnsInfo& LoginCnsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LoginCnsInfo* LoginCnsInfo::default_instance_ = NULL;

LoginCnsInfo* LoginCnsInfo::New() const {
  return new LoginCnsInfo;
}

void LoginCnsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cnsip()) {
      if (cnsip_ != &::google::protobuf::internal::kEmptyString) {
        cnsip_->clear();
      }
    }
    if (has_gsinfo()) {
      if (gsinfo_ != &::google::protobuf::internal::kEmptyString) {
        gsinfo_->clear();
      }
    }
    versionold_ = 0;
    versionnew_ = 0;
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    versionmid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginCnsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cnsIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cnsip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cnsip().data(), this->cnsip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gsInfo;
        break;
      }
      
      // required string gsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gsinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gsinfo().data(), this->gsinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_versionOld;
        break;
      }
      
      // optional int32 versionOld = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionOld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionold_)));
          set_has_versionold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_versionNew;
        break;
      }
      
      // optional int32 versionNew = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionnew_)));
          set_has_versionnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_downloadUrl;
        break;
      }
      
      // optional string downloadUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_versionMid;
        break;
      }
      
      // optional int32 versionMid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionMid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionmid_)));
          set_has_versionmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginCnsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cnsIp = 1;
  if (has_cnsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cnsip().data(), this->cnsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cnsip(), output);
  }
  
  // required string gsInfo = 2;
  if (has_gsinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsinfo().data(), this->gsinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gsinfo(), output);
  }
  
  // optional int32 versionOld = 3;
  if (has_versionold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->versionold(), output);
  }
  
  // optional int32 versionNew = 4;
  if (has_versionnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->versionnew(), output);
  }
  
  // optional string downloadUrl = 5;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->downloadurl(), output);
  }
  
  // optional int32 versionMid = 6;
  if (has_versionmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->versionmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginCnsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cnsIp = 1;
  if (has_cnsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cnsip().data(), this->cnsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cnsip(), target);
  }
  
  // required string gsInfo = 2;
  if (has_gsinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gsinfo().data(), this->gsinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gsinfo(), target);
  }
  
  // optional int32 versionOld = 3;
  if (has_versionold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->versionold(), target);
  }
  
  // optional int32 versionNew = 4;
  if (has_versionnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->versionnew(), target);
  }
  
  // optional string downloadUrl = 5;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->downloadurl(), target);
  }
  
  // optional int32 versionMid = 6;
  if (has_versionmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->versionmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginCnsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cnsIp = 1;
    if (has_cnsip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cnsip());
    }
    
    // required string gsInfo = 2;
    if (has_gsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gsinfo());
    }
    
    // optional int32 versionOld = 3;
    if (has_versionold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionold());
    }
    
    // optional int32 versionNew = 4;
    if (has_versionnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionnew());
    }
    
    // optional string downloadUrl = 5;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }
    
    // optional int32 versionMid = 6;
    if (has_versionmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginCnsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginCnsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginCnsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginCnsInfo::MergeFrom(const LoginCnsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cnsip()) {
      set_cnsip(from.cnsip());
    }
    if (from.has_gsinfo()) {
      set_gsinfo(from.gsinfo());
    }
    if (from.has_versionold()) {
      set_versionold(from.versionold());
    }
    if (from.has_versionnew()) {
      set_versionnew(from.versionnew());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_versionmid()) {
      set_versionmid(from.versionmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginCnsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCnsInfo::CopyFrom(const LoginCnsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCnsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LoginCnsInfo::Swap(LoginCnsInfo* other) {
  if (other != this) {
    std::swap(cnsip_, other->cnsip_);
    std::swap(gsinfo_, other->gsinfo_);
    std::swap(versionold_, other->versionold_);
    std::swap(versionnew_, other->versionnew_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(versionmid_, other->versionmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginCnsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginCnsInfo_descriptor_;
  metadata.reflection = LoginCnsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kUidFieldNumber;
const int Login::kOpenidFieldNumber;
const int Login::kRoleIdFieldNumber;
const int Login::kHeaderUrlFieldNumber;
const int Login::kNickNameFieldNumber;
const int Login::kSexFieldNumber;
const int Login::kClientVersionFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  clientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  SharedDtor();
}

void Login::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientversion_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    roleid_ = 0;
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    sex_ = 0;
    if (has_clientversion()) {
      if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
        clientversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }
      
      // optional string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleId;
        break;
      }
      
      // optional int32 roleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headerUrl;
        break;
      }
      
      // optional string headerUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }
      
      // optional string nickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clientVersion;
        break;
      }
      
      // optional string clientVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientversion().data(), this->clientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }
  
  // optional int32 roleId = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }
  
  // optional string headerUrl = 4;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headerurl(), output);
  }
  
  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // optional string clientVersion = 7;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clientversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }
  
  // optional int32 roleId = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roleid(), target);
  }
  
  // optional string headerUrl = 4;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headerurl(), target);
  }
  
  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // optional string clientVersion = 7;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
    // optional int32 roleId = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
    // optional string headerUrl = 4;
    if (has_headerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
    // optional string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string clientVersion = 7;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  
  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(openid_, other->openid_);
    std::swap(roleid_, other->roleid_);
    std::swap(headerurl_, other->headerurl_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kResultFieldNumber;
const int LoginResult::kServerTimeFieldNumber;
const int LoginResult::kErrmsgFieldNumber;
const int LoginResult::kOpenidFieldNumber;
const int LoginResult::kUidFieldNumber;
const int LoginResult::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_time_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    server_time_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }
      
      // required int64 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errmsg;
        break;
      }
      
      // optional string errmsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }
      
      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uid;
        break;
      }
      
      // optional string uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleId;
        break;
      }
      
      // optional int32 roleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->result(), output);
  }
  
  // required int64 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->server_time(), output);
  }
  
  // optional string errmsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errmsg(), output);
  }
  
  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }
  
  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uid(), output);
  }
  
  // optional int32 roleId = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }
  
  // required int64 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->server_time(), target);
  }
  
  // optional string errmsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }
  
  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }
  
  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }
  
  // optional int32 roleId = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }
    
    // required int64 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_time());
    }
    
    // optional string errmsg = 3;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
    // optional string uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional int32 roleId = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_time_, other->server_time_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(openid_, other->openid_);
    std::swap(uid_, other->uid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kBaseFieldNumber;
const int PlayerInfo::kExtraFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  base_ = const_cast< ::rpc::PlayerBaseInfo*>(&::rpc::PlayerBaseInfo::default_instance());
  extra_ = const_cast< ::rpc::PlayerExtraInfo*>(&::rpc::PlayerExtraInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  extra_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete extra_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::rpc::PlayerBaseInfo::Clear();
    }
    if (has_extra()) {
      if (extra_ != NULL) extra_->::rpc::PlayerExtraInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.PlayerBaseInfo base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extra;
        break;
      }
      
      // optional .rpc.PlayerExtraInfo extra = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.PlayerBaseInfo base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .rpc.PlayerExtraInfo extra = 2;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.PlayerBaseInfo base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .rpc.PlayerExtraInfo extra = 2;
  if (has_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extra(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.PlayerBaseInfo base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .rpc.PlayerExtraInfo extra = 2;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::rpc::PlayerBaseInfo::MergeFrom(from.base());
    }
    if (from.has_extra()) {
      mutable_extra()->::rpc::PlayerExtraInfo::MergeFrom(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_extra()) {
    if (!this->extra().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceNotify::kCoinFieldNumber;
const int ResourceNotify::kGemFieldNumber;
const int ResourceNotify::kInsurCoinFieldNumber;
const int ResourceNotify::kLevelFieldNumber;
const int ResourceNotify::kExpFieldNumber;
#endif  // !_MSC_VER

ResourceNotify::ResourceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceNotify::InitAsDefaultInstance() {
}

ResourceNotify::ResourceNotify(const ResourceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceNotify::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  gem_ = 0;
  insurcoin_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceNotify::~ResourceNotify() {
  SharedDtor();
}

void ResourceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceNotify_descriptor_;
}

const ResourceNotify& ResourceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ResourceNotify* ResourceNotify::default_instance_ = NULL;

ResourceNotify* ResourceNotify::New() const {
  return new ResourceNotify;
}

void ResourceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
    gem_ = 0;
    insurcoin_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem;
        break;
      }
      
      // optional int32 gem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_insurCoin;
        break;
      }
      
      // optional int32 insurCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insurCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insurcoin_)));
          set_has_insurcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }
  
  // optional int32 gem = 2;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem(), output);
  }
  
  // optional int32 insurCoin = 3;
  if (has_insurcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->insurcoin(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }
  
  // optional int32 gem = 2;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem(), target);
  }
  
  // optional int32 insurCoin = 3;
  if (has_insurcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->insurcoin(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 gem = 2;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }
    
    // optional int32 insurCoin = 3;
    if (has_insurcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insurcoin());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceNotify::MergeFrom(const ResourceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_insurcoin()) {
      set_insurcoin(from.insurcoin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceNotify::CopyFrom(const ResourceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceNotify::IsInitialized() const {
  
  return true;
}

void ResourceNotify::Swap(ResourceNotify* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(gem_, other->gem_);
    std::swap(insurcoin_, other->insurcoin_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceNotify_descriptor_;
  metadata.reflection = ResourceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineBody::kRoomIdFieldNumber;
const int OnlineBody::kNumFieldNumber;
#endif  // !_MSC_VER

OnlineBody::OnlineBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineBody::InitAsDefaultInstance() {
}

OnlineBody::OnlineBody(const OnlineBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineBody::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineBody::~OnlineBody() {
  SharedDtor();
}

void OnlineBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineBody_descriptor_;
}

const OnlineBody& OnlineBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OnlineBody* OnlineBody::default_instance_ = NULL;

OnlineBody* OnlineBody::New() const {
  return new OnlineBody;
}

void OnlineBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineBody::MergeFrom(const OnlineBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineBody::CopyFrom(const OnlineBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OnlineBody::Swap(OnlineBody* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineBody_descriptor_;
  metadata.reflection = OnlineBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

OnlineInfo::OnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineInfo::InitAsDefaultInstance() {
}

OnlineInfo::OnlineInfo(const OnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineInfo::~OnlineInfo() {
  SharedDtor();
}

void OnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineInfo_descriptor_;
}

const OnlineInfo& OnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OnlineInfo* OnlineInfo::default_instance_ = NULL;

OnlineInfo* OnlineInfo::New() const {
  return new OnlineInfo;
}

void OnlineInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.OnlineBody info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.OnlineBody info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.OnlineBody info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.OnlineBody info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineInfo::MergeFrom(const OnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineInfo::CopyFrom(const OnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineInfo::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void OnlineInfo::Swap(OnlineInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineInfo_descriptor_;
  metadata.reflection = OnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePlayerReq::kPartIdsFieldNumber;
#endif  // !_MSC_VER

OnlinePlayerReq::OnlinePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlinePlayerReq::InitAsDefaultInstance() {
}

OnlinePlayerReq::OnlinePlayerReq(const OnlinePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePlayerReq::~OnlinePlayerReq() {
  SharedDtor();
}

void OnlinePlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlinePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlinePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlinePlayerReq_descriptor_;
}

const OnlinePlayerReq& OnlinePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OnlinePlayerReq* OnlinePlayerReq::default_instance_ = NULL;

OnlinePlayerReq* OnlinePlayerReq::New() const {
  return new OnlinePlayerReq;
}

void OnlinePlayerReq::Clear() {
  partids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlinePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 partIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_partids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_partIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 partIds = 1;
  for (int i = 0; i < this->partids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->partids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlinePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 partIds = 1;
  for (int i = 0; i < this->partids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->partids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlinePlayerReq::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 partIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->partids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partids(i));
    }
    total_size += 1 * this->partids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlinePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlinePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlinePlayerReq::MergeFrom(const OnlinePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  partids_.MergeFrom(from.partids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlinePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlinePlayerReq::CopyFrom(const OnlinePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePlayerReq::IsInitialized() const {
  
  return true;
}

void OnlinePlayerReq::Swap(OnlinePlayerReq* other) {
  if (other != this) {
    partids_.Swap(&other->partids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlinePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlinePlayerReq_descriptor_;
  metadata.reflection = OnlinePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePlayerMsg::kDaerInfoFieldNumber;
const int OnlinePlayerMsg::kMjInfoFieldNumber;
const int OnlinePlayerMsg::kPokerInfoFieldNumber;
#endif  // !_MSC_VER

OnlinePlayerMsg::OnlinePlayerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlinePlayerMsg::InitAsDefaultInstance() {
  daerinfo_ = const_cast< ::rpc::OnlineInfo*>(&::rpc::OnlineInfo::default_instance());
  mjinfo_ = const_cast< ::rpc::OnlineInfo*>(&::rpc::OnlineInfo::default_instance());
  pokerinfo_ = const_cast< ::rpc::OnlineInfo*>(&::rpc::OnlineInfo::default_instance());
}

OnlinePlayerMsg::OnlinePlayerMsg(const OnlinePlayerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePlayerMsg::SharedCtor() {
  _cached_size_ = 0;
  daerinfo_ = NULL;
  mjinfo_ = NULL;
  pokerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePlayerMsg::~OnlinePlayerMsg() {
  SharedDtor();
}

void OnlinePlayerMsg::SharedDtor() {
  if (this != default_instance_) {
    delete daerinfo_;
    delete mjinfo_;
    delete pokerinfo_;
  }
}

void OnlinePlayerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlinePlayerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlinePlayerMsg_descriptor_;
}

const OnlinePlayerMsg& OnlinePlayerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OnlinePlayerMsg* OnlinePlayerMsg::default_instance_ = NULL;

OnlinePlayerMsg* OnlinePlayerMsg::New() const {
  return new OnlinePlayerMsg;
}

void OnlinePlayerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_daerinfo()) {
      if (daerinfo_ != NULL) daerinfo_->::rpc::OnlineInfo::Clear();
    }
    if (has_mjinfo()) {
      if (mjinfo_ != NULL) mjinfo_->::rpc::OnlineInfo::Clear();
    }
    if (has_pokerinfo()) {
      if (pokerinfo_ != NULL) pokerinfo_->::rpc::OnlineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlinePlayerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.OnlineInfo daerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mjInfo;
        break;
      }
      
      // optional .rpc.OnlineInfo mjInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mjInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pokerInfo;
        break;
      }
      
      // optional .rpc.OnlineInfo pokerInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePlayerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.OnlineInfo daerInfo = 1;
  if (has_daerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daerinfo(), output);
  }
  
  // optional .rpc.OnlineInfo mjInfo = 2;
  if (has_mjinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mjinfo(), output);
  }
  
  // optional .rpc.OnlineInfo pokerInfo = 3;
  if (has_pokerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pokerinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlinePlayerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.OnlineInfo daerInfo = 1;
  if (has_daerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daerinfo(), target);
  }
  
  // optional .rpc.OnlineInfo mjInfo = 2;
  if (has_mjinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mjinfo(), target);
  }
  
  // optional .rpc.OnlineInfo pokerInfo = 3;
  if (has_pokerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pokerinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlinePlayerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.OnlineInfo daerInfo = 1;
    if (has_daerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daerinfo());
    }
    
    // optional .rpc.OnlineInfo mjInfo = 2;
    if (has_mjinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjinfo());
    }
    
    // optional .rpc.OnlineInfo pokerInfo = 3;
    if (has_pokerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pokerinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePlayerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlinePlayerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlinePlayerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlinePlayerMsg::MergeFrom(const OnlinePlayerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daerinfo()) {
      mutable_daerinfo()->::rpc::OnlineInfo::MergeFrom(from.daerinfo());
    }
    if (from.has_mjinfo()) {
      mutable_mjinfo()->::rpc::OnlineInfo::MergeFrom(from.mjinfo());
    }
    if (from.has_pokerinfo()) {
      mutable_pokerinfo()->::rpc::OnlineInfo::MergeFrom(from.pokerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlinePlayerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlinePlayerMsg::CopyFrom(const OnlinePlayerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePlayerMsg::IsInitialized() const {
  
  if (has_daerinfo()) {
    if (!this->daerinfo().IsInitialized()) return false;
  }
  if (has_mjinfo()) {
    if (!this->mjinfo().IsInitialized()) return false;
  }
  if (has_pokerinfo()) {
    if (!this->pokerinfo().IsInitialized()) return false;
  }
  return true;
}

void OnlinePlayerMsg::Swap(OnlinePlayerMsg* other) {
  if (other != this) {
    std::swap(daerinfo_, other->daerinfo_);
    std::swap(mjinfo_, other->mjinfo_);
    std::swap(pokerinfo_, other->pokerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlinePlayerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlinePlayerMsg_descriptor_;
  metadata.reflection = OnlinePlayerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMsg::kTxtIdFieldNumber;
#endif  // !_MSC_VER

NotifyMsg::NotifyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMsg::InitAsDefaultInstance() {
}

NotifyMsg::NotifyMsg(const NotifyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMsg::SharedCtor() {
  _cached_size_ = 0;
  txtid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMsg::~NotifyMsg() {
  SharedDtor();
}

void NotifyMsg::SharedDtor() {
  if (txtid_ != &::google::protobuf::internal::kEmptyString) {
    delete txtid_;
  }
  if (this != default_instance_) {
  }
}

void NotifyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMsg_descriptor_;
}

const NotifyMsg& NotifyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

NotifyMsg* NotifyMsg::default_instance_ = NULL;

NotifyMsg* NotifyMsg::New() const {
  return new NotifyMsg;
}

void NotifyMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_txtid()) {
      if (txtid_ != &::google::protobuf::internal::kEmptyString) {
        txtid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txtId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txtid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txtid().data(), this->txtid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string txtId = 1;
  if (has_txtid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtid().data(), this->txtid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->txtid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string txtId = 1;
  if (has_txtid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtid().data(), this->txtid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txtid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string txtId = 1;
    if (has_txtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txtid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMsg::MergeFrom(const NotifyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txtid()) {
      set_txtid(from.txtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMsg::CopyFrom(const NotifyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMsg::IsInitialized() const {
  
  return true;
}

void NotifyMsg::Swap(NotifyMsg* other) {
  if (other != this) {
    std::swap(txtid_, other->txtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMsg_descriptor_;
  metadata.reflection = NotifyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  
  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatRst::kTimeFieldNumber;
#endif  // !_MSC_VER

HeartBeatRst::HeartBeatRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatRst::InitAsDefaultInstance() {
}

HeartBeatRst::HeartBeatRst(const HeartBeatRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatRst::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRst::~HeartBeatRst() {
  SharedDtor();
}

void HeartBeatRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRst_descriptor_;
}

const HeartBeatRst& HeartBeatRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

HeartBeatRst* HeartBeatRst::default_instance_ = NULL;

HeartBeatRst* HeartBeatRst::New() const {
  return new HeartBeatRst;
}

void HeartBeatRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatRst::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRst::MergeFrom(const HeartBeatRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRst::CopyFrom(const HeartBeatRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRst::IsInitialized() const {
  
  return true;
}

void HeartBeatRst::Swap(HeartBeatRst* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRst_descriptor_;
  metadata.reflection = HeartBeatRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInRoomNotify::kGameTypeFieldNumber;
const int PlayerInRoomNotify::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

PlayerInRoomNotify::PlayerInRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInRoomNotify::InitAsDefaultInstance() {
}

PlayerInRoomNotify::PlayerInRoomNotify(const PlayerInRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInRoomNotify::~PlayerInRoomNotify() {
  SharedDtor();
}

void PlayerInRoomNotify::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInRoomNotify_descriptor_;
}

const PlayerInRoomNotify& PlayerInRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PlayerInRoomNotify* PlayerInRoomNotify::default_instance_ = NULL;

PlayerInRoomNotify* PlayerInRoomNotify::New() const {
  return new PlayerInRoomNotify;
}

void PlayerInRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomType;
        break;
      }
      
      // required int32 roomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gametype(), output);
  }
  
  // required int32 roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gametype(), target);
  }
  
  // required int32 roomType = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameType = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // required int32 roomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInRoomNotify::MergeFrom(const PlayerInRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInRoomNotify::CopyFrom(const PlayerInRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerInRoomNotify::Swap(PlayerInRoomNotify* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInRoomNotify_descriptor_;
  metadata.reflection = PlayerInRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfo::kNameFieldNumber;
const int RoleInfo::kSexFieldNumber;
const int RoleInfo::kPhoneFieldNumber;
#endif  // !_MSC_VER

RoleInfo::RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfo::InitAsDefaultInstance() {
}

RoleInfo::RoleInfo(const RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfo::~RoleInfo() {
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfo_descriptor_;
}

const RoleInfo& RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RoleInfo* RoleInfo::default_instance_ = NULL;

RoleInfo* RoleInfo::New() const {
  return new RoleInfo;
}

void RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }
      
      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }
  
  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }
  
  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  
  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfo_descriptor_;
  metadata.reflection = RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMail::kMailIdFieldNumber;
const int SysMail::kVersionFieldNumber;
const int SysMail::kTitleFieldNumber;
const int SysMail::kContentFieldNumber;
const int SysMail::kSendtimeFieldNumber;
const int SysMail::kAttachFieldNumber;
const int SysMail::kOverduetimeFieldNumber;
const int SysMail::kBReadFieldNumber;
#endif  // !_MSC_VER

SysMail::SysMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysMail::InitAsDefaultInstance() {
}

SysMail::SysMail(const SysMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = 0;
  attach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  overduetime_ = 0;
  bread_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMail::~SysMail() {
  SharedDtor();
}

void SysMail::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::kEmptyString) {
    delete mailid_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (attach_ != &::google::protobuf::internal::kEmptyString) {
    delete attach_;
  }
  if (this != default_instance_) {
  }
}

void SysMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMail_descriptor_;
}

const SysMail& SysMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

SysMail* SysMail::default_instance_ = NULL;

SysMail* SysMail::New() const {
  return new SysMail;
}

void SysMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::kEmptyString) {
        mailid_->clear();
      }
    }
    version_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sendtime_ = 0;
    if (has_attach()) {
      if (attach_ != &::google::protobuf::internal::kEmptyString) {
        attach_->clear();
      }
    }
    overduetime_ = 0;
    bread_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // required int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sendtime;
        break;
      }
      
      // required int32 sendtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attach;
        break;
      }
      
      // optional string attach = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attach().data(), this->attach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_overduetime;
        break;
      }
      
      // optional int32 overduetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overduetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overduetime_)));
          set_has_overduetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bRead;
        break;
      }
      
      // optional bool bRead = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bread_)));
          set_has_bread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailid(), output);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // required int32 sendtime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sendtime(), output);
  }
  
  // optional string attach = 6;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attach().data(), this->attach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attach(), output);
  }
  
  // optional int32 overduetime = 7;
  if (has_overduetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->overduetime(), output);
  }
  
  // optional bool bRead = 8;
  if (has_bread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bread(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mailid(), target);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // required int32 sendtime = 5;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sendtime(), target);
  }
  
  // optional string attach = 6;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attach().data(), this->attach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->attach(), target);
  }
  
  // optional int32 overduetime = 7;
  if (has_overduetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overduetime(), target);
  }
  
  // optional bool bRead = 8;
  if (has_bread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bread(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }
    
    // required int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // required int32 sendtime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }
    
    // optional string attach = 6;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attach());
    }
    
    // optional int32 overduetime = 7;
    if (has_overduetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overduetime());
    }
    
    // optional bool bRead = 8;
    if (has_bread()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMail::MergeFrom(const SysMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_attach()) {
      set_attach(from.attach());
    }
    if (from.has_overduetime()) {
      set_overduetime(from.overduetime());
    }
    if (from.has_bread()) {
      set_bread(from.bread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMail::CopyFrom(const SysMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SysMail::Swap(SysMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(version_, other->version_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(attach_, other->attach_);
    std::swap(overduetime_, other->overduetime_);
    std::swap(bread_, other->bread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMail_descriptor_;
  metadata.reflection = SysMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMailInfo::kSysmailVersionFieldNumber;
const int PlayerMailInfo::kMaillistFieldNumber;
#endif  // !_MSC_VER

PlayerMailInfo::PlayerMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMailInfo::InitAsDefaultInstance() {
}

PlayerMailInfo::PlayerMailInfo(const PlayerMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMailInfo::SharedCtor() {
  _cached_size_ = 0;
  sysmail_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMailInfo::~PlayerMailInfo() {
  SharedDtor();
}

void PlayerMailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMailInfo_descriptor_;
}

const PlayerMailInfo& PlayerMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PlayerMailInfo* PlayerMailInfo::default_instance_ = NULL;

PlayerMailInfo* PlayerMailInfo::New() const {
  return new PlayerMailInfo;
}

void PlayerMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sysmail_version_ = 0;
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sysmail_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sysmail_version_)));
          set_has_sysmail_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        break;
      }
      
      // repeated .rpc.SysMail maillist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sysmail_version = 1;
  if (has_sysmail_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sysmail_version(), output);
  }
  
  // repeated .rpc.SysMail maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maillist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sysmail_version = 1;
  if (has_sysmail_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sysmail_version(), target);
  }
  
  // repeated .rpc.SysMail maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maillist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sysmail_version = 1;
    if (has_sysmail_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sysmail_version());
    }
    
  }
  // repeated .rpc.SysMail maillist = 2;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMailInfo::MergeFrom(const PlayerMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysmail_version()) {
      set_sysmail_version(from.sysmail_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMailInfo::CopyFrom(const PlayerMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerMailInfo::Swap(PlayerMailInfo* other) {
  if (other != this) {
    std::swap(sysmail_version_, other->sysmail_version_);
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMailInfo_descriptor_;
  metadata.reflection = PlayerMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReadOneMail::kMailIdFieldNumber;
#endif  // !_MSC_VER

ReqReadOneMail::ReqReadOneMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReadOneMail::InitAsDefaultInstance() {
}

ReqReadOneMail::ReqReadOneMail(const ReqReadOneMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReadOneMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReadOneMail::~ReqReadOneMail() {
  SharedDtor();
}

void ReqReadOneMail::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::kEmptyString) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void ReqReadOneMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReadOneMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReadOneMail_descriptor_;
}

const ReqReadOneMail& ReqReadOneMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqReadOneMail* ReqReadOneMail::default_instance_ = NULL;

ReqReadOneMail* ReqReadOneMail::New() const {
  return new ReqReadOneMail;
}

void ReqReadOneMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::kEmptyString) {
        mailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReadOneMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReadOneMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReadOneMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReadOneMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReadOneMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReadOneMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReadOneMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReadOneMail::MergeFrom(const ReqReadOneMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReadOneMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReadOneMail::CopyFrom(const ReqReadOneMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReadOneMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqReadOneMail::Swap(ReqReadOneMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReadOneMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReadOneMail_descriptor_;
  metadata.reflection = ReqReadOneMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMailNotify::kMailIdsFieldNumber;
#endif  // !_MSC_VER

RemoveMailNotify::RemoveMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMailNotify::InitAsDefaultInstance() {
}

RemoveMailNotify::RemoveMailNotify(const RemoveMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMailNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMailNotify::~RemoveMailNotify() {
  SharedDtor();
}

void RemoveMailNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMailNotify_descriptor_;
}

const RemoveMailNotify& RemoveMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RemoveMailNotify* RemoveMailNotify::default_instance_ = NULL;

RemoveMailNotify* RemoveMailNotify::New() const {
  return new RemoveMailNotify;
}

void RemoveMailNotify::Clear() {
  mailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 mailIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 mailIds = 1;
  for (int i = 0; i < this->mailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mailids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 mailIds = 1;
  for (int i = 0; i < this->mailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mailids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMailNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 mailIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mailids(i));
    }
    total_size += 1 * this->mailids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMailNotify::MergeFrom(const RemoveMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailids_.MergeFrom(from.mailids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMailNotify::CopyFrom(const RemoveMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMailNotify::IsInitialized() const {
  
  return true;
}

void RemoveMailNotify::Swap(RemoveMailNotify* other) {
  if (other != this) {
    mailids_.Swap(&other->mailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMailNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMailNotify_descriptor_;
  metadata.reflection = RemoveMailNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMailNotify::kMaillistFieldNumber;
#endif  // !_MSC_VER

AddMailNotify::AddMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMailNotify::InitAsDefaultInstance() {
}

AddMailNotify::AddMailNotify(const AddMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMailNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMailNotify::~AddMailNotify() {
  SharedDtor();
}

void AddMailNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMailNotify_descriptor_;
}

const AddMailNotify& AddMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

AddMailNotify* AddMailNotify::default_instance_ = NULL;

AddMailNotify* AddMailNotify::New() const {
  return new AddMailNotify;
}

void AddMailNotify::Clear() {
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.SysMail maillist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_maillist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.SysMail maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.SysMail maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMailNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.SysMail maillist = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMailNotify::MergeFrom(const AddMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMailNotify::CopyFrom(const AddMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMailNotify::IsInitialized() const {
  
  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void AddMailNotify::Swap(AddMailNotify* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMailNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMailNotify_descriptor_;
  metadata.reflection = AddMailNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBroadCast::kPlayerIDFieldNumber;
const int ReqBroadCast::kContentFieldNumber;
const int ReqBroadCast::kBVipFieldNumber;
const int ReqBroadCast::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

ReqBroadCast::ReqBroadCast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBroadCast::InitAsDefaultInstance() {
}

ReqBroadCast::ReqBroadCast(const ReqBroadCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBroadCast::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bvip_ = false;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBroadCast::~ReqBroadCast() {
  SharedDtor();
}

void ReqBroadCast::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ReqBroadCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBroadCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBroadCast_descriptor_;
}

const ReqBroadCast& ReqBroadCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqBroadCast* ReqBroadCast::default_instance_ = NULL;

ReqBroadCast* ReqBroadCast::New() const {
  return new ReqBroadCast;
}

void ReqBroadCast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    bvip_ = false;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBroadCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bVip;
        break;
      }
      
      // optional bool bVip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerName;
        break;
      }
      
      // optional string playerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBroadCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional bool bVip = 3;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bvip(), output);
  }
  
  // optional string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBroadCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional bool bVip = 3;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bvip(), target);
  }
  
  // optional string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBroadCast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional bool bVip = 3;
    if (has_bvip()) {
      total_size += 1 + 1;
    }
    
    // optional string playerName = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBroadCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBroadCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBroadCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBroadCast::MergeFrom(const ReqBroadCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBroadCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBroadCast::CopyFrom(const ReqBroadCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBroadCast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqBroadCast::Swap(ReqBroadCast* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(content_, other->content_);
    std::swap(bvip_, other->bvip_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBroadCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBroadCast_descriptor_;
  metadata.reflection = ReqBroadCast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadCastNotify::kBroadCastIDFieldNumber;
const int BroadCastNotify::kSysBroadFieldNumber;
const int BroadCastNotify::kContentFieldNumber;
const int BroadCastNotify::kPlayerNameFieldNumber;
const int BroadCastNotify::kPlayerIDFieldNumber;
const int BroadCastNotify::kVipFieldNumber;
#endif  // !_MSC_VER

BroadCastNotify::BroadCastNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadCastNotify::InitAsDefaultInstance() {
}

BroadCastNotify::BroadCastNotify(const BroadCastNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadCastNotify::SharedCtor() {
  _cached_size_ = 0;
  broadcastid_ = 0;
  sysbroad_ = false;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadCastNotify::~BroadCastNotify() {
  SharedDtor();
}

void BroadCastNotify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void BroadCastNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadCastNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCastNotify_descriptor_;
}

const BroadCastNotify& BroadCastNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

BroadCastNotify* BroadCastNotify::default_instance_ = NULL;

BroadCastNotify* BroadCastNotify::New() const {
  return new BroadCastNotify;
}

void BroadCastNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broadcastid_ = 0;
    sysbroad_ = false;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    vip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadCastNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 broadCastID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcastid_)));
          set_has_broadcastid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sysBroad;
        break;
      }
      
      // required bool sysBroad = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysBroad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sysbroad_)));
          set_has_sysbroad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerName;
        break;
      }
      
      // optional string playerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerID;
        break;
      }
      
      // optional string playerID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }
      
      // optional bool vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadCastNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 broadCastID = 1;
  if (has_broadcastid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broadcastid(), output);
  }
  
  // required bool sysBroad = 2;
  if (has_sysbroad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sysbroad(), output);
  }
  
  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  // optional string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playername(), output);
  }
  
  // optional string playerID = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playerid(), output);
  }
  
  // optional bool vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadCastNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 broadCastID = 1;
  if (has_broadcastid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broadcastid(), target);
  }
  
  // required bool sysBroad = 2;
  if (has_sysbroad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sysbroad(), target);
  }
  
  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  // optional string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playername(), target);
  }
  
  // optional string playerID = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playerid(), target);
  }
  
  // optional bool vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadCastNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 broadCastID = 1;
    if (has_broadcastid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcastid());
    }
    
    // required bool sysBroad = 2;
    if (has_sysbroad()) {
      total_size += 1 + 1;
    }
    
    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional string playerName = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional string playerID = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional bool vip = 6;
    if (has_vip()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadCastNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadCastNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadCastNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadCastNotify::MergeFrom(const BroadCastNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broadcastid()) {
      set_broadcastid(from.broadcastid());
    }
    if (from.has_sysbroad()) {
      set_sysbroad(from.sysbroad());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadCastNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCastNotify::CopyFrom(const BroadCastNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCastNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BroadCastNotify::Swap(BroadCastNotify* other) {
  if (other != this) {
    std::swap(broadcastid_, other->broadcastid_);
    std::swap(sysbroad_, other->sysbroad_);
    std::swap(content_, other->content_);
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadCastNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadCastNotify_descriptor_;
  metadata.reflection = BroadCastNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightChat::kChatTypeFieldNumber;
const int FightChat::kFaceIDFieldNumber;
const int FightChat::kFixWordIDFieldNumber;
const int FightChat::kGameTypeFieldNumber;
const int FightChat::kCustomContentFieldNumber;
const int FightChat::kItemIdFieldNumber;
const int FightChat::kReceiverPlayerIDFieldNumber;
#endif  // !_MSC_VER

FightChat::FightChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightChat::InitAsDefaultInstance() {
}

FightChat::FightChat(const FightChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightChat::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  faceid_ = 0;
  fixwordid_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightChat::~FightChat() {
  SharedDtor();
}

void FightChat::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (customcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete customcontent_;
  }
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (receiverplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete receiverplayerid_;
  }
  if (this != default_instance_) {
  }
}

void FightChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightChat_descriptor_;
}

const FightChat& FightChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FightChat* FightChat::default_instance_ = NULL;

FightChat* FightChat::New() const {
  return new FightChat;
}

void FightChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    faceid_ = 0;
    fixwordid_ = 0;
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    if (has_customcontent()) {
      if (customcontent_ != &::google::protobuf::internal::kEmptyString) {
        customcontent_->clear();
      }
    }
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::kEmptyString) {
        itemid_->clear();
      }
    }
    if (has_receiverplayerid()) {
      if (receiverplayerid_ != &::google::protobuf::internal::kEmptyString) {
        receiverplayerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chatType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faceID;
        break;
      }
      
      // optional int32 faceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fixWordID;
        break;
      }
      
      // optional int32 fixWordID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixWordID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixwordid_)));
          set_has_fixwordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameType;
        break;
      }
      
      // optional string gameType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_customContent;
        break;
      }
      
      // optional string customContent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customcontent().data(), this->customcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemId;
        break;
      }
      
      // optional string itemId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_receiverPlayerID;
        break;
      }
      
      // optional string receiverPlayerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverPlayerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiverplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiverplayerid().data(), this->receiverplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chatType = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }
  
  // optional int32 faceID = 2;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->faceid(), output);
  }
  
  // optional int32 fixWordID = 3;
  if (has_fixwordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixwordid(), output);
  }
  
  // optional string gameType = 4;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gametype(), output);
  }
  
  // optional string customContent = 5;
  if (has_customcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customcontent().data(), this->customcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->customcontent(), output);
  }
  
  // optional string itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->itemid(), output);
  }
  
  // optional string receiverPlayerID = 7;
  if (has_receiverplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverplayerid().data(), this->receiverplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->receiverplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chatType = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }
  
  // optional int32 faceID = 2;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->faceid(), target);
  }
  
  // optional int32 fixWordID = 3;
  if (has_fixwordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixwordid(), target);
  }
  
  // optional string gameType = 4;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gametype(), target);
  }
  
  // optional string customContent = 5;
  if (has_customcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customcontent().data(), this->customcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->customcontent(), target);
  }
  
  // optional string itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->itemid(), target);
  }
  
  // optional string receiverPlayerID = 7;
  if (has_receiverplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverplayerid().data(), this->receiverplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->receiverplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chatType = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }
    
    // optional int32 faceID = 2;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }
    
    // optional int32 fixWordID = 3;
    if (has_fixwordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixwordid());
    }
    
    // optional string gameType = 4;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // optional string customContent = 5;
    if (has_customcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customcontent());
    }
    
    // optional string itemId = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }
    
    // optional string receiverPlayerID = 7;
    if (has_receiverplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiverplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightChat::MergeFrom(const FightChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_fixwordid()) {
      set_fixwordid(from.fixwordid());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_customcontent()) {
      set_customcontent(from.customcontent());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_receiverplayerid()) {
      set_receiverplayerid(from.receiverplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightChat::CopyFrom(const FightChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightChat::IsInitialized() const {
  
  return true;
}

void FightChat::Swap(FightChat* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(faceid_, other->faceid_);
    std::swap(fixwordid_, other->fixwordid_);
    std::swap(gametype_, other->gametype_);
    std::swap(customcontent_, other->customcontent_);
    std::swap(itemid_, other->itemid_);
    std::swap(receiverplayerid_, other->receiverplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightChat_descriptor_;
  metadata.reflection = FightChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFightRoomChat::kPlayerIDFieldNumber;
const int ReqFightRoomChat::kFighChatinfoFieldNumber;
#endif  // !_MSC_VER

ReqFightRoomChat::ReqFightRoomChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFightRoomChat::InitAsDefaultInstance() {
  fighchatinfo_ = const_cast< ::rpc::FightChat*>(&::rpc::FightChat::default_instance());
}

ReqFightRoomChat::ReqFightRoomChat(const ReqFightRoomChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFightRoomChat::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fighchatinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFightRoomChat::~ReqFightRoomChat() {
  SharedDtor();
}

void ReqFightRoomChat::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete fighchatinfo_;
  }
}

void ReqFightRoomChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFightRoomChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFightRoomChat_descriptor_;
}

const ReqFightRoomChat& ReqFightRoomChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqFightRoomChat* ReqFightRoomChat::default_instance_ = NULL;

ReqFightRoomChat* ReqFightRoomChat::New() const {
  return new ReqFightRoomChat;
}

void ReqFightRoomChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_fighchatinfo()) {
      if (fighchatinfo_ != NULL) fighchatinfo_->::rpc::FightChat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFightRoomChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fighChatinfo;
        break;
      }
      
      // required .rpc.FightChat fighChatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighChatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fighchatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFightRoomChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required .rpc.FightChat fighChatinfo = 2;
  if (has_fighchatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fighchatinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFightRoomChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required .rpc.FightChat fighChatinfo = 2;
  if (has_fighchatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fighchatinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFightRoomChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required .rpc.FightChat fighChatinfo = 2;
    if (has_fighchatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fighchatinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFightRoomChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFightRoomChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFightRoomChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFightRoomChat::MergeFrom(const ReqFightRoomChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_fighchatinfo()) {
      mutable_fighchatinfo()->::rpc::FightChat::MergeFrom(from.fighchatinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFightRoomChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFightRoomChat::CopyFrom(const ReqFightRoomChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFightRoomChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqFightRoomChat::Swap(ReqFightRoomChat* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(fighchatinfo_, other->fighchatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFightRoomChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFightRoomChat_descriptor_;
  metadata.reflection = ReqFightRoomChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRoomChatNotify::kPlayerIDFieldNumber;
const int FightRoomChatNotify::kFighChatinfoFieldNumber;
const int FightRoomChatNotify::kOfflineFieldNumber;
#endif  // !_MSC_VER

FightRoomChatNotify::FightRoomChatNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRoomChatNotify::InitAsDefaultInstance() {
  fighchatinfo_ = const_cast< ::rpc::FightChat*>(&::rpc::FightChat::default_instance());
}

FightRoomChatNotify::FightRoomChatNotify(const FightRoomChatNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRoomChatNotify::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fighchatinfo_ = NULL;
  offline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRoomChatNotify::~FightRoomChatNotify() {
  SharedDtor();
}

void FightRoomChatNotify::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete fighchatinfo_;
  }
}

void FightRoomChatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRoomChatNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRoomChatNotify_descriptor_;
}

const FightRoomChatNotify& FightRoomChatNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FightRoomChatNotify* FightRoomChatNotify::default_instance_ = NULL;

FightRoomChatNotify* FightRoomChatNotify::New() const {
  return new FightRoomChatNotify;
}

void FightRoomChatNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_fighchatinfo()) {
      if (fighchatinfo_ != NULL) fighchatinfo_->::rpc::FightChat::Clear();
    }
    offline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRoomChatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fighChatinfo;
        break;
      }
      
      // optional .rpc.FightChat fighChatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighChatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fighchatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offline;
        break;
      }
      
      // optional bool offline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRoomChatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional .rpc.FightChat fighChatinfo = 2;
  if (has_fighchatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fighchatinfo(), output);
  }
  
  // optional bool offline = 3;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->offline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRoomChatNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional .rpc.FightChat fighChatinfo = 2;
  if (has_fighchatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fighchatinfo(), target);
  }
  
  // optional bool offline = 3;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->offline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRoomChatNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional .rpc.FightChat fighChatinfo = 2;
    if (has_fighchatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fighchatinfo());
    }
    
    // optional bool offline = 3;
    if (has_offline()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRoomChatNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRoomChatNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRoomChatNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRoomChatNotify::MergeFrom(const FightRoomChatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_fighchatinfo()) {
      mutable_fighchatinfo()->::rpc::FightChat::MergeFrom(from.fighchatinfo());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRoomChatNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRoomChatNotify::CopyFrom(const FightRoomChatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRoomChatNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FightRoomChatNotify::Swap(FightRoomChatNotify* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(fighchatinfo_, other->fighchatinfo_);
    std::swap(offline_, other->offline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRoomChatNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRoomChatNotify_descriptor_;
  metadata.reflection = FightRoomChatNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notice::kContentFieldNumber;
#endif  // !_MSC_VER

Notice::Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Notice::InitAsDefaultInstance() {
}

Notice::Notice(const Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Notice::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notice::~Notice() {
  SharedDtor();
}

void Notice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_descriptor_;
}

const Notice& Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Notice* Notice::default_instance_ = NULL;

Notice* Notice::New() const {
  return new Notice;
}

void Notice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Notice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notice::MergeFrom(const Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notice::CopyFrom(const Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Notice::Swap(Notice* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notice_descriptor_;
  metadata.reflection = Notice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInsurenceMoney::kBWithdrawFieldNumber;
const int ReqInsurenceMoney::kValueFieldNumber;
#endif  // !_MSC_VER

ReqInsurenceMoney::ReqInsurenceMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInsurenceMoney::InitAsDefaultInstance() {
}

ReqInsurenceMoney::ReqInsurenceMoney(const ReqInsurenceMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInsurenceMoney::SharedCtor() {
  _cached_size_ = 0;
  bwithdraw_ = false;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInsurenceMoney::~ReqInsurenceMoney() {
  SharedDtor();
}

void ReqInsurenceMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInsurenceMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInsurenceMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInsurenceMoney_descriptor_;
}

const ReqInsurenceMoney& ReqInsurenceMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqInsurenceMoney* ReqInsurenceMoney::default_instance_ = NULL;

ReqInsurenceMoney* ReqInsurenceMoney::New() const {
  return new ReqInsurenceMoney;
}

void ReqInsurenceMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bwithdraw_ = false;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInsurenceMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bWithdraw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bwithdraw_)));
          set_has_bwithdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInsurenceMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool bWithdraw = 1;
  if (has_bwithdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bwithdraw(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInsurenceMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool bWithdraw = 1;
  if (has_bwithdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bwithdraw(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInsurenceMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bWithdraw = 1;
    if (has_bwithdraw()) {
      total_size += 1 + 1;
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInsurenceMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInsurenceMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInsurenceMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInsurenceMoney::MergeFrom(const ReqInsurenceMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bwithdraw()) {
      set_bwithdraw(from.bwithdraw());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInsurenceMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInsurenceMoney::CopyFrom(const ReqInsurenceMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInsurenceMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqInsurenceMoney::Swap(ReqInsurenceMoney* other) {
  if (other != this) {
    std::swap(bwithdraw_, other->bwithdraw_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInsurenceMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInsurenceMoney_descriptor_;
  metadata.reflection = ReqInsurenceMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player::kNameFieldNumber;
const int Player::kSexFieldNumber;
const int Player::kLevelFieldNumber;
const int Player::kHeaderFieldNumber;
const int Player::kRoleIdFieldNumber;
const int Player::kHeaderUrlFieldNumber;
const int Player::kUidFieldNumber;
const int Player::kBOnlineFieldNumber;
const int Player::kExpFieldNumber;
const int Player::kCoinFieldNumber;
const int Player::kScoresFieldNumber;
const int Player::kDiamondFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player::InitAsDefaultInstance() {
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0;
  header_ = 0;
  roleid_ = 0;
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bonline_ = false;
  exp_ = 0;
  coin_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  SharedDtor();
}

void Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    level_ = 0;
    header_ = 0;
    roleid_ = 0;
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    bonline_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0;
    coin_ = 0;
    diamond_ = 0;
  }
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_header;
        break;
      }
      
      // optional int32 header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleId;
        break;
      }
      
      // optional int32 roleId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headerUrl;
        break;
      }
      
      // optional string headerUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uid;
        break;
      }
      
      // optional string uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bOnline;
        break;
      }
      
      // optional bool bOnline = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bonline_)));
          set_has_bonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scores;
        break;
      }
      
      // repeated .rpc.Score scores = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scores;
        if (input->ExpectTag(96)) goto parse_diamond;
        break;
      }
      
      // optional int32 diamond = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->header(), output);
  }
  
  // optional int32 roleId = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roleid(), output);
  }
  
  // optional string headerUrl = 6;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->headerurl(), output);
  }
  
  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->uid(), output);
  }
  
  // optional bool bOnline = 8;
  if (has_bonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bonline(), output);
  }
  
  // optional int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }
  
  // optional int32 coin = 10;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coin(), output);
  }
  
  // repeated .rpc.Score scores = 11;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->scores(i), output);
  }
  
  // optional int32 diamond = 12;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 header = 4;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->header(), target);
  }
  
  // optional int32 roleId = 5;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roleid(), target);
  }
  
  // optional string headerUrl = 6;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headerurl(), target);
  }
  
  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uid(), target);
  }
  
  // optional bool bOnline = 8;
  if (has_bonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bonline(), target);
  }
  
  // optional int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }
  
  // optional int32 coin = 10;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coin(), target);
  }
  
  // repeated .rpc.Score scores = 11;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->scores(i), target);
  }
  
  // optional int32 diamond = 12;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 header = 4;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }
    
    // optional int32 roleId = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
    // optional string headerUrl = 6;
    if (has_headerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
    // optional string uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional bool bOnline = 8;
    if (has_bonline()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 coin = 10;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 diamond = 12;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }
    
  }
  // repeated .rpc.Score scores = 11;
  total_size += 1 * this->scores_size();
  for (int i = 0; i < this->scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  scores_.MergeFrom(from.scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_bonline()) {
      set_bonline(from.bonline());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < scores_size(); i++) {
    if (!this->scores(i).IsInitialized()) return false;
  }
  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(header_, other->header_);
    std::swap(roleid_, other->roleid_);
    std::swap(headerurl_, other->headerurl_);
    std::swap(uid_, other->uid_);
    std::swap(bonline_, other->bonline_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    scores_.Swap(&other->scores_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsList::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendsList::FriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsList::InitAsDefaultInstance() {
}

FriendsList::FriendsList(const FriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsList::~FriendsList() {
  SharedDtor();
}

void FriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsList_descriptor_;
}

const FriendsList& FriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FriendsList* FriendsList::default_instance_ = NULL;

FriendsList* FriendsList::New() const {
  return new FriendsList;
}

void FriendsList::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Player friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Player friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Player friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsList::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Player friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsList::MergeFrom(const FriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsList::CopyFrom(const FriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsList::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsList::Swap(FriendsList* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsList_descriptor_;
  metadata.reflection = FriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFriendsList::kFriendsFieldNumber;
#endif  // !_MSC_VER

RequestFriendsList::RequestFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFriendsList::InitAsDefaultInstance() {
}

RequestFriendsList::RequestFriendsList(const RequestFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFriendsList::~RequestFriendsList() {
  SharedDtor();
}

void RequestFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFriendsList_descriptor_;
}

const RequestFriendsList& RequestFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RequestFriendsList* RequestFriendsList::default_instance_ = NULL;

RequestFriendsList* RequestFriendsList::New() const {
  return new RequestFriendsList;
}

void RequestFriendsList::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Player friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Player friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Player friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFriendsList::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Player friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFriendsList::MergeFrom(const RequestFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFriendsList::CopyFrom(const RequestFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFriendsList::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void RequestFriendsList::Swap(RequestFriendsList* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFriendsList_descriptor_;
  metadata.reflection = RequestFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqString::kIdFieldNumber;
#endif  // !_MSC_VER

ReqString::ReqString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqString::InitAsDefaultInstance() {
}

ReqString::ReqString(const ReqString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqString::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqString::~ReqString() {
  SharedDtor();
}

void ReqString::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ReqString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqString_descriptor_;
}

const ReqString& ReqString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqString* ReqString::default_instance_ = NULL;

ReqString* ReqString::New() const {
  return new ReqString;
}

void ReqString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqString::MergeFrom(const ReqString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqString::CopyFrom(const ReqString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqString::IsInitialized() const {
  
  return true;
}

void ReqString::Swap(ReqString* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqString_descriptor_;
  metadata.reflection = ReqString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInt::kIdFieldNumber;
#endif  // !_MSC_VER

ReqInt::ReqInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInt::InitAsDefaultInstance() {
}

ReqInt::ReqInt(const ReqInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInt::~ReqInt() {
  SharedDtor();
}

void ReqInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInt_descriptor_;
}

const ReqInt& ReqInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqInt* ReqInt::default_instance_ = NULL;

ReqInt* ReqInt::New() const {
  return new ReqInt;
}

void ReqInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInt::MergeFrom(const ReqInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInt::CopyFrom(const ReqInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInt::IsInitialized() const {
  
  return true;
}

void ReqInt::Swap(ReqInt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInt_descriptor_;
  metadata.reflection = ReqInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFriendNofify::kPlayerFieldNumber;
#endif  // !_MSC_VER

SearchFriendNofify::SearchFriendNofify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchFriendNofify::InitAsDefaultInstance() {
  player_ = const_cast< ::rpc::Player*>(&::rpc::Player::default_instance());
}

SearchFriendNofify::SearchFriendNofify(const SearchFriendNofify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchFriendNofify::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFriendNofify::~SearchFriendNofify() {
  SharedDtor();
}

void SearchFriendNofify::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void SearchFriendNofify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFriendNofify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchFriendNofify_descriptor_;
}

const SearchFriendNofify& SearchFriendNofify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

SearchFriendNofify* SearchFriendNofify::default_instance_ = NULL;

SearchFriendNofify* SearchFriendNofify::New() const {
  return new SearchFriendNofify;
}

void SearchFriendNofify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::rpc::Player::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchFriendNofify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.Player player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchFriendNofify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.Player player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchFriendNofify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.Player player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchFriendNofify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.Player player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendNofify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchFriendNofify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchFriendNofify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchFriendNofify::MergeFrom(const SearchFriendNofify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::rpc::Player::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchFriendNofify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFriendNofify::CopyFrom(const SearchFriendNofify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendNofify::IsInitialized() const {
  
  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void SearchFriendNofify::Swap(SearchFriendNofify* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchFriendNofify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchFriendNofify_descriptor_;
  metadata.reflection = SearchFriendNofify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqResponseAddFriend::kUidFieldNumber;
const int ReqResponseAddFriend::kBAcceptFieldNumber;
#endif  // !_MSC_VER

ReqResponseAddFriend::ReqResponseAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqResponseAddFriend::InitAsDefaultInstance() {
}

ReqResponseAddFriend::ReqResponseAddFriend(const ReqResponseAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqResponseAddFriend::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baccept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqResponseAddFriend::~ReqResponseAddFriend() {
  SharedDtor();
}

void ReqResponseAddFriend::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void ReqResponseAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqResponseAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqResponseAddFriend_descriptor_;
}

const ReqResponseAddFriend& ReqResponseAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqResponseAddFriend* ReqResponseAddFriend::default_instance_ = NULL;

ReqResponseAddFriend* ReqResponseAddFriend::New() const {
  return new ReqResponseAddFriend;
}

void ReqResponseAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    baccept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqResponseAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bAccept;
        break;
      }
      
      // optional bool bAccept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &baccept_)));
          set_has_baccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqResponseAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional bool bAccept = 2;
  if (has_baccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->baccept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqResponseAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional bool bAccept = 2;
  if (has_baccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->baccept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqResponseAddFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional bool bAccept = 2;
    if (has_baccept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqResponseAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqResponseAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqResponseAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqResponseAddFriend::MergeFrom(const ReqResponseAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_baccept()) {
      set_baccept(from.baccept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqResponseAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResponseAddFriend::CopyFrom(const ReqResponseAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqResponseAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqResponseAddFriend::Swap(ReqResponseAddFriend* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(baccept_, other->baccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqResponseAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqResponseAddFriend_descriptor_;
  metadata.reflection = ReqResponseAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendNofify::kRstFieldNumber;
#endif  // !_MSC_VER

AddFriendNofify::AddFriendNofify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendNofify::InitAsDefaultInstance() {
}

AddFriendNofify::AddFriendNofify(const AddFriendNofify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendNofify::SharedCtor() {
  _cached_size_ = 0;
  rst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendNofify::~AddFriendNofify() {
  SharedDtor();
}

void AddFriendNofify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendNofify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendNofify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendNofify_descriptor_;
}

const AddFriendNofify& AddFriendNofify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

AddFriendNofify* AddFriendNofify::default_instance_ = NULL;

AddFriendNofify* AddFriendNofify::New() const {
  return new AddFriendNofify;
}

void AddFriendNofify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendNofify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendNofify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rst = 1;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rst(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendNofify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rst = 1;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rst(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendNofify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rst = 1;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rst());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendNofify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendNofify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendNofify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendNofify::MergeFrom(const AddFriendNofify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendNofify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendNofify::CopyFrom(const AddFriendNofify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendNofify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddFriendNofify::Swap(AddFriendNofify* other) {
  if (other != this) {
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendNofify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendNofify_descriptor_;
  metadata.reflection = AddFriendNofify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendNofity::kRstFieldNumber;
const int DelFriendNofity::kIdFieldNumber;
#endif  // !_MSC_VER

DelFriendNofity::DelFriendNofity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendNofity::InitAsDefaultInstance() {
}

DelFriendNofity::DelFriendNofity(const DelFriendNofity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendNofity::SharedCtor() {
  _cached_size_ = 0;
  rst_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendNofity::~DelFriendNofity() {
  SharedDtor();
}

void DelFriendNofity::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void DelFriendNofity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendNofity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendNofity_descriptor_;
}

const DelFriendNofity& DelFriendNofity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

DelFriendNofity* DelFriendNofity::default_instance_ = NULL;

DelFriendNofity* DelFriendNofity::New() const {
  return new DelFriendNofity;
}

void DelFriendNofity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rst_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendNofity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendNofity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rst = 1;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rst(), output);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendNofity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rst = 1;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rst(), target);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendNofity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rst = 1;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rst());
    }
    
    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendNofity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendNofity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendNofity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendNofity::MergeFrom(const DelFriendNofity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rst()) {
      set_rst(from.rst());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendNofity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendNofity::CopyFrom(const DelFriendNofity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendNofity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DelFriendNofity::Swap(DelFriendNofity* other) {
  if (other != this) {
    std::swap(rst_, other->rst_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendNofity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendNofity_descriptor_;
  metadata.reflection = DelFriendNofity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsIdList::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendsIdList::FriendsIdList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsIdList::InitAsDefaultInstance() {
}

FriendsIdList::FriendsIdList(const FriendsIdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsIdList::~FriendsIdList() {
  SharedDtor();
}

void FriendsIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsIdList_descriptor_;
}

const FriendsIdList& FriendsIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FriendsIdList* FriendsIdList::default_instance_ = NULL;

FriendsIdList* FriendsIdList::New() const {
  return new FriendsIdList;
}

void FriendsIdList::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendsIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friends(0).data(), this->friends(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends(i).data(), this->friends(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends(i).data(), this->friends(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated string friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendsIdList::MergeFrom(const FriendsIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendsIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendsIdList::CopyFrom(const FriendsIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsIdList::IsInitialized() const {
  
  return true;
}

void FriendsIdList::Swap(FriendsIdList* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendsIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsIdList_descriptor_;
  metadata.reflection = FriendsIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFriendChat::kSenderUidFieldNumber;
const int SendFriendChat::kReceiverUidFieldNumber;
const int SendFriendChat::kTextFieldNumber;
const int SendFriendChat::kSendtimeFieldNumber;
#endif  // !_MSC_VER

SendFriendChat::SendFriendChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendFriendChat::InitAsDefaultInstance() {
}

SendFriendChat::SendFriendChat(const SendFriendChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendFriendChat::SharedCtor() {
  _cached_size_ = 0;
  senderuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiveruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFriendChat::~SendFriendChat() {
  SharedDtor();
}

void SendFriendChat::SharedDtor() {
  if (senderuid_ != &::google::protobuf::internal::kEmptyString) {
    delete senderuid_;
  }
  if (receiveruid_ != &::google::protobuf::internal::kEmptyString) {
    delete receiveruid_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void SendFriendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFriendChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFriendChat_descriptor_;
}

const SendFriendChat& SendFriendChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

SendFriendChat* SendFriendChat::default_instance_ = NULL;

SendFriendChat* SendFriendChat::New() const {
  return new SendFriendChat;
}

void SendFriendChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_senderuid()) {
      if (senderuid_ != &::google::protobuf::internal::kEmptyString) {
        senderuid_->clear();
      }
    }
    if (has_receiveruid()) {
      if (receiveruid_ != &::google::protobuf::internal::kEmptyString) {
        receiveruid_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    sendtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFriendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string senderUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderuid().data(), this->senderuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receiverUid;
        break;
      }
      
      // required string receiverUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiveruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiveruid().data(), this->receiveruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // required string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendtime;
        break;
      }
      
      // optional int32 sendtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendFriendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string senderUid = 1;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderuid().data(), this->senderuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->senderuid(), output);
  }
  
  // required string receiverUid = 2;
  if (has_receiveruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiveruid().data(), this->receiveruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->receiveruid(), output);
  }
  
  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional int32 sendtime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sendtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendFriendChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string senderUid = 1;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderuid().data(), this->senderuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->senderuid(), target);
  }
  
  // required string receiverUid = 2;
  if (has_receiveruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiveruid().data(), this->receiveruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiveruid(), target);
  }
  
  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional int32 sendtime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sendtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendFriendChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string senderUid = 1;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderuid());
    }
    
    // required string receiverUid = 2;
    if (has_receiveruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiveruid());
    }
    
    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional int32 sendtime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFriendChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFriendChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFriendChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFriendChat::MergeFrom(const SendFriendChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
    if (from.has_receiveruid()) {
      set_receiveruid(from.receiveruid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFriendChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFriendChat::CopyFrom(const SendFriendChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFriendChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SendFriendChat::Swap(SendFriendChat* other) {
  if (other != this) {
    std::swap(senderuid_, other->senderuid_);
    std::swap(receiveruid_, other->receiveruid_);
    std::swap(text_, other->text_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFriendChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFriendChat_descriptor_;
  metadata.reflection = SendFriendChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineMsgNofity::kChatInfoFieldNumber;
#endif  // !_MSC_VER

OfflineMsgNofity::OfflineMsgNofity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineMsgNofity::InitAsDefaultInstance() {
}

OfflineMsgNofity::OfflineMsgNofity(const OfflineMsgNofity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineMsgNofity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineMsgNofity::~OfflineMsgNofity() {
  SharedDtor();
}

void OfflineMsgNofity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineMsgNofity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMsgNofity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineMsgNofity_descriptor_;
}

const OfflineMsgNofity& OfflineMsgNofity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OfflineMsgNofity* OfflineMsgNofity::default_instance_ = NULL;

OfflineMsgNofity* OfflineMsgNofity::New() const {
  return new OfflineMsgNofity;
}

void OfflineMsgNofity::Clear() {
  chatinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineMsgNofity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.SendFriendChat chatInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chatInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineMsgNofity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.SendFriendChat chatInfo = 1;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineMsgNofity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.SendFriendChat chatInfo = 1;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineMsgNofity::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.SendFriendChat chatInfo = 1;
  total_size += 1 * this->chatinfo_size();
  for (int i = 0; i < this->chatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMsgNofity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineMsgNofity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineMsgNofity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineMsgNofity::MergeFrom(const OfflineMsgNofity& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfo_.MergeFrom(from.chatinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineMsgNofity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMsgNofity::CopyFrom(const OfflineMsgNofity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMsgNofity::IsInitialized() const {
  
  for (int i = 0; i < chatinfo_size(); i++) {
    if (!this->chatinfo(i).IsInitialized()) return false;
  }
  return true;
}

void OfflineMsgNofity::Swap(OfflineMsgNofity* other) {
  if (other != this) {
    chatinfo_.Swap(&other->chatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineMsgNofity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineMsgNofity_descriptor_;
  metadata.reflection = OfflineMsgNofity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendStatusNofify::kUidFieldNumber;
const int FriendStatusNofify::kBOnlineFieldNumber;
#endif  // !_MSC_VER

FriendStatusNofify::FriendStatusNofify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendStatusNofify::InitAsDefaultInstance() {
}

FriendStatusNofify::FriendStatusNofify(const FriendStatusNofify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendStatusNofify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bonline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendStatusNofify::~FriendStatusNofify() {
  SharedDtor();
}

void FriendStatusNofify::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void FriendStatusNofify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendStatusNofify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendStatusNofify_descriptor_;
}

const FriendStatusNofify& FriendStatusNofify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FriendStatusNofify* FriendStatusNofify::default_instance_ = NULL;

FriendStatusNofify* FriendStatusNofify::New() const {
  return new FriendStatusNofify;
}

void FriendStatusNofify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    bonline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendStatusNofify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bOnline;
        break;
      }
      
      // required bool bOnline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bonline_)));
          set_has_bonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendStatusNofify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // required bool bOnline = 2;
  if (has_bonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bonline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendStatusNofify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // required bool bOnline = 2;
  if (has_bonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bonline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendStatusNofify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // required bool bOnline = 2;
    if (has_bonline()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendStatusNofify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendStatusNofify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendStatusNofify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendStatusNofify::MergeFrom(const FriendStatusNofify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_bonline()) {
      set_bonline(from.bonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendStatusNofify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendStatusNofify::CopyFrom(const FriendStatusNofify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendStatusNofify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FriendStatusNofify::Swap(FriendStatusNofify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(bonline_, other->bonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendStatusNofify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendStatusNofify_descriptor_;
  metadata.reflection = FriendStatusNofify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorCodeNofify::kCodeFieldNumber;
#endif  // !_MSC_VER

ErrorCodeNofify::ErrorCodeNofify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorCodeNofify::InitAsDefaultInstance() {
}

ErrorCodeNofify::ErrorCodeNofify(const ErrorCodeNofify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCodeNofify::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCodeNofify::~ErrorCodeNofify() {
  SharedDtor();
}

void ErrorCodeNofify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorCodeNofify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorCodeNofify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCodeNofify_descriptor_;
}

const ErrorCodeNofify& ErrorCodeNofify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ErrorCodeNofify* ErrorCodeNofify::default_instance_ = NULL;

ErrorCodeNofify* ErrorCodeNofify::New() const {
  return new ErrorCodeNofify;
}

void ErrorCodeNofify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorCodeNofify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorCodeNofify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorCodeNofify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorCodeNofify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCodeNofify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorCodeNofify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorCodeNofify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorCodeNofify::MergeFrom(const ErrorCodeNofify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorCodeNofify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorCodeNofify::CopyFrom(const ErrorCodeNofify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCodeNofify::IsInitialized() const {
  
  return true;
}

void ErrorCodeNofify::Swap(ErrorCodeNofify* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorCodeNofify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorCodeNofify_descriptor_;
  metadata.reflection = ErrorCodeNofify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskFinishNofity::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TaskFinishNofity::TaskFinishNofity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskFinishNofity::InitAsDefaultInstance() {
}

TaskFinishNofity::TaskFinishNofity(const TaskFinishNofity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskFinishNofity::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskFinishNofity::~TaskFinishNofity() {
  SharedDtor();
}

void TaskFinishNofity::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void TaskFinishNofity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskFinishNofity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskFinishNofity_descriptor_;
}

const TaskFinishNofity& TaskFinishNofity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

TaskFinishNofity* TaskFinishNofity::default_instance_ = NULL;

TaskFinishNofity* TaskFinishNofity::New() const {
  return new TaskFinishNofity;
}

void TaskFinishNofity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskFinishNofity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskFinishNofity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskFinishNofity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskFinishNofity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskFinishNofity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskFinishNofity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskFinishNofity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskFinishNofity::MergeFrom(const TaskFinishNofity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskFinishNofity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskFinishNofity::CopyFrom(const TaskFinishNofity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskFinishNofity::IsInitialized() const {
  
  return true;
}

void TaskFinishNofity::Swap(TaskFinishNofity* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskFinishNofity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskFinishNofity_descriptor_;
  metadata.reflection = TaskFinishNofity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTaskShare::kBShare2FriendFieldNumber;
#endif  // !_MSC_VER

ReqTaskShare::ReqTaskShare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTaskShare::InitAsDefaultInstance() {
}

ReqTaskShare::ReqTaskShare(const ReqTaskShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTaskShare::SharedCtor() {
  _cached_size_ = 0;
  bshare2friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTaskShare::~ReqTaskShare() {
  SharedDtor();
}

void ReqTaskShare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTaskShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTaskShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTaskShare_descriptor_;
}

const ReqTaskShare& ReqTaskShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqTaskShare* ReqTaskShare::default_instance_ = NULL;

ReqTaskShare* ReqTaskShare::New() const {
  return new ReqTaskShare;
}

void ReqTaskShare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bshare2friend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTaskShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bShare2Friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshare2friend_)));
          set_has_bshare2friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTaskShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bShare2Friend = 1;
  if (has_bshare2friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bshare2friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTaskShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bShare2Friend = 1;
  if (has_bshare2friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bshare2friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTaskShare::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bShare2Friend = 1;
    if (has_bshare2friend()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTaskShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTaskShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTaskShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTaskShare::MergeFrom(const ReqTaskShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bshare2friend()) {
      set_bshare2friend(from.bshare2friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTaskShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTaskShare::CopyFrom(const ReqTaskShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTaskShare::IsInitialized() const {
  
  return true;
}

void ReqTaskShare::Swap(ReqTaskShare* other) {
  if (other != this) {
    std::swap(bshare2friend_, other->bshare2friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTaskShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTaskShare_descriptor_;
  metadata.reflection = ReqTaskShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRankList::kRankTypeFieldNumber;
#endif  // !_MSC_VER

ReqRankList::ReqRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRankList::InitAsDefaultInstance() {
}

ReqRankList::ReqRankList(const ReqRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRankList::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRankList::~ReqRankList() {
  SharedDtor();
}

void ReqRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRankList_descriptor_;
}

const ReqRankList& ReqRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ReqRankList* ReqRankList::default_instance_ = NULL;

ReqRankList* ReqRankList::New() const {
  return new ReqRankList;
}

void ReqRankList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRankList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRankList::MergeFrom(const ReqRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRankList::CopyFrom(const ReqRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqRankList::Swap(ReqRankList* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRankList_descriptor_;
  metadata.reflection = ReqRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kUidFieldNumber;
const int RankInfo::kRoleIdFieldNumber;
const int RankInfo::kSexFieldNumber;
const int RankInfo::kNameFieldNumber;
const int RankInfo::kLevelFieldNumber;
const int RankInfo::kExpFieldNumber;
const int RankInfo::kBVipFieldNumber;
const int RankInfo::kCoinFieldNumber;
const int RankInfo::kGemFieldNumber;
const int RankInfo::kHeaderUrlFieldNumber;
const int RankInfo::kRankValueFieldNumber;
const int RankInfo::kRankNumFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  sex_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  exp_ = 0;
  bvip_ = false;
  coin_ = 0;
  gem_ = 0;
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rankvalue_ = GOOGLE_LONGLONG(0);
  ranknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    roleid_ = 0;
    sex_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    exp_ = 0;
    bvip_ = false;
    coin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gem_ = 0;
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
    rankvalue_ = GOOGLE_LONGLONG(0);
    ranknum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }
      
      // required int32 roleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bVip;
        break;
      }
      
      // required bool bVip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }
      
      // required int32 coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gem;
        break;
      }
      
      // required int32 gem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_headerUrl;
        break;
      }
      
      // required string headerUrl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rankValue;
        break;
      }
      
      // required int64 rankValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rankvalue_)));
          set_has_rankvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rankNum;
        break;
      }
      
      // optional int32 rankNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranknum_)));
          set_has_ranknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // required int32 roleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }
  
  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // required int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }
  
  // required bool bVip = 7;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bvip(), output);
  }
  
  // required int32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coin(), output);
  }
  
  // required int32 gem = 9;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gem(), output);
  }
  
  // required string headerUrl = 10;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->headerurl(), output);
  }
  
  // required int64 rankValue = 11;
  if (has_rankvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->rankvalue(), output);
  }
  
  // optional int32 rankNum = 12;
  if (has_ranknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ranknum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // required int32 roleId = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }
  
  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // required int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }
  
  // required bool bVip = 7;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bvip(), target);
  }
  
  // required int32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coin(), target);
  }
  
  // required int32 gem = 9;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gem(), target);
  }
  
  // required string headerUrl = 10;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->headerurl(), target);
  }
  
  // required int64 rankValue = 11;
  if (has_rankvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->rankvalue(), target);
  }
  
  // optional int32 rankNum = 12;
  if (has_ranknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ranknum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // required int32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required bool bVip = 7;
    if (has_bvip()) {
      total_size += 1 + 1;
    }
    
    // required int32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gem = 9;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }
    
    // required string headerUrl = 10;
    if (has_headerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
    // required int64 rankValue = 11;
    if (has_rankvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rankvalue());
    }
    
    // optional int32 rankNum = 12;
    if (has_ranknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranknum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
    if (from.has_rankvalue()) {
      set_rankvalue(from.rankvalue());
    }
    if (from.has_ranknum()) {
      set_ranknum(from.ranknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(roleid_, other->roleid_);
    std::swap(sex_, other->sex_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(bvip_, other->bvip_);
    std::swap(coin_, other->coin_);
    std::swap(gem_, other->gem_);
    std::swap(headerurl_, other->headerurl_);
    std::swap(rankvalue_, other->rankvalue_);
    std::swap(ranknum_, other->ranknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankList::kRankListFieldNumber;
const int RankList::kRankTypeFieldNumber;
#endif  // !_MSC_VER

RankList::RankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankList::InitAsDefaultInstance() {
}

RankList::RankList(const RankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankList::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankList::~RankList() {
  SharedDtor();
}

void RankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankList_descriptor_;
}

const RankList& RankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RankList* RankList::default_instance_ = NULL;

RankList* RankList::New() const {
  return new RankList;
}

void RankList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ranktype_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.RankInfo rankList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankList;
        if (input->ExpectTag(16)) goto parse_rankType;
        break;
      }
      
      // required int32 rankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.RankInfo rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklist(i), output);
  }
  
  // required int32 rankType = 2;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.RankInfo rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklist(i), target);
  }
  
  // required int32 rankType = 2;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 rankType = 2;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }
    
  }
  // repeated .rpc.RankInfo rankList = 1;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankList::MergeFrom(const RankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankList::CopyFrom(const RankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void RankList::Swap(RankList* other) {
  if (other != this) {
    ranklist_.Swap(&other->ranklist_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankList_descriptor_;
  metadata.reflection = RankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatedMsg::kCodeFieldNumber;
const int FormatedMsg::kArgsFieldNumber;
#endif  // !_MSC_VER

FormatedMsg::FormatedMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormatedMsg::InitAsDefaultInstance() {
}

FormatedMsg::FormatedMsg(const FormatedMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormatedMsg::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatedMsg::~FormatedMsg() {
  SharedDtor();
}

void FormatedMsg::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void FormatedMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatedMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatedMsg_descriptor_;
}

const FormatedMsg& FormatedMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FormatedMsg* FormatedMsg::default_instance_ = NULL;

FormatedMsg* FormatedMsg::New() const {
  return new FormatedMsg;
}

void FormatedMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatedMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // repeated .rpc.MsgArg args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatedMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // repeated .rpc.MsgArg args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormatedMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // repeated .rpc.MsgArg args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormatedMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  // repeated .rpc.MsgArg args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatedMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatedMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatedMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatedMsg::MergeFrom(const FormatedMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatedMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatedMsg::CopyFrom(const FormatedMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatedMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FormatedMsg::Swap(FormatedMsg* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormatedMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatedMsg_descriptor_;
  metadata.reflection = FormatedMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg::kCodeFieldNumber;
const int Msg::kTextFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  
  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberMsg::kValueFieldNumber;
#endif  // !_MSC_VER

NumberMsg::NumberMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberMsg::InitAsDefaultInstance() {
}

NumberMsg::NumberMsg(const NumberMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberMsg::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberMsg::~NumberMsg() {
  SharedDtor();
}

void NumberMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumberMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberMsg_descriptor_;
}

const NumberMsg& NumberMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

NumberMsg* NumberMsg::default_instance_ = NULL;

NumberMsg* NumberMsg::New() const {
  return new NumberMsg;
}

void NumberMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberMsg::MergeFrom(const NumberMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberMsg::CopyFrom(const NumberMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberMsg::IsInitialized() const {
  
  return true;
}

void NumberMsg::Swap(NumberMsg* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberMsg_descriptor_;
  metadata.reflection = NumberMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgArg::kSFieldNumber;
const int MsgArg::kIFieldNumber;
#endif  // !_MSC_VER

MsgArg::MsgArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgArg::InitAsDefaultInstance() {
}

MsgArg::MsgArg(const MsgArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgArg::SharedCtor() {
  _cached_size_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgArg::~MsgArg() {
  SharedDtor();
}

void MsgArg::SharedDtor() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void MsgArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgArg_descriptor_;
}

const MsgArg& MsgArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MsgArg* MsgArg::default_instance_ = NULL;

MsgArg* MsgArg::New() const {
  return new MsgArg;
}

void MsgArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::kEmptyString) {
        s_->clear();
      }
    }
    i_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_i;
        break;
      }
      
      // optional int32 i = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(), output);
  }
  
  // optional int32 i = 2;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->s(), target);
  }
  
  // optional int32 i = 2;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgArg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }
    
    // optional int32 i = 2;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgArg::MergeFrom(const MsgArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgArg::CopyFrom(const MsgArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgArg::IsInitialized() const {
  
  return true;
}

void MsgArg::Swap(MsgArg* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(i_, other->i_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgArg_descriptor_;
  metadata.reflection = MsgArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuestBindOk::kSuccessFieldNumber;
#endif  // !_MSC_VER

GuestBindOk::GuestBindOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuestBindOk::InitAsDefaultInstance() {
}

GuestBindOk::GuestBindOk(const GuestBindOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuestBindOk::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuestBindOk::~GuestBindOk() {
  SharedDtor();
}

void GuestBindOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuestBindOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuestBindOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuestBindOk_descriptor_;
}

const GuestBindOk& GuestBindOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

GuestBindOk* GuestBindOk::default_instance_ = NULL;

GuestBindOk* GuestBindOk::New() const {
  return new GuestBindOk;
}

void GuestBindOk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuestBindOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuestBindOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuestBindOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuestBindOk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuestBindOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuestBindOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuestBindOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuestBindOk::MergeFrom(const GuestBindOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuestBindOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuestBindOk::CopyFrom(const GuestBindOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestBindOk::IsInitialized() const {
  
  return true;
}

void GuestBindOk::Swap(GuestBindOk* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuestBindOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuestBindOk_descriptor_;
  metadata.reflection = GuestBindOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kClientTimeFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  clienttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clienttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ClientTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttime_)));
          set_has_clienttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ClientTime = 1;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->clienttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ClientTime = 1;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->clienttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ClientTime = 1;
    if (has_clienttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  
  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(clienttime_, other->clienttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingResult::kServerTimeFieldNumber;
#endif  // !_MSC_VER

PingResult::PingResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingResult::InitAsDefaultInstance() {
}

PingResult::PingResult(const PingResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingResult::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingResult::~PingResult() {
  SharedDtor();
}

void PingResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResult_descriptor_;
}

const PingResult& PingResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PingResult* PingResult::default_instance_ = NULL;

PingResult* PingResult::New() const {
  return new PingResult;
}

void PingResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingResult::MergeFrom(const PingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResult::CopyFrom(const PingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PingResult::Swap(PingResult* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingResult_descriptor_;
  metadata.reflection = PingResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPlayerMsg::kTimeFieldNumber;
#endif  // !_MSC_VER

KickPlayerMsg::KickPlayerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPlayerMsg::InitAsDefaultInstance() {
}

KickPlayerMsg::KickPlayerMsg(const KickPlayerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPlayerMsg::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerMsg::~KickPlayerMsg() {
  SharedDtor();
}

void KickPlayerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPlayerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPlayerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPlayerMsg_descriptor_;
}

const KickPlayerMsg& KickPlayerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

KickPlayerMsg* KickPlayerMsg::default_instance_ = NULL;

KickPlayerMsg* KickPlayerMsg::New() const {
  return new KickPlayerMsg;
}

void KickPlayerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPlayerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPlayerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPlayerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPlayerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPlayerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPlayerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPlayerMsg::MergeFrom(const KickPlayerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPlayerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerMsg::CopyFrom(const KickPlayerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerMsg::IsInitialized() const {
  
  return true;
}

void KickPlayerMsg::Swap(KickPlayerMsg* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPlayerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPlayerMsg_descriptor_;
  metadata.reflection = KickPlayerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SChatP2P::kToPlayerIdFieldNumber;
const int C2SChatP2P::kChatContentFieldNumber;
#endif  // !_MSC_VER

C2SChatP2P::C2SChatP2P()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SChatP2P::InitAsDefaultInstance() {
}

C2SChatP2P::C2SChatP2P(const C2SChatP2P& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SChatP2P::SharedCtor() {
  _cached_size_ = 0;
  toplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SChatP2P::~C2SChatP2P() {
  SharedDtor();
}

void C2SChatP2P::SharedDtor() {
  if (toplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete toplayerid_;
  }
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (this != default_instance_) {
  }
}

void C2SChatP2P::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SChatP2P::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SChatP2P_descriptor_;
}

const C2SChatP2P& C2SChatP2P::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

C2SChatP2P* C2SChatP2P::default_instance_ = NULL;

C2SChatP2P* C2SChatP2P::New() const {
  return new C2SChatP2P;
}

void C2SChatP2P::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toplayerid()) {
      if (toplayerid_ != &::google::protobuf::internal::kEmptyString) {
        toplayerid_->clear();
      }
    }
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SChatP2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ToPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toplayerid().data(), this->toplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChatContent;
        break;
      }
      
      // required string ChatContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SChatP2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ToPlayerId = 1;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toplayerid().data(), this->toplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->toplayerid(), output);
  }
  
  // required string ChatContent = 2;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SChatP2P::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ToPlayerId = 1;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toplayerid().data(), this->toplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->toplayerid(), target);
  }
  
  // required string ChatContent = 2;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SChatP2P::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ToPlayerId = 1;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toplayerid());
    }
    
    // required string ChatContent = 2;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SChatP2P::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SChatP2P* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SChatP2P*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SChatP2P::MergeFrom(const C2SChatP2P& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SChatP2P::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SChatP2P::CopyFrom(const C2SChatP2P& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SChatP2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2SChatP2P::Swap(C2SChatP2P* other) {
  if (other != this) {
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SChatP2P::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SChatP2P_descriptor_;
  metadata.reflection = C2SChatP2P_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SChatAlliance::kChatContentFieldNumber;
const int C2SChatAlliance::kUseIMFieldNumber;
const int C2SChatAlliance::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

C2SChatAlliance::C2SChatAlliance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SChatAlliance::InitAsDefaultInstance() {
}

C2SChatAlliance::C2SChatAlliance(const C2SChatAlliance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SChatAlliance::SharedCtor() {
  _cached_size_ = 0;
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useim_ = false;
  voicetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SChatAlliance::~C2SChatAlliance() {
  SharedDtor();
}

void C2SChatAlliance::SharedDtor() {
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
    delete voicetime_;
  }
  if (this != default_instance_) {
  }
}

void C2SChatAlliance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SChatAlliance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SChatAlliance_descriptor_;
}

const C2SChatAlliance& C2SChatAlliance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

C2SChatAlliance* C2SChatAlliance::default_instance_ = NULL;

C2SChatAlliance* C2SChatAlliance::New() const {
  return new C2SChatAlliance;
}

void C2SChatAlliance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
    useim_ = false;
    if (has_voicetime()) {
      if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
        voicetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SChatAlliance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ChatContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useIM;
        break;
      }
      
      // optional bool useIM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useIM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useim_)));
          set_has_useim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voiceTime;
        break;
      }
      
      // optional string voiceTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voicetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voicetime().data(), this->voicetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SChatAlliance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ChatContent = 1;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatcontent(), output);
  }
  
  // optional bool useIM = 2;
  if (has_useim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->useim(), output);
  }
  
  // optional string voiceTime = 3;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->voicetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SChatAlliance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ChatContent = 1;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatcontent(), target);
  }
  
  // optional bool useIM = 2;
  if (has_useim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->useim(), target);
  }
  
  // optional string voiceTime = 3;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voicetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SChatAlliance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ChatContent = 1;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }
    
    // optional bool useIM = 2;
    if (has_useim()) {
      total_size += 1 + 1;
    }
    
    // optional string voiceTime = 3;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voicetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SChatAlliance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SChatAlliance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SChatAlliance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SChatAlliance::MergeFrom(const C2SChatAlliance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
    if (from.has_useim()) {
      set_useim(from.useim());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SChatAlliance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SChatAlliance::CopyFrom(const C2SChatAlliance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SChatAlliance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2SChatAlliance::Swap(C2SChatAlliance* other) {
  if (other != this) {
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(useim_, other->useim_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SChatAlliance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SChatAlliance_descriptor_;
  metadata.reflection = C2SChatAlliance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SChatWorld::kChatContentFieldNumber;
const int C2SChatWorld::kUseIMFieldNumber;
const int C2SChatWorld::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

C2SChatWorld::C2SChatWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SChatWorld::InitAsDefaultInstance() {
}

C2SChatWorld::C2SChatWorld(const C2SChatWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SChatWorld::SharedCtor() {
  _cached_size_ = 0;
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useim_ = false;
  voicetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SChatWorld::~C2SChatWorld() {
  SharedDtor();
}

void C2SChatWorld::SharedDtor() {
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
    delete voicetime_;
  }
  if (this != default_instance_) {
  }
}

void C2SChatWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SChatWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SChatWorld_descriptor_;
}

const C2SChatWorld& C2SChatWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

C2SChatWorld* C2SChatWorld::default_instance_ = NULL;

C2SChatWorld* C2SChatWorld::New() const {
  return new C2SChatWorld;
}

void C2SChatWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
    useim_ = false;
    if (has_voicetime()) {
      if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
        voicetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SChatWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ChatContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useIM;
        break;
      }
      
      // optional bool useIM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useIM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useim_)));
          set_has_useim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voiceTime;
        break;
      }
      
      // optional string voiceTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voicetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voicetime().data(), this->voicetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SChatWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ChatContent = 1;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatcontent(), output);
  }
  
  // optional bool useIM = 2;
  if (has_useim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->useim(), output);
  }
  
  // optional string voiceTime = 3;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->voicetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SChatWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ChatContent = 1;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatcontent(), target);
  }
  
  // optional bool useIM = 2;
  if (has_useim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->useim(), target);
  }
  
  // optional string voiceTime = 3;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voicetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SChatWorld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ChatContent = 1;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }
    
    // optional bool useIM = 2;
    if (has_useim()) {
      total_size += 1 + 1;
    }
    
    // optional string voiceTime = 3;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voicetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SChatWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SChatWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SChatWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SChatWorld::MergeFrom(const C2SChatWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
    if (from.has_useim()) {
      set_useim(from.useim());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SChatWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SChatWorld::CopyFrom(const C2SChatWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SChatWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2SChatWorld::Swap(C2SChatWorld* other) {
  if (other != this) {
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(useim_, other->useim_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SChatWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SChatWorld_descriptor_;
  metadata.reflection = C2SChatWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CChatP2P::kFromPlayerIdFieldNumber;
const int S2CChatP2P::kFromPlayerNameFieldNumber;
const int S2CChatP2P::kFromPlayerLevelFieldNumber;
const int S2CChatP2P::kChatContentFieldNumber;
#endif  // !_MSC_VER

S2CChatP2P::S2CChatP2P()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CChatP2P::InitAsDefaultInstance() {
}

S2CChatP2P::S2CChatP2P(const S2CChatP2P& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CChatP2P::SharedCtor() {
  _cached_size_ = 0;
  fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayerlevel_ = 0;
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CChatP2P::~S2CChatP2P() {
  SharedDtor();
}

void S2CChatP2P::SharedDtor() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayerid_;
  }
  if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayername_;
  }
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (this != default_instance_) {
  }
}

void S2CChatP2P::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CChatP2P::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CChatP2P_descriptor_;
}

const S2CChatP2P& S2CChatP2P::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

S2CChatP2P* S2CChatP2P::default_instance_ = NULL;

S2CChatP2P* S2CChatP2P::New() const {
  return new S2CChatP2P;
}

void S2CChatP2P::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromplayerid()) {
      if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
        fromplayerid_->clear();
      }
    }
    if (has_fromplayername()) {
      if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
        fromplayername_->clear();
      }
    }
    fromplayerlevel_ = 0;
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CChatP2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FromPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayerid().data(), this->fromplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FromPlayerName;
        break;
      }
      
      // required string FromPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FromPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayername().data(), this->fromplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FromPlayerLevel;
        break;
      }
      
      // required int32 FromPlayerLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromPlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromplayerlevel_)));
          set_has_fromplayerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ChatContent;
        break;
      }
      
      // required string ChatContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CChatP2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FromPlayerId = 1;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromplayerid(), output);
  }
  
  // required string FromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromplayername(), output);
  }
  
  // required int32 FromPlayerLevel = 3;
  if (has_fromplayerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fromplayerlevel(), output);
  }
  
  // required string ChatContent = 4;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chatcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CChatP2P::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FromPlayerId = 1;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromplayerid(), target);
  }
  
  // required string FromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromplayername(), target);
  }
  
  // required int32 FromPlayerLevel = 3;
  if (has_fromplayerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fromplayerlevel(), target);
  }
  
  // required string ChatContent = 4;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chatcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CChatP2P::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FromPlayerId = 1;
    if (has_fromplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayerid());
    }
    
    // required string FromPlayerName = 2;
    if (has_fromplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayername());
    }
    
    // required int32 FromPlayerLevel = 3;
    if (has_fromplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromplayerlevel());
    }
    
    // required string ChatContent = 4;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CChatP2P::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CChatP2P* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CChatP2P*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CChatP2P::MergeFrom(const S2CChatP2P& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromplayerid()) {
      set_fromplayerid(from.fromplayerid());
    }
    if (from.has_fromplayername()) {
      set_fromplayername(from.fromplayername());
    }
    if (from.has_fromplayerlevel()) {
      set_fromplayerlevel(from.fromplayerlevel());
    }
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CChatP2P::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CChatP2P::CopyFrom(const S2CChatP2P& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CChatP2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void S2CChatP2P::Swap(S2CChatP2P* other) {
  if (other != this) {
    std::swap(fromplayerid_, other->fromplayerid_);
    std::swap(fromplayername_, other->fromplayername_);
    std::swap(fromplayerlevel_, other->fromplayerlevel_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CChatP2P::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CChatP2P_descriptor_;
  metadata.reflection = S2CChatP2P_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CChatWorld::kFromPlayerIdFieldNumber;
const int S2CChatWorld::kFromPlayerNameFieldNumber;
const int S2CChatWorld::kFromPlayerLevelFieldNumber;
const int S2CChatWorld::kChatTimeFieldNumber;
const int S2CChatWorld::kChatContentFieldNumber;
const int S2CChatWorld::kUseIMFieldNumber;
const int S2CChatWorld::kVoiceTimeFieldNumber;
const int S2CChatWorld::kMessageIdFieldNumber;
#endif  // !_MSC_VER

S2CChatWorld::S2CChatWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CChatWorld::InitAsDefaultInstance() {
}

S2CChatWorld::S2CChatWorld(const S2CChatWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CChatWorld::SharedCtor() {
  _cached_size_ = 0;
  fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayerlevel_ = 0;
  chattime_ = GOOGLE_LONGLONG(0);
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useim_ = false;
  voicetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CChatWorld::~S2CChatWorld() {
  SharedDtor();
}

void S2CChatWorld::SharedDtor() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayerid_;
  }
  if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayername_;
  }
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
    delete voicetime_;
  }
  if (this != default_instance_) {
  }
}

void S2CChatWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CChatWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CChatWorld_descriptor_;
}

const S2CChatWorld& S2CChatWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

S2CChatWorld* S2CChatWorld::default_instance_ = NULL;

S2CChatWorld* S2CChatWorld::New() const {
  return new S2CChatWorld;
}

void S2CChatWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromplayerid()) {
      if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
        fromplayerid_->clear();
      }
    }
    if (has_fromplayername()) {
      if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
        fromplayername_->clear();
      }
    }
    fromplayerlevel_ = 0;
    chattime_ = GOOGLE_LONGLONG(0);
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
    useim_ = false;
    if (has_voicetime()) {
      if (voicetime_ != &::google::protobuf::internal::kEmptyString) {
        voicetime_->clear();
      }
    }
    messageid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CChatWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FromPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayerid().data(), this->fromplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FromPlayerName;
        break;
      }
      
      // required string FromPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FromPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayername().data(), this->fromplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FromPlayerLevel;
        break;
      }
      
      // required int32 FromPlayerLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromPlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromplayerlevel_)));
          set_has_fromplayerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ChatTime;
        break;
      }
      
      // required int64 ChatTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chattime_)));
          set_has_chattime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChatContent;
        break;
      }
      
      // required string ChatContent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_useIM;
        break;
      }
      
      // optional bool useIM = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useIM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useim_)));
          set_has_useim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_voiceTime;
        break;
      }
      
      // optional string voiceTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voicetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voicetime().data(), this->voicetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_messageId;
        break;
      }
      
      // optional int32 messageId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CChatWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FromPlayerId = 1;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromplayerid(), output);
  }
  
  // required string FromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromplayername(), output);
  }
  
  // required int32 FromPlayerLevel = 3;
  if (has_fromplayerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fromplayerlevel(), output);
  }
  
  // required int64 ChatTime = 6;
  if (has_chattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->chattime(), output);
  }
  
  // required string ChatContent = 7;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chatcontent(), output);
  }
  
  // optional bool useIM = 10;
  if (has_useim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->useim(), output);
  }
  
  // optional string voiceTime = 11;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->voicetime(), output);
  }
  
  // optional int32 messageId = 12;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->messageid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CChatWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FromPlayerId = 1;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromplayerid(), target);
  }
  
  // required string FromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromplayername(), target);
  }
  
  // required int32 FromPlayerLevel = 3;
  if (has_fromplayerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fromplayerlevel(), target);
  }
  
  // required int64 ChatTime = 6;
  if (has_chattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->chattime(), target);
  }
  
  // required string ChatContent = 7;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chatcontent(), target);
  }
  
  // optional bool useIM = 10;
  if (has_useim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->useim(), target);
  }
  
  // optional string voiceTime = 11;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voicetime().data(), this->voicetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->voicetime(), target);
  }
  
  // optional int32 messageId = 12;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->messageid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CChatWorld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FromPlayerId = 1;
    if (has_fromplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayerid());
    }
    
    // required string FromPlayerName = 2;
    if (has_fromplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayername());
    }
    
    // required int32 FromPlayerLevel = 3;
    if (has_fromplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromplayerlevel());
    }
    
    // required int64 ChatTime = 6;
    if (has_chattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chattime());
    }
    
    // required string ChatContent = 7;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }
    
    // optional bool useIM = 10;
    if (has_useim()) {
      total_size += 1 + 1;
    }
    
    // optional string voiceTime = 11;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voicetime());
    }
    
    // optional int32 messageId = 12;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CChatWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CChatWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CChatWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CChatWorld::MergeFrom(const S2CChatWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromplayerid()) {
      set_fromplayerid(from.fromplayerid());
    }
    if (from.has_fromplayername()) {
      set_fromplayername(from.fromplayername());
    }
    if (from.has_fromplayerlevel()) {
      set_fromplayerlevel(from.fromplayerlevel());
    }
    if (from.has_chattime()) {
      set_chattime(from.chattime());
    }
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
    if (from.has_useim()) {
      set_useim(from.useim());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CChatWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CChatWorld::CopyFrom(const S2CChatWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CChatWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void S2CChatWorld::Swap(S2CChatWorld* other) {
  if (other != this) {
    std::swap(fromplayerid_, other->fromplayerid_);
    std::swap(fromplayername_, other->fromplayername_);
    std::swap(fromplayerlevel_, other->fromplayerlevel_);
    std::swap(chattime_, other->chattime_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(useim_, other->useim_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CChatWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CChatWorld_descriptor_;
  metadata.reflection = S2CChatWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Card::kValueFieldNumber;
const int Card::kBBigFieldNumber;
const int Card::kBLockFieldNumber;
const int Card::kBChiFieldNumber;
const int Card::kBHuFieldNumber;
#endif  // !_MSC_VER

Card::Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Card::InitAsDefaultInstance() {
}

Card::Card(const Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Card::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  bbig_ = false;
  block_ = false;
  bchi_ = false;
  bhu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Card::~Card() {
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New() const {
  return new Card;
}

void Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    bbig_ = false;
    block_ = false;
    bchi_ = false;
    bhu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bBig;
        break;
      }
      
      // required bool bBig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bBig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbig_)));
          set_has_bbig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bLock;
        break;
      }
      
      // required bool bLock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bChi;
        break;
      }
      
      // optional bool bChi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bChi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bchi_)));
          set_has_bchi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bHu;
        break;
      }
      
      // optional bool bHu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhu_)));
          set_has_bhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // required bool bBig = 2;
  if (has_bbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bbig(), output);
  }
  
  // required bool bLock = 3;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->block(), output);
  }
  
  // optional bool bChi = 4;
  if (has_bchi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bchi(), output);
  }
  
  // optional bool bHu = 5;
  if (has_bhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bhu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // required bool bBig = 2;
  if (has_bbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bbig(), target);
  }
  
  // required bool bLock = 3;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->block(), target);
  }
  
  // optional bool bChi = 4;
  if (has_bchi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bchi(), target);
  }
  
  // optional bool bHu = 5;
  if (has_bhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bhu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required bool bBig = 2;
    if (has_bbig()) {
      total_size += 1 + 1;
    }
    
    // required bool bLock = 3;
    if (has_block()) {
      total_size += 1 + 1;
    }
    
    // optional bool bChi = 4;
    if (has_bchi()) {
      total_size += 1 + 1;
    }
    
    // optional bool bHu = 5;
    if (has_bhu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_bbig()) {
      set_bbig(from.bbig());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_bchi()) {
      set_bchi(from.bchi());
    }
    if (from.has_bhu()) {
      set_bhu(from.bhu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Card::Swap(Card* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(bbig_, other->bbig_);
    std::swap(block_, other->block_);
    std::swap(bchi_, other->bchi_);
    std::swap(bhu_, other->bhu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pattern::kPtypeFieldNumber;
const int Pattern::kCardsFieldNumber;
const int Pattern::kHuFieldNumber;
#endif  // !_MSC_VER

Pattern::Pattern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pattern::InitAsDefaultInstance() {
}

Pattern::Pattern(const Pattern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pattern::SharedCtor() {
  _cached_size_ = 0;
  ptype_ = 0;
  hu_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pattern::~Pattern() {
  SharedDtor();
}

void Pattern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pattern_descriptor_;
}

const Pattern& Pattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Pattern* Pattern::default_instance_ = NULL;

Pattern* Pattern::New() const {
  return new Pattern;
}

void Pattern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptype_ = 0;
    hu_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // repeated .rpc.Card cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_hu;
        break;
      }
      
      // optional int32 hu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_)));
          set_has_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ptype = 1;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ptype(), output);
  }
  
  // repeated .rpc.Card cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(i), output);
  }
  
  // optional int32 hu = 3;
  if (has_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pattern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ptype = 1;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ptype(), target);
  }
  
  // repeated .rpc.Card cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(i), target);
  }
  
  // optional int32 hu = 3;
  if (has_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pattern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ptype = 1;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptype());
    }
    
    // optional int32 hu = 3;
    if (has_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu());
    }
    
  }
  // repeated .rpc.Card cards = 2;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pattern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pattern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pattern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pattern::MergeFrom(const Pattern& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_hu()) {
      set_hu(from.hu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pattern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pattern::CopyFrom(const Pattern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern::IsInitialized() const {
  
  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void Pattern::Swap(Pattern* other) {
  if (other != this) {
    std::swap(ptype_, other->ptype_);
    cards_.Swap(&other->cards_);
    std::swap(hu_, other->hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pattern_descriptor_;
  metadata.reflection = Pattern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kPlayeIDFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kCoinsFieldNumber;
const int UserInfo::kBVipFieldNumber;
const int UserInfo::kHeadFieldNumber;
const int UserInfo::kSexFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  playeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coins_ = 0;
  bvip_ = false;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (playeid_ != &::google::protobuf::internal::kEmptyString) {
    delete playeid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playeid()) {
      if (playeid_ != &::google::protobuf::internal::kEmptyString) {
        playeid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    coins_ = 0;
    bvip_ = false;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playeid().data(), this->playeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coins;
        break;
      }
      
      // required int32 coins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bVip;
        break;
      }
      
      // optional bool bVip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }
      
      // required string head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playeID = 1;
  if (has_playeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeid().data(), this->playeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playeid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 coins = 3;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coins(), output);
  }
  
  // optional bool bVip = 4;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bvip(), output);
  }
  
  // required string head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->head(), output);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playeID = 1;
  if (has_playeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playeid().data(), this->playeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playeid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 coins = 3;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coins(), target);
  }
  
  // optional bool bVip = 4;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bvip(), target);
  }
  
  // required string head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->head(), target);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playeID = 1;
    if (has_playeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playeid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 coins = 3;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }
    
    // optional bool bVip = 4;
    if (has_bvip()) {
      total_size += 1 + 1;
    }
    
    // required string head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeid()) {
      set_playeid(from.playeid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(playeid_, other->playeid_);
    std::swap(name_, other->name_);
    std::swap(coins_, other->coins_);
    std::swap(bvip_, other->bvip_);
    std::swap(head_, other->head_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomREQ::kGameTypeFieldNumber;
const int EnterRoomREQ::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

EnterRoomREQ::EnterRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoomREQ::InitAsDefaultInstance() {
}

EnterRoomREQ::EnterRoomREQ(const EnterRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomREQ::~EnterRoomREQ() {
  SharedDtor();
}

void EnterRoomREQ::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (this != default_instance_) {
  }
}

void EnterRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomREQ_descriptor_;
}

const EnterRoomREQ& EnterRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnterRoomREQ* EnterRoomREQ::default_instance_ = NULL;

EnterRoomREQ* EnterRoomREQ::New() const {
  return new EnterRoomREQ;
}

void EnterRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomType;
        break;
      }
      
      // required int32 roomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gametype(), output);
  }
  
  // required int32 roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gametype(), target);
  }
  
  // required int32 roomType = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameType = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // required int32 roomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomREQ::MergeFrom(const EnterRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomREQ::CopyFrom(const EnterRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EnterRoomREQ::Swap(EnterRoomREQ* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomREQ_descriptor_;
  metadata.reflection = EnterRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuickEnterRoomREQ::QuickEnterRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickEnterRoomREQ::InitAsDefaultInstance() {
}

QuickEnterRoomREQ::QuickEnterRoomREQ(const QuickEnterRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickEnterRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickEnterRoomREQ::~QuickEnterRoomREQ() {
  SharedDtor();
}

void QuickEnterRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickEnterRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickEnterRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickEnterRoomREQ_descriptor_;
}

const QuickEnterRoomREQ& QuickEnterRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

QuickEnterRoomREQ* QuickEnterRoomREQ::default_instance_ = NULL;

QuickEnterRoomREQ* QuickEnterRoomREQ::New() const {
  return new QuickEnterRoomREQ;
}

void QuickEnterRoomREQ::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickEnterRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuickEnterRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickEnterRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickEnterRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickEnterRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickEnterRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickEnterRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickEnterRoomREQ::MergeFrom(const QuickEnterRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickEnterRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickEnterRoomREQ::CopyFrom(const QuickEnterRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickEnterRoomREQ::IsInitialized() const {
  
  return true;
}

void QuickEnterRoomREQ::Swap(QuickEnterRoomREQ* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickEnterRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickEnterRoomREQ_descriptor_;
  metadata.reflection = QuickEnterRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomACK::kPlayerInfoFieldNumber;
const int EnterRoomACK::kShangjiaTypeFieldNumber;
const int EnterRoomACK::kBReadyFieldNumber;
const int EnterRoomACK::kCodeFieldNumber;
const int EnterRoomACK::kRoomIdFieldNumber;
const int EnterRoomACK::kIsNormalReqEnterRoomFieldNumber;
#endif  // !_MSC_VER

EnterRoomACK::EnterRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoomACK::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::rpc::PlayerBaseInfo*>(&::rpc::PlayerBaseInfo::default_instance());
}

EnterRoomACK::EnterRoomACK(const EnterRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  shangjiatype_ = 0;
  bready_ = false;
  code_ = 0;
  roomid_ = 0;
  isnormalreqenterroom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomACK::~EnterRoomACK() {
  SharedDtor();
}

void EnterRoomACK::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void EnterRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomACK_descriptor_;
}

const EnterRoomACK& EnterRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnterRoomACK* EnterRoomACK::default_instance_ = NULL;

EnterRoomACK* EnterRoomACK::New() const {
  return new EnterRoomACK;
}

void EnterRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::rpc::PlayerBaseInfo::Clear();
    }
    shangjiatype_ = 0;
    bready_ = false;
    code_ = 0;
    roomid_ = 0;
    isnormalreqenterroom_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.PlayerBaseInfo playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shangjiaType;
        break;
      }
      
      // optional int32 shangjiaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangjiaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shangjiatype_)));
          set_has_shangjiatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bReady;
        break;
      }
      
      // optional bool bReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bready_)));
          set_has_bready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }
      
      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomId;
        break;
      }
      
      // optional int32 roomId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isNormalReqEnterRoom;
        break;
      }
      
      // optional bool isNormalReqEnterRoom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNormalReqEnterRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnormalreqenterroom_)));
          set_has_isnormalreqenterroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }
  
  // optional int32 shangjiaType = 2;
  if (has_shangjiatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shangjiatype(), output);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bready(), output);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }
  
  // optional bool isNormalReqEnterRoom = 6;
  if (has_isnormalreqenterroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnormalreqenterroom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }
  
  // optional int32 shangjiaType = 2;
  if (has_shangjiatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shangjiatype(), target);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bready(), target);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }
  
  // optional bool isNormalReqEnterRoom = 6;
  if (has_isnormalreqenterroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnormalreqenterroom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.PlayerBaseInfo playerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }
    
    // optional int32 shangjiaType = 2;
    if (has_shangjiatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shangjiatype());
    }
    
    // optional bool bReady = 3;
    if (has_bready()) {
      total_size += 1 + 1;
    }
    
    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional int32 roomId = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional bool isNormalReqEnterRoom = 6;
    if (has_isnormalreqenterroom()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomACK::MergeFrom(const EnterRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::rpc::PlayerBaseInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_shangjiatype()) {
      set_shangjiatype(from.shangjiatype());
    }
    if (from.has_bready()) {
      set_bready(from.bready());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isnormalreqenterroom()) {
      set_isnormalreqenterroom(from.isnormalreqenterroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomACK::CopyFrom(const EnterRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomACK::IsInitialized() const {
  
  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void EnterRoomACK::Swap(EnterRoomACK* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(shangjiatype_, other->shangjiatype_);
    std::swap(bready_, other->bready_);
    std::swap(code_, other->code_);
    std::swap(roomid_, other->roomid_);
    std::swap(isnormalreqenterroom_, other->isnormalreqenterroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomACK_descriptor_;
  metadata.reflection = EnterRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomREQ::kPlayerIDFieldNumber;
const int LeaveRoomREQ::kIsChangeDeskFieldNumber;
#endif  // !_MSC_VER

LeaveRoomREQ::LeaveRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveRoomREQ::InitAsDefaultInstance() {
}

LeaveRoomREQ::LeaveRoomREQ(const LeaveRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ischangedesk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomREQ::~LeaveRoomREQ() {
  SharedDtor();
}

void LeaveRoomREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void LeaveRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoomREQ_descriptor_;
}

const LeaveRoomREQ& LeaveRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LeaveRoomREQ* LeaveRoomREQ::default_instance_ = NULL;

LeaveRoomREQ* LeaveRoomREQ::New() const {
  return new LeaveRoomREQ;
}

void LeaveRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    ischangedesk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isChangeDesk;
        break;
      }
      
      // required bool isChangeDesk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeDesk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedesk_)));
          set_has_ischangedesk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischangedesk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ischangedesk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isChangeDesk = 2;
    if (has_ischangedesk()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveRoomREQ::MergeFrom(const LeaveRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ischangedesk()) {
      set_ischangedesk(from.ischangedesk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomREQ::CopyFrom(const LeaveRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LeaveRoomREQ::Swap(LeaveRoomREQ* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ischangedesk_, other->ischangedesk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoomREQ_descriptor_;
  metadata.reflection = LeaveRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomACK::kPlayerIDFieldNumber;
const int LeaveRoomACK::kIsChangeDeskFieldNumber;
#endif  // !_MSC_VER

LeaveRoomACK::LeaveRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveRoomACK::InitAsDefaultInstance() {
}

LeaveRoomACK::LeaveRoomACK(const LeaveRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ischangedesk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomACK::~LeaveRoomACK() {
  SharedDtor();
}

void LeaveRoomACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void LeaveRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoomACK_descriptor_;
}

const LeaveRoomACK& LeaveRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LeaveRoomACK* LeaveRoomACK::default_instance_ = NULL;

LeaveRoomACK* LeaveRoomACK::New() const {
  return new LeaveRoomACK;
}

void LeaveRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    ischangedesk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isChangeDesk;
        break;
      }
      
      // required bool isChangeDesk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeDesk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedesk_)));
          set_has_ischangedesk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischangedesk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ischangedesk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isChangeDesk = 2;
    if (has_ischangedesk()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveRoomACK::MergeFrom(const LeaveRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ischangedesk()) {
      set_ischangedesk(from.ischangedesk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomACK::CopyFrom(const LeaveRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LeaveRoomACK::Swap(LeaveRoomACK* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ischangedesk_, other->ischangedesk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoomACK_descriptor_;
  metadata.reflection = LeaveRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountDown::kPlayerIDFieldNumber;
const int CountDown::kCurrentCountDownFieldNumber;
#endif  // !_MSC_VER

CountDown::CountDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountDown::InitAsDefaultInstance() {
}

CountDown::CountDown(const CountDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountDown::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentcountdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountDown::~CountDown() {
  SharedDtor();
}

void CountDown::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void CountDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountDown_descriptor_;
}

const CountDown& CountDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CountDown* CountDown::default_instance_ = NULL;

CountDown* CountDown::New() const {
  return new CountDown;
}

void CountDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    currentcountdown_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentCountDown;
        break;
      }
      
      // optional int32 currentCountDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCountDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcountdown_)));
          set_has_currentcountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentcountdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentcountdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 currentCountDown = 2;
    if (has_currentcountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcountdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountDown::MergeFrom(const CountDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_currentcountdown()) {
      set_currentcountdown(from.currentcountdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountDown::CopyFrom(const CountDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CountDown::Swap(CountDown* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(currentcountdown_, other->currentcountdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountDown_descriptor_;
  metadata.reflection = CountDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightPlayerInfo::kPlayerIDFieldNumber;
const int FightPlayerInfo::kHandCardsFieldNumber;
const int FightPlayerInfo::kLongPatternFieldNumber;
const int FightPlayerInfo::kKanPatternFieldNumber;
const int FightPlayerInfo::kErLongTouYiFieldNumber;
const int FightPlayerInfo::kChuGuoCardsFieldNumber;
const int FightPlayerInfo::kChiPengZhaoLongCardsFieldNumber;
const int FightPlayerInfo::kCurrentHuFieldNumber;
const int FightPlayerInfo::kBZhuangFieldNumber;
const int FightPlayerInfo::kBBaoFieldNumber;
const int FightPlayerInfo::kBTuoGuanFieldNumber;
#endif  // !_MSC_VER

FightPlayerInfo::FightPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightPlayerInfo::InitAsDefaultInstance() {
}

FightPlayerInfo::FightPlayerInfo(const FightPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currenthu_ = 0;
  bzhuang_ = false;
  bbao_ = false;
  btuoguan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightPlayerInfo::~FightPlayerInfo() {
  SharedDtor();
}

void FightPlayerInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void FightPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightPlayerInfo_descriptor_;
}

const FightPlayerInfo& FightPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FightPlayerInfo* FightPlayerInfo::default_instance_ = NULL;

FightPlayerInfo* FightPlayerInfo::New() const {
  return new FightPlayerInfo;
}

void FightPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    currenthu_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bzhuang_ = false;
    bbao_ = false;
    btuoguan_ = false;
  }
  handcards_.Clear();
  longpattern_.Clear();
  kanpattern_.Clear();
  erlongtouyi_.Clear();
  chuguocards_.Clear();
  chipengzhaolongcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handCards;
        break;
      }
      
      // repeated .rpc.Card handCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handCards;
        if (input->ExpectTag(26)) goto parse_longPattern;
        break;
      }
      
      // repeated .rpc.Pattern longPattern = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longPattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longpattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_longPattern;
        if (input->ExpectTag(34)) goto parse_kanPattern;
        break;
      }
      
      // repeated .rpc.Pattern kanPattern = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kanPattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kanpattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kanPattern;
        if (input->ExpectTag(42)) goto parse_erLongTouYi;
        break;
      }
      
      // repeated .rpc.Card erLongTouYi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_erLongTouYi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_erlongtouyi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_erLongTouYi;
        if (input->ExpectTag(50)) goto parse_chuGuoCards;
        break;
      }
      
      // repeated .rpc.Card chuGuoCards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chuGuoCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chuguocards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chuGuoCards;
        if (input->ExpectTag(58)) goto parse_chiPengZhaoLongCards;
        break;
      }
      
      // repeated .rpc.Pattern chiPengZhaoLongCards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chiPengZhaoLongCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chipengzhaolongcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chiPengZhaoLongCards;
        if (input->ExpectTag(64)) goto parse_currentHu;
        break;
      }
      
      // optional int32 currentHu = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenthu_)));
          set_has_currenthu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bZhuang;
        break;
      }
      
      // optional bool bZhuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuang_)));
          set_has_bzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bBao;
        break;
      }
      
      // optional bool bBao = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bBao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbao_)));
          set_has_bbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bTuoGuan;
        break;
      }
      
      // optional bool bTuoGuan = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bTuoGuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btuoguan_)));
          set_has_btuoguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // repeated .rpc.Card handCards = 2;
  for (int i = 0; i < this->handcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->handcards(i), output);
  }
  
  // repeated .rpc.Pattern longPattern = 3;
  for (int i = 0; i < this->longpattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->longpattern(i), output);
  }
  
  // repeated .rpc.Pattern kanPattern = 4;
  for (int i = 0; i < this->kanpattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kanpattern(i), output);
  }
  
  // repeated .rpc.Card erLongTouYi = 5;
  for (int i = 0; i < this->erlongtouyi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->erlongtouyi(i), output);
  }
  
  // repeated .rpc.Card chuGuoCards = 6;
  for (int i = 0; i < this->chuguocards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chuguocards(i), output);
  }
  
  // repeated .rpc.Pattern chiPengZhaoLongCards = 7;
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chipengzhaolongcards(i), output);
  }
  
  // optional int32 currentHu = 8;
  if (has_currenthu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currenthu(), output);
  }
  
  // optional bool bZhuang = 9;
  if (has_bzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bzhuang(), output);
  }
  
  // optional bool bBao = 10;
  if (has_bbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbao(), output);
  }
  
  // optional bool bTuoGuan = 11;
  if (has_btuoguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->btuoguan(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // repeated .rpc.Card handCards = 2;
  for (int i = 0; i < this->handcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->handcards(i), target);
  }
  
  // repeated .rpc.Pattern longPattern = 3;
  for (int i = 0; i < this->longpattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->longpattern(i), target);
  }
  
  // repeated .rpc.Pattern kanPattern = 4;
  for (int i = 0; i < this->kanpattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kanpattern(i), target);
  }
  
  // repeated .rpc.Card erLongTouYi = 5;
  for (int i = 0; i < this->erlongtouyi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->erlongtouyi(i), target);
  }
  
  // repeated .rpc.Card chuGuoCards = 6;
  for (int i = 0; i < this->chuguocards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chuguocards(i), target);
  }
  
  // repeated .rpc.Pattern chiPengZhaoLongCards = 7;
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chipengzhaolongcards(i), target);
  }
  
  // optional int32 currentHu = 8;
  if (has_currenthu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currenthu(), target);
  }
  
  // optional bool bZhuang = 9;
  if (has_bzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bzhuang(), target);
  }
  
  // optional bool bBao = 10;
  if (has_bbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbao(), target);
  }
  
  // optional bool bTuoGuan = 11;
  if (has_btuoguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->btuoguan(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 currentHu = 8;
    if (has_currenthu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenthu());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool bZhuang = 9;
    if (has_bzhuang()) {
      total_size += 1 + 1;
    }
    
    // optional bool bBao = 10;
    if (has_bbao()) {
      total_size += 1 + 1;
    }
    
    // optional bool bTuoGuan = 11;
    if (has_btuoguan()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rpc.Card handCards = 2;
  total_size += 1 * this->handcards_size();
  for (int i = 0; i < this->handcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handcards(i));
  }
  
  // repeated .rpc.Pattern longPattern = 3;
  total_size += 1 * this->longpattern_size();
  for (int i = 0; i < this->longpattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->longpattern(i));
  }
  
  // repeated .rpc.Pattern kanPattern = 4;
  total_size += 1 * this->kanpattern_size();
  for (int i = 0; i < this->kanpattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kanpattern(i));
  }
  
  // repeated .rpc.Card erLongTouYi = 5;
  total_size += 1 * this->erlongtouyi_size();
  for (int i = 0; i < this->erlongtouyi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->erlongtouyi(i));
  }
  
  // repeated .rpc.Card chuGuoCards = 6;
  total_size += 1 * this->chuguocards_size();
  for (int i = 0; i < this->chuguocards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chuguocards(i));
  }
  
  // repeated .rpc.Pattern chiPengZhaoLongCards = 7;
  total_size += 1 * this->chipengzhaolongcards_size();
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chipengzhaolongcards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightPlayerInfo::MergeFrom(const FightPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcards_.MergeFrom(from.handcards_);
  longpattern_.MergeFrom(from.longpattern_);
  kanpattern_.MergeFrom(from.kanpattern_);
  erlongtouyi_.MergeFrom(from.erlongtouyi_);
  chuguocards_.MergeFrom(from.chuguocards_);
  chipengzhaolongcards_.MergeFrom(from.chipengzhaolongcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_currenthu()) {
      set_currenthu(from.currenthu());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bzhuang()) {
      set_bzhuang(from.bzhuang());
    }
    if (from.has_bbao()) {
      set_bbao(from.bbao());
    }
    if (from.has_btuoguan()) {
      set_btuoguan(from.btuoguan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightPlayerInfo::CopyFrom(const FightPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < handcards_size(); i++) {
    if (!this->handcards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < longpattern_size(); i++) {
    if (!this->longpattern(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kanpattern_size(); i++) {
    if (!this->kanpattern(i).IsInitialized()) return false;
  }
  for (int i = 0; i < erlongtouyi_size(); i++) {
    if (!this->erlongtouyi(i).IsInitialized()) return false;
  }
  for (int i = 0; i < chuguocards_size(); i++) {
    if (!this->chuguocards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < chipengzhaolongcards_size(); i++) {
    if (!this->chipengzhaolongcards(i).IsInitialized()) return false;
  }
  return true;
}

void FightPlayerInfo::Swap(FightPlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    handcards_.Swap(&other->handcards_);
    longpattern_.Swap(&other->longpattern_);
    kanpattern_.Swap(&other->kanpattern_);
    erlongtouyi_.Swap(&other->erlongtouyi_);
    chuguocards_.Swap(&other->chuguocards_);
    chipengzhaolongcards_.Swap(&other->chipengzhaolongcards_);
    std::swap(currenthu_, other->currenthu_);
    std::swap(bzhuang_, other->bzhuang_);
    std::swap(bbao_, other->bbao_);
    std::swap(btuoguan_, other->btuoguan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightPlayerInfo_descriptor_;
  metadata.reflection = FightPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightCurrentStateInfo::kCurrentDeskCardFieldNumber;
const int FightCurrentStateInfo::kCurrentCountDownInfoFieldNumber;
const int FightCurrentStateInfo::kCurrentDeskCardPlayerIDFieldNumber;
const int FightCurrentStateInfo::kCurrentDeskRemainCardFieldNumber;
const int FightCurrentStateInfo::kBCurrentDeskCardMoFieldNumber;
#endif  // !_MSC_VER

FightCurrentStateInfo::FightCurrentStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightCurrentStateInfo::InitAsDefaultInstance() {
  currentdeskcard_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
}

FightCurrentStateInfo::FightCurrentStateInfo(const FightCurrentStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightCurrentStateInfo::SharedCtor() {
  _cached_size_ = 0;
  currentdeskcard_ = NULL;
  currentdeskcardplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentdeskremaincard_ = 0;
  bcurrentdeskcardmo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightCurrentStateInfo::~FightCurrentStateInfo() {
  SharedDtor();
}

void FightCurrentStateInfo::SharedDtor() {
  if (currentdeskcardplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete currentdeskcardplayerid_;
  }
  if (this != default_instance_) {
    delete currentdeskcard_;
  }
}

void FightCurrentStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCurrentStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightCurrentStateInfo_descriptor_;
}

const FightCurrentStateInfo& FightCurrentStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FightCurrentStateInfo* FightCurrentStateInfo::default_instance_ = NULL;

FightCurrentStateInfo* FightCurrentStateInfo::New() const {
  return new FightCurrentStateInfo;
}

void FightCurrentStateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currentdeskcard()) {
      if (currentdeskcard_ != NULL) currentdeskcard_->::rpc::Card::Clear();
    }
    if (has_currentdeskcardplayerid()) {
      if (currentdeskcardplayerid_ != &::google::protobuf::internal::kEmptyString) {
        currentdeskcardplayerid_->clear();
      }
    }
    currentdeskremaincard_ = 0;
    bcurrentdeskcardmo_ = false;
  }
  currentcountdowninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightCurrentStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.Card currentDeskCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentdeskcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentCountDownInfo;
        break;
      }
      
      // repeated .rpc.CountDown currentCountDownInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentCountDownInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currentcountdowninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentCountDownInfo;
        if (input->ExpectTag(34)) goto parse_currentDeskCardPlayerID;
        break;
      }
      
      // optional string currentDeskCardPlayerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentDeskCardPlayerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentdeskcardplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentdeskcardplayerid().data(), this->currentdeskcardplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentDeskRemainCard;
        break;
      }
      
      // required int32 currentDeskRemainCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentDeskRemainCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdeskremaincard_)));
          set_has_currentdeskremaincard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bCurrentDeskCardMo;
        break;
      }
      
      // optional bool bCurrentDeskCardMo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bCurrentDeskCardMo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcurrentdeskcardmo_)));
          set_has_bcurrentdeskcardmo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightCurrentStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.Card currentDeskCard = 1;
  if (has_currentdeskcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->currentdeskcard(), output);
  }
  
  // repeated .rpc.CountDown currentCountDownInfo = 2;
  for (int i = 0; i < this->currentcountdowninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentcountdowninfo(i), output);
  }
  
  // optional string currentDeskCardPlayerID = 4;
  if (has_currentdeskcardplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentdeskcardplayerid().data(), this->currentdeskcardplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currentdeskcardplayerid(), output);
  }
  
  // required int32 currentDeskRemainCard = 5;
  if (has_currentdeskremaincard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentdeskremaincard(), output);
  }
  
  // optional bool bCurrentDeskCardMo = 6;
  if (has_bcurrentdeskcardmo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bcurrentdeskcardmo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightCurrentStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.Card currentDeskCard = 1;
  if (has_currentdeskcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->currentdeskcard(), target);
  }
  
  // repeated .rpc.CountDown currentCountDownInfo = 2;
  for (int i = 0; i < this->currentcountdowninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentcountdowninfo(i), target);
  }
  
  // optional string currentDeskCardPlayerID = 4;
  if (has_currentdeskcardplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentdeskcardplayerid().data(), this->currentdeskcardplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currentdeskcardplayerid(), target);
  }
  
  // required int32 currentDeskRemainCard = 5;
  if (has_currentdeskremaincard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentdeskremaincard(), target);
  }
  
  // optional bool bCurrentDeskCardMo = 6;
  if (has_bcurrentdeskcardmo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bcurrentdeskcardmo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightCurrentStateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.Card currentDeskCard = 1;
    if (has_currentdeskcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentdeskcard());
    }
    
    // optional string currentDeskCardPlayerID = 4;
    if (has_currentdeskcardplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentdeskcardplayerid());
    }
    
    // required int32 currentDeskRemainCard = 5;
    if (has_currentdeskremaincard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdeskremaincard());
    }
    
    // optional bool bCurrentDeskCardMo = 6;
    if (has_bcurrentdeskcardmo()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rpc.CountDown currentCountDownInfo = 2;
  total_size += 1 * this->currentcountdowninfo_size();
  for (int i = 0; i < this->currentcountdowninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currentcountdowninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCurrentStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightCurrentStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightCurrentStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightCurrentStateInfo::MergeFrom(const FightCurrentStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentcountdowninfo_.MergeFrom(from.currentcountdowninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentdeskcard()) {
      mutable_currentdeskcard()->::rpc::Card::MergeFrom(from.currentdeskcard());
    }
    if (from.has_currentdeskcardplayerid()) {
      set_currentdeskcardplayerid(from.currentdeskcardplayerid());
    }
    if (from.has_currentdeskremaincard()) {
      set_currentdeskremaincard(from.currentdeskremaincard());
    }
    if (from.has_bcurrentdeskcardmo()) {
      set_bcurrentdeskcardmo(from.bcurrentdeskcardmo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightCurrentStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCurrentStateInfo::CopyFrom(const FightCurrentStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCurrentStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  if (has_currentdeskcard()) {
    if (!this->currentdeskcard().IsInitialized()) return false;
  }
  for (int i = 0; i < currentcountdowninfo_size(); i++) {
    if (!this->currentcountdowninfo(i).IsInitialized()) return false;
  }
  return true;
}

void FightCurrentStateInfo::Swap(FightCurrentStateInfo* other) {
  if (other != this) {
    std::swap(currentdeskcard_, other->currentdeskcard_);
    currentcountdowninfo_.Swap(&other->currentcountdowninfo_);
    std::swap(currentdeskcardplayerid_, other->currentdeskcardplayerid_);
    std::swap(currentdeskremaincard_, other->currentdeskremaincard_);
    std::swap(bcurrentdeskcardmo_, other->bcurrentdeskcardmo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightCurrentStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightCurrentStateInfo_descriptor_;
  metadata.reflection = FightCurrentStateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStartACK::kFightPlayersInfoFieldNumber;
const int GameStartACK::kCurrentFightStateFieldNumber;
const int GameStartACK::kFightStateFieldNumber;
#endif  // !_MSC_VER

GameStartACK::GameStartACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStartACK::InitAsDefaultInstance() {
  currentfightstate_ = const_cast< ::rpc::FightCurrentStateInfo*>(&::rpc::FightCurrentStateInfo::default_instance());
}

GameStartACK::GameStartACK(const GameStartACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStartACK::SharedCtor() {
  _cached_size_ = 0;
  currentfightstate_ = NULL;
  fightstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartACK::~GameStartACK() {
  SharedDtor();
}

void GameStartACK::SharedDtor() {
  if (this != default_instance_) {
    delete currentfightstate_;
  }
}

void GameStartACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartACK_descriptor_;
}

const GameStartACK& GameStartACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

GameStartACK* GameStartACK::default_instance_ = NULL;

GameStartACK* GameStartACK::New() const {
  return new GameStartACK;
}

void GameStartACK::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_currentfightstate()) {
      if (currentfightstate_ != NULL) currentfightstate_->::rpc::FightCurrentStateInfo::Clear();
    }
    fightstate_ = 0;
  }
  fightplayersinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.FightPlayerInfo fightPlayersInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightPlayersInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightplayersinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fightPlayersInfo;
        if (input->ExpectTag(18)) goto parse_currentFightState;
        break;
      }
      
      // optional .rpc.FightCurrentStateInfo currentFightState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentFightState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentfightstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fightState;
        break;
      }
      
      // optional int32 fightState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightstate_)));
          set_has_fightstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStartACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.FightPlayerInfo fightPlayersInfo = 1;
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fightplayersinfo(i), output);
  }
  
  // optional .rpc.FightCurrentStateInfo currentFightState = 2;
  if (has_currentfightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentfightstate(), output);
  }
  
  // optional int32 fightState = 5;
  if (has_fightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fightstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStartACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.FightPlayerInfo fightPlayersInfo = 1;
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fightplayersinfo(i), target);
  }
  
  // optional .rpc.FightCurrentStateInfo currentFightState = 2;
  if (has_currentfightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentfightstate(), target);
  }
  
  // optional int32 fightState = 5;
  if (has_fightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fightstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStartACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rpc.FightCurrentStateInfo currentFightState = 2;
    if (has_currentfightstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentfightstate());
    }
    
    // optional int32 fightState = 5;
    if (has_fightstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightstate());
    }
    
  }
  // repeated .rpc.FightPlayerInfo fightPlayersInfo = 1;
  total_size += 1 * this->fightplayersinfo_size();
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightplayersinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartACK::MergeFrom(const GameStartACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightplayersinfo_.MergeFrom(from.fightplayersinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_currentfightstate()) {
      mutable_currentfightstate()->::rpc::FightCurrentStateInfo::MergeFrom(from.currentfightstate());
    }
    if (from.has_fightstate()) {
      set_fightstate(from.fightstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartACK::CopyFrom(const GameStartACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartACK::IsInitialized() const {
  
  for (int i = 0; i < fightplayersinfo_size(); i++) {
    if (!this->fightplayersinfo(i).IsInitialized()) return false;
  }
  if (has_currentfightstate()) {
    if (!this->currentfightstate().IsInitialized()) return false;
  }
  return true;
}

void GameStartACK::Swap(GameStartACK* other) {
  if (other != this) {
    fightplayersinfo_.Swap(&other->fightplayersinfo_);
    std::swap(currentfightstate_, other->currentfightstate_);
    std::swap(fightstate_, other->fightstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartACK_descriptor_;
  metadata.reflection = GameStartACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionREQ::kActionFieldNumber;
const int ActionREQ::kPlayerIDFieldNumber;
const int ActionREQ::kChiCardsFieldNumber;
const int ActionREQ::kBiCardsFieldNumber;
const int ActionREQ::kChuPaiFieldNumber;
const int ActionREQ::kCardArgsFieldNumber;
const int ActionREQ::kSysTypeFieldNumber;
#endif  // !_MSC_VER

ActionREQ::ActionREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionREQ::InitAsDefaultInstance() {
  chicards_ = const_cast< ::rpc::Pattern*>(&::rpc::Pattern::default_instance());
  bicards_ = const_cast< ::rpc::Pattern*>(&::rpc::Pattern::default_instance());
  chupai_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
  cardargs_ = const_cast< ::rpc::MJCard*>(&::rpc::MJCard::default_instance());
}

ActionREQ::ActionREQ(const ActionREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionREQ::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chicards_ = NULL;
  bicards_ = NULL;
  chupai_ = NULL;
  cardargs_ = NULL;
  systype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionREQ::~ActionREQ() {
  SharedDtor();
}

void ActionREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete chicards_;
    delete bicards_;
    delete chupai_;
    delete cardargs_;
  }
}

void ActionREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionREQ_descriptor_;
}

const ActionREQ& ActionREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionREQ* ActionREQ::default_instance_ = NULL;

ActionREQ* ActionREQ::New() const {
  return new ActionREQ;
}

void ActionREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_chicards()) {
      if (chicards_ != NULL) chicards_->::rpc::Pattern::Clear();
    }
    if (has_bicards()) {
      if (bicards_ != NULL) bicards_->::rpc::Pattern::Clear();
    }
    if (has_chupai()) {
      if (chupai_ != NULL) chupai_->::rpc::Card::Clear();
    }
    if (has_cardargs()) {
      if (cardargs_ != NULL) cardargs_->::rpc::MJCard::Clear();
    }
    systype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerID;
        break;
      }
      
      // required string playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chiCards;
        break;
      }
      
      // optional .rpc.Pattern chiCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chiCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chicards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_biCards;
        break;
      }
      
      // optional .rpc.Pattern biCards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_biCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bicards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chuPai;
        break;
      }
      
      // optional .rpc.Card chuPai = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chuPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chupai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sysType;
        break;
      }
      
      // required int32 sysType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systype_)));
          set_has_systype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cardArgs;
        break;
      }
      
      // optional .rpc.MJCard cardArgs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  // required string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playerid(), output);
  }
  
  // optional .rpc.Pattern chiCards = 3;
  if (has_chicards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chicards(), output);
  }
  
  // optional .rpc.Pattern biCards = 4;
  if (has_bicards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bicards(), output);
  }
  
  // optional .rpc.Card chuPai = 5;
  if (has_chupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chupai(), output);
  }
  
  // required int32 sysType = 6;
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->systype(), output);
  }
  
  // optional .rpc.MJCard cardArgs = 10;
  if (has_cardargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cardargs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  // required string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }
  
  // optional .rpc.Pattern chiCards = 3;
  if (has_chicards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chicards(), target);
  }
  
  // optional .rpc.Pattern biCards = 4;
  if (has_bicards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bicards(), target);
  }
  
  // optional .rpc.Card chuPai = 5;
  if (has_chupai()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chupai(), target);
  }
  
  // required int32 sysType = 6;
  if (has_systype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->systype(), target);
  }
  
  // optional .rpc.MJCard cardArgs = 10;
  if (has_cardargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cardargs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // required string playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional .rpc.Pattern chiCards = 3;
    if (has_chicards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chicards());
    }
    
    // optional .rpc.Pattern biCards = 4;
    if (has_bicards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bicards());
    }
    
    // optional .rpc.Card chuPai = 5;
    if (has_chupai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chupai());
    }
    
    // optional .rpc.MJCard cardArgs = 10;
    if (has_cardargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardargs());
    }
    
    // required int32 sysType = 6;
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionREQ::MergeFrom(const ActionREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_chicards()) {
      mutable_chicards()->::rpc::Pattern::MergeFrom(from.chicards());
    }
    if (from.has_bicards()) {
      mutable_bicards()->::rpc::Pattern::MergeFrom(from.bicards());
    }
    if (from.has_chupai()) {
      mutable_chupai()->::rpc::Card::MergeFrom(from.chupai());
    }
    if (from.has_cardargs()) {
      mutable_cardargs()->::rpc::MJCard::MergeFrom(from.cardargs());
    }
    if (from.has_systype()) {
      set_systype(from.systype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionREQ::CopyFrom(const ActionREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;
  
  if (has_chicards()) {
    if (!this->chicards().IsInitialized()) return false;
  }
  if (has_bicards()) {
    if (!this->bicards().IsInitialized()) return false;
  }
  if (has_chupai()) {
    if (!this->chupai().IsInitialized()) return false;
  }
  if (has_cardargs()) {
    if (!this->cardargs().IsInitialized()) return false;
  }
  return true;
}

void ActionREQ::Swap(ActionREQ* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(playerid_, other->playerid_);
    std::swap(chicards_, other->chicards_);
    std::swap(bicards_, other->bicards_);
    std::swap(chupai_, other->chupai_);
    std::swap(cardargs_, other->cardargs_);
    std::swap(systype_, other->systype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionREQ_descriptor_;
  metadata.reflection = ActionREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChiAtionArgs::kCanChiCardsFieldNumber;
const int ChiAtionArgs::kNeedBiCardsFieldNumber;
const int ChiAtionArgs::kCardArgsFieldNumber;
#endif  // !_MSC_VER

ChiAtionArgs::ChiAtionArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChiAtionArgs::InitAsDefaultInstance() {
  canchicards_ = const_cast< ::rpc::Pattern*>(&::rpc::Pattern::default_instance());
  cardargs_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
}

ChiAtionArgs::ChiAtionArgs(const ChiAtionArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChiAtionArgs::SharedCtor() {
  _cached_size_ = 0;
  canchicards_ = NULL;
  cardargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChiAtionArgs::~ChiAtionArgs() {
  SharedDtor();
}

void ChiAtionArgs::SharedDtor() {
  if (this != default_instance_) {
    delete canchicards_;
    delete cardargs_;
  }
}

void ChiAtionArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChiAtionArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChiAtionArgs_descriptor_;
}

const ChiAtionArgs& ChiAtionArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ChiAtionArgs* ChiAtionArgs::default_instance_ = NULL;

ChiAtionArgs* ChiAtionArgs::New() const {
  return new ChiAtionArgs;
}

void ChiAtionArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_canchicards()) {
      if (canchicards_ != NULL) canchicards_->::rpc::Pattern::Clear();
    }
    if (has_cardargs()) {
      if (cardargs_ != NULL) cardargs_->::rpc::Card::Clear();
    }
  }
  needbicards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChiAtionArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.Pattern canChiCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canchicards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_needBiCards;
        break;
      }
      
      // repeated .rpc.Pattern needBiCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needBiCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needbicards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_needBiCards;
        if (input->ExpectTag(26)) goto parse_cardArgs;
        break;
      }
      
      // optional .rpc.Card cardArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChiAtionArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.Pattern canChiCards = 1;
  if (has_canchicards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->canchicards(), output);
  }
  
  // repeated .rpc.Pattern needBiCards = 2;
  for (int i = 0; i < this->needbicards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->needbicards(i), output);
  }
  
  // optional .rpc.Card cardArgs = 3;
  if (has_cardargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardargs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChiAtionArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.Pattern canChiCards = 1;
  if (has_canchicards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->canchicards(), target);
  }
  
  // repeated .rpc.Pattern needBiCards = 2;
  for (int i = 0; i < this->needbicards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->needbicards(i), target);
  }
  
  // optional .rpc.Card cardArgs = 3;
  if (has_cardargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardargs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChiAtionArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.Pattern canChiCards = 1;
    if (has_canchicards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canchicards());
    }
    
    // optional .rpc.Card cardArgs = 3;
    if (has_cardargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardargs());
    }
    
  }
  // repeated .rpc.Pattern needBiCards = 2;
  total_size += 1 * this->needbicards_size();
  for (int i = 0; i < this->needbicards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needbicards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChiAtionArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChiAtionArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChiAtionArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChiAtionArgs::MergeFrom(const ChiAtionArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  needbicards_.MergeFrom(from.needbicards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canchicards()) {
      mutable_canchicards()->::rpc::Pattern::MergeFrom(from.canchicards());
    }
    if (from.has_cardargs()) {
      mutable_cardargs()->::rpc::Card::MergeFrom(from.cardargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChiAtionArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChiAtionArgs::CopyFrom(const ChiAtionArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChiAtionArgs::IsInitialized() const {
  
  if (has_canchicards()) {
    if (!this->canchicards().IsInitialized()) return false;
  }
  for (int i = 0; i < needbicards_size(); i++) {
    if (!this->needbicards(i).IsInitialized()) return false;
  }
  if (has_cardargs()) {
    if (!this->cardargs().IsInitialized()) return false;
  }
  return true;
}

void ChiAtionArgs::Swap(ChiAtionArgs* other) {
  if (other != this) {
    std::swap(canchicards_, other->canchicards_);
    needbicards_.Swap(&other->needbicards_);
    std::swap(cardargs_, other->cardargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChiAtionArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChiAtionArgs_descriptor_;
  metadata.reflection = ChiAtionArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionACK::kActionFieldNumber;
const int ActionACK::kPlayerIDFieldNumber;
const int ActionACK::kCardArgsFieldNumber;
const int ActionACK::kChiPengZhaoLongCardsFieldNumber;
const int ActionACK::kUpdateHuFieldNumber;
const int ActionACK::kCurrenDeskRemianCardFieldNumber;
const int ActionACK::kResultFieldNumber;
#endif  // !_MSC_VER

ActionACK::ActionACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionACK::InitAsDefaultInstance() {
  cardargs_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
}

ActionACK::ActionACK(const ActionACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionACK::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardargs_ = NULL;
  updatehu_ = 0;
  currendeskremiancard_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionACK::~ActionACK() {
  SharedDtor();
}

void ActionACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete cardargs_;
  }
}

void ActionACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionACK_descriptor_;
}

const ActionACK& ActionACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionACK* ActionACK::default_instance_ = NULL;

ActionACK* ActionACK::New() const {
  return new ActionACK;
}

void ActionACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_cardargs()) {
      if (cardargs_ != NULL) cardargs_->::rpc::Card::Clear();
    }
    updatehu_ = 0;
    currendeskremiancard_ = 0;
    result_ = 0;
  }
  chipengzhaolongcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerID;
        break;
      }
      
      // optional string playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardArgs;
        break;
      }
      
      // optional .rpc.Card cardArgs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chiPengZhaoLongCards;
        break;
      }
      
      // repeated .rpc.Pattern chiPengZhaoLongCards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chiPengZhaoLongCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chipengzhaolongcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chiPengZhaoLongCards;
        if (input->ExpectTag(56)) goto parse_updateHu;
        break;
      }
      
      // optional int32 updateHu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatehu_)));
          set_has_updatehu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currenDeskRemianCard;
        break;
      }
      
      // optional int32 currenDeskRemianCard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currenDeskRemianCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currendeskremiancard_)));
          set_has_currendeskremiancard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }
      
      // required int32 result = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  // optional string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playerid(), output);
  }
  
  // optional .rpc.Card cardArgs = 4;
  if (has_cardargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cardargs(), output);
  }
  
  // repeated .rpc.Pattern chiPengZhaoLongCards = 6;
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chipengzhaolongcards(i), output);
  }
  
  // optional int32 updateHu = 7;
  if (has_updatehu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updatehu(), output);
  }
  
  // optional int32 currenDeskRemianCard = 8;
  if (has_currendeskremiancard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currendeskremiancard(), output);
  }
  
  // required int32 result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  // optional string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }
  
  // optional .rpc.Card cardArgs = 4;
  if (has_cardargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cardargs(), target);
  }
  
  // repeated .rpc.Pattern chiPengZhaoLongCards = 6;
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chipengzhaolongcards(i), target);
  }
  
  // optional int32 updateHu = 7;
  if (has_updatehu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updatehu(), target);
  }
  
  // optional int32 currenDeskRemianCard = 8;
  if (has_currendeskremiancard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currendeskremiancard(), target);
  }
  
  // required int32 result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // optional string playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional .rpc.Card cardArgs = 4;
    if (has_cardargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardargs());
    }
    
    // optional int32 updateHu = 7;
    if (has_updatehu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatehu());
    }
    
    // optional int32 currenDeskRemianCard = 8;
    if (has_currendeskremiancard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currendeskremiancard());
    }
    
    // required int32 result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  // repeated .rpc.Pattern chiPengZhaoLongCards = 6;
  total_size += 1 * this->chipengzhaolongcards_size();
  for (int i = 0; i < this->chipengzhaolongcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chipengzhaolongcards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionACK::MergeFrom(const ActionACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  chipengzhaolongcards_.MergeFrom(from.chipengzhaolongcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_cardargs()) {
      mutable_cardargs()->::rpc::Card::MergeFrom(from.cardargs());
    }
    if (from.has_updatehu()) {
      set_updatehu(from.updatehu());
    }
    if (from.has_currendeskremiancard()) {
      set_currendeskremiancard(from.currendeskremiancard());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionACK::CopyFrom(const ActionACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  
  if (has_cardargs()) {
    if (!this->cardargs().IsInitialized()) return false;
  }
  for (int i = 0; i < chipengzhaolongcards_size(); i++) {
    if (!this->chipengzhaolongcards(i).IsInitialized()) return false;
  }
  return true;
}

void ActionACK::Swap(ActionACK* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(playerid_, other->playerid_);
    std::swap(cardargs_, other->cardargs_);
    chipengzhaolongcards_.Swap(&other->chipengzhaolongcards_);
    std::swap(updatehu_, other->updatehu_);
    std::swap(currendeskremiancard_, other->currendeskremiancard_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionACK_descriptor_;
  metadata.reflection = ActionACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionNotifyACK::kActionFieldNumber;
const int ActionNotifyACK::kChiAtionArgsFieldNumber;
#endif  // !_MSC_VER

ActionNotifyACK::ActionNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionNotifyACK::InitAsDefaultInstance() {
}

ActionNotifyACK::ActionNotifyACK(const ActionNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionNotifyACK::~ActionNotifyACK() {
  SharedDtor();
}

void ActionNotifyACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionNotifyACK_descriptor_;
}

const ActionNotifyACK& ActionNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionNotifyACK* ActionNotifyACK::default_instance_ = NULL;

ActionNotifyACK* ActionNotifyACK::New() const {
  return new ActionNotifyACK;
}

void ActionNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  chiationargs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chiAtionArgs;
        break;
      }
      
      // repeated .rpc.ChiAtionArgs chiAtionArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chiAtionArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chiationargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chiAtionArgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  // repeated .rpc.ChiAtionArgs chiAtionArgs = 3;
  for (int i = 0; i < this->chiationargs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chiationargs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  // repeated .rpc.ChiAtionArgs chiAtionArgs = 3;
  for (int i = 0; i < this->chiationargs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chiationargs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
  }
  // repeated .rpc.ChiAtionArgs chiAtionArgs = 3;
  total_size += 1 * this->chiationargs_size();
  for (int i = 0; i < this->chiationargs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chiationargs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionNotifyACK::MergeFrom(const ActionNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  chiationargs_.MergeFrom(from.chiationargs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionNotifyACK::CopyFrom(const ActionNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < chiationargs_size(); i++) {
    if (!this->chiationargs(i).IsInitialized()) return false;
  }
  return true;
}

void ActionNotifyACK::Swap(ActionNotifyACK* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    chiationargs_.Swap(&other->chiationargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionNotifyACK_descriptor_;
  metadata.reflection = ActionNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountdownNotifyACK::kCountDownFieldNumber;
#endif  // !_MSC_VER

CountdownNotifyACK::CountdownNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountdownNotifyACK::InitAsDefaultInstance() {
  countdown_ = const_cast< ::rpc::CountDown*>(&::rpc::CountDown::default_instance());
}

CountdownNotifyACK::CountdownNotifyACK(const CountdownNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountdownNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  countdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountdownNotifyACK::~CountdownNotifyACK() {
  SharedDtor();
}

void CountdownNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete countdown_;
  }
}

void CountdownNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountdownNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountdownNotifyACK_descriptor_;
}

const CountdownNotifyACK& CountdownNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CountdownNotifyACK* CountdownNotifyACK::default_instance_ = NULL;

CountdownNotifyACK* CountdownNotifyACK::New() const {
  return new CountdownNotifyACK;
}

void CountdownNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_countdown()) {
      if (countdown_ != NULL) countdown_->::rpc::CountDown::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountdownNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.CountDown countDown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countdown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountdownNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.CountDown countDown = 1;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountdownNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.CountDown countDown = 1;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountdownNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.CountDown countDown = 1;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->countdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountdownNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountdownNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountdownNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountdownNotifyACK::MergeFrom(const CountdownNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countdown()) {
      mutable_countdown()->::rpc::CountDown::MergeFrom(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountdownNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountdownNotifyACK::CopyFrom(const CountdownNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountdownNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_countdown()) {
    if (!this->countdown().IsInitialized()) return false;
  }
  return true;
}

void CountdownNotifyACK::Swap(CountdownNotifyACK* other) {
  if (other != this) {
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountdownNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountdownNotifyACK_descriptor_;
  metadata.reflection = CountdownNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassCardNotifyACK::kPlayerIDFieldNumber;
const int PassCardNotifyACK::kCardFieldNumber;
#endif  // !_MSC_VER

PassCardNotifyACK::PassCardNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassCardNotifyACK::InitAsDefaultInstance() {
  card_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
}

PassCardNotifyACK::PassCardNotifyACK(const PassCardNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassCardNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassCardNotifyACK::~PassCardNotifyACK() {
  SharedDtor();
}

void PassCardNotifyACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete card_;
  }
}

void PassCardNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassCardNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassCardNotifyACK_descriptor_;
}

const PassCardNotifyACK& PassCardNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PassCardNotifyACK* PassCardNotifyACK::default_instance_ = NULL;

PassCardNotifyACK* PassCardNotifyACK::New() const {
  return new PassCardNotifyACK;
}

void PassCardNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_card()) {
      if (card_ != NULL) card_->::rpc::Card::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassCardNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card;
        break;
      }
      
      // required .rpc.Card card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassCardNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required .rpc.Card card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassCardNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required .rpc.Card card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassCardNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required .rpc.Card card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassCardNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassCardNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassCardNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassCardNotifyACK::MergeFrom(const PassCardNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_card()) {
      mutable_card()->::rpc::Card::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassCardNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassCardNotifyACK::CopyFrom(const PassCardNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassCardNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_card()) {
    if (!this->card().IsInitialized()) return false;
  }
  return true;
}

void PassCardNotifyACK::Swap(PassCardNotifyACK* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassCardNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassCardNotifyACK_descriptor_;
  metadata.reflection = PassCardNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassedNotifyACK::kCardFieldNumber;
#endif  // !_MSC_VER

PassedNotifyACK::PassedNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassedNotifyACK::InitAsDefaultInstance() {
  card_ = const_cast< ::rpc::Card*>(&::rpc::Card::default_instance());
}

PassedNotifyACK::PassedNotifyACK(const PassedNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassedNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassedNotifyACK::~PassedNotifyACK() {
  SharedDtor();
}

void PassedNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete card_;
  }
}

void PassedNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassedNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassedNotifyACK_descriptor_;
}

const PassedNotifyACK& PassedNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PassedNotifyACK* PassedNotifyACK::default_instance_ = NULL;

PassedNotifyACK* PassedNotifyACK::New() const {
  return new PassedNotifyACK;
}

void PassedNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_card()) {
      if (card_ != NULL) card_->::rpc::Card::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassedNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.Card card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassedNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.Card card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassedNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.Card card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassedNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.Card card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassedNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassedNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassedNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassedNotifyACK::MergeFrom(const PassedNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      mutable_card()->::rpc::Card::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassedNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassedNotifyACK::CopyFrom(const PassedNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassedNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_card()) {
    if (!this->card().IsInitialized()) return false;
  }
  return true;
}

void PassedNotifyACK::Swap(PassedNotifyACK* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassedNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassedNotifyACK_descriptor_;
  metadata.reflection = PassedNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MingTang::kMingTangFieldNumber;
const int MingTang::kValueFieldNumber;
#endif  // !_MSC_VER

MingTang::MingTang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MingTang::InitAsDefaultInstance() {
}

MingTang::MingTang(const MingTang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MingTang::SharedCtor() {
  _cached_size_ = 0;
  mingtang_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MingTang::~MingTang() {
  SharedDtor();
}

void MingTang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MingTang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MingTang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MingTang_descriptor_;
}

const MingTang& MingTang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MingTang* MingTang::default_instance_ = NULL;

MingTang* MingTang::New() const {
  return new MingTang;
}

void MingTang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mingtang_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MingTang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mingTang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingtang_)));
          set_has_mingtang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MingTang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mingTang = 1;
  if (has_mingtang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mingtang(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MingTang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mingTang = 1;
  if (has_mingtang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mingtang(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MingTang::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mingTang = 1;
    if (has_mingtang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingtang());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MingTang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MingTang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MingTang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MingTang::MergeFrom(const MingTang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mingtang()) {
      set_mingtang(from.mingtang());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MingTang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MingTang::CopyFrom(const MingTang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MingTang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MingTang::Swap(MingTang* other) {
  if (other != this) {
    std::swap(mingtang_, other->mingtang_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MingTang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MingTang_descriptor_;
  metadata.reflection = MingTang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSuanCoin::kPlayerIDFieldNumber;
const int JieSuanCoin::kCoinFieldNumber;
const int JieSuanCoin::kTagFieldNumber;
#endif  // !_MSC_VER

JieSuanCoin::JieSuanCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSuanCoin::InitAsDefaultInstance() {
}

JieSuanCoin::JieSuanCoin(const JieSuanCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSuanCoin::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coin_ = 0;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSuanCoin::~JieSuanCoin() {
  SharedDtor();
}

void JieSuanCoin::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void JieSuanCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSuanCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSuanCoin_descriptor_;
}

const JieSuanCoin& JieSuanCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSuanCoin* JieSuanCoin::default_instance_ = NULL;

JieSuanCoin* JieSuanCoin::New() const {
  return new JieSuanCoin;
}

void JieSuanCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    coin_ = 0;
    tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSuanCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }
      
      // optional int32 tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSuanCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin(), output);
  }
  
  // optional int32 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSuanCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin(), target);
  }
  
  // optional int32 tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSuanCoin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSuanCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSuanCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSuanCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSuanCoin::MergeFrom(const JieSuanCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSuanCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSuanCoin::CopyFrom(const JieSuanCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSuanCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void JieSuanCoin::Swap(JieSuanCoin* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(coin_, other->coin_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSuanCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSuanCoin_descriptor_;
  metadata.reflection = JieSuanCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaerPlayerJieSuanPattern::kPlayerIDFieldNumber;
const int DaerPlayerJieSuanPattern::kHuFieldNumber;
const int DaerPlayerJieSuanPattern::kScoreFieldNumber;
const int DaerPlayerJieSuanPattern::kPatternsFieldNumber;
const int DaerPlayerJieSuanPattern::kMingTangFieldNumber;
const int DaerPlayerJieSuanPattern::kCoinFieldNumber;
const int DaerPlayerJieSuanPattern::kTagFieldNumber;
#endif  // !_MSC_VER

DaerPlayerJieSuanPattern::DaerPlayerJieSuanPattern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DaerPlayerJieSuanPattern::InitAsDefaultInstance() {
}

DaerPlayerJieSuanPattern::DaerPlayerJieSuanPattern(const DaerPlayerJieSuanPattern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DaerPlayerJieSuanPattern::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hu_ = 0;
  score_ = 0;
  coin_ = 0;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaerPlayerJieSuanPattern::~DaerPlayerJieSuanPattern() {
  SharedDtor();
}

void DaerPlayerJieSuanPattern::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void DaerPlayerJieSuanPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaerPlayerJieSuanPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaerPlayerJieSuanPattern_descriptor_;
}

const DaerPlayerJieSuanPattern& DaerPlayerJieSuanPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

DaerPlayerJieSuanPattern* DaerPlayerJieSuanPattern::default_instance_ = NULL;

DaerPlayerJieSuanPattern* DaerPlayerJieSuanPattern::New() const {
  return new DaerPlayerJieSuanPattern;
}

void DaerPlayerJieSuanPattern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    hu_ = 0;
    score_ = 0;
    coin_ = 0;
    tag_ = 0;
  }
  patterns_.Clear();
  mingtang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaerPlayerJieSuanPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hu;
        break;
      }
      
      // optional int32 hu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_)));
          set_has_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_patterns;
        break;
      }
      
      // repeated .rpc.Pattern patterns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patterns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_patterns;
        if (input->ExpectTag(74)) goto parse_mingTang;
        break;
      }
      
      // repeated .rpc.MingTang mingTang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mingTang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mingtang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mingTang;
        if (input->ExpectTag(88)) goto parse_coin;
        break;
      }
      
      // required int32 coin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tag;
        break;
      }
      
      // required int32 tag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DaerPlayerJieSuanPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 hu = 3;
  if (has_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hu(), output);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // repeated .rpc.Pattern patterns = 7;
  for (int i = 0; i < this->patterns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->patterns(i), output);
  }
  
  // repeated .rpc.MingTang mingTang = 9;
  for (int i = 0; i < this->mingtang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mingtang(i), output);
  }
  
  // required int32 coin = 11;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->coin(), output);
  }
  
  // required int32 tag = 13;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DaerPlayerJieSuanPattern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 hu = 3;
  if (has_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hu(), target);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // repeated .rpc.Pattern patterns = 7;
  for (int i = 0; i < this->patterns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->patterns(i), target);
  }
  
  // repeated .rpc.MingTang mingTang = 9;
  for (int i = 0; i < this->mingtang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mingtang(i), target);
  }
  
  // required int32 coin = 11;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->coin(), target);
  }
  
  // required int32 tag = 13;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DaerPlayerJieSuanPattern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 hu = 3;
    if (has_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu());
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int32 coin = 11;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // required int32 tag = 13;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }
    
  }
  // repeated .rpc.Pattern patterns = 7;
  total_size += 1 * this->patterns_size();
  for (int i = 0; i < this->patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patterns(i));
  }
  
  // repeated .rpc.MingTang mingTang = 9;
  total_size += 1 * this->mingtang_size();
  for (int i = 0; i < this->mingtang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mingtang(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaerPlayerJieSuanPattern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaerPlayerJieSuanPattern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaerPlayerJieSuanPattern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaerPlayerJieSuanPattern::MergeFrom(const DaerPlayerJieSuanPattern& from) {
  GOOGLE_CHECK_NE(&from, this);
  patterns_.MergeFrom(from.patterns_);
  mingtang_.MergeFrom(from.mingtang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_hu()) {
      set_hu(from.hu());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaerPlayerJieSuanPattern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaerPlayerJieSuanPattern::CopyFrom(const DaerPlayerJieSuanPattern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaerPlayerJieSuanPattern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  for (int i = 0; i < patterns_size(); i++) {
    if (!this->patterns(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mingtang_size(); i++) {
    if (!this->mingtang(i).IsInitialized()) return false;
  }
  return true;
}

void DaerPlayerJieSuanPattern::Swap(DaerPlayerJieSuanPattern* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(hu_, other->hu_);
    std::swap(score_, other->score_);
    patterns_.Swap(&other->patterns_);
    mingtang_.Swap(&other->mingtang_);
    std::swap(coin_, other->coin_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaerPlayerJieSuanPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaerPlayerJieSuanPattern_descriptor_;
  metadata.reflection = DaerPlayerJieSuanPattern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSuanNotifyACK::kDaerPlayerJieSuanPatternFieldNumber;
const int JieSuanNotifyACK::kDiCardsFieldNumber;
const int JieSuanNotifyACK::kHuangZhuangFieldNumber;
const int JieSuanNotifyACK::kAddiFieldNumber;
#endif  // !_MSC_VER

JieSuanNotifyACK::JieSuanNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSuanNotifyACK::InitAsDefaultInstance() {
  addi_ = const_cast< ::rpc::JieSuanAdditionData*>(&::rpc::JieSuanAdditionData::default_instance());
}

JieSuanNotifyACK::JieSuanNotifyACK(const JieSuanNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSuanNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  huangzhuang_ = false;
  addi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSuanNotifyACK::~JieSuanNotifyACK() {
  SharedDtor();
}

void JieSuanNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete addi_;
  }
}

void JieSuanNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSuanNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSuanNotifyACK_descriptor_;
}

const JieSuanNotifyACK& JieSuanNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSuanNotifyACK* JieSuanNotifyACK::default_instance_ = NULL;

JieSuanNotifyACK* JieSuanNotifyACK::New() const {
  return new JieSuanNotifyACK;
}

void JieSuanNotifyACK::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    huangzhuang_ = false;
    if (has_addi()) {
      if (addi_ != NULL) addi_->::rpc::JieSuanAdditionData::Clear();
    }
  }
  daerplayerjiesuanpattern_.Clear();
  dicards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSuanNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.DaerPlayerJieSuanPattern daerPlayerJieSuanPattern = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daerPlayerJieSuanPattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daerplayerjiesuanpattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daerPlayerJieSuanPattern;
        if (input->ExpectTag(58)) goto parse_diCards;
        break;
      }
      
      // repeated .rpc.Card diCards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dicards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_diCards;
        if (input->ExpectTag(72)) goto parse_huangZhuang;
        break;
      }
      
      // optional bool huangZhuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huangZhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &huangzhuang_)));
          set_has_huangzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_addi;
        break;
      }
      
      // optional .rpc.JieSuanAdditionData addi = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSuanNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.DaerPlayerJieSuanPattern daerPlayerJieSuanPattern = 1;
  for (int i = 0; i < this->daerplayerjiesuanpattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daerplayerjiesuanpattern(i), output);
  }
  
  // repeated .rpc.Card diCards = 7;
  for (int i = 0; i < this->dicards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dicards(i), output);
  }
  
  // optional bool huangZhuang = 9;
  if (has_huangzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->huangzhuang(), output);
  }
  
  // optional .rpc.JieSuanAdditionData addi = 11;
  if (has_addi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->addi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSuanNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.DaerPlayerJieSuanPattern daerPlayerJieSuanPattern = 1;
  for (int i = 0; i < this->daerplayerjiesuanpattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daerplayerjiesuanpattern(i), target);
  }
  
  // repeated .rpc.Card diCards = 7;
  for (int i = 0; i < this->dicards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dicards(i), target);
  }
  
  // optional bool huangZhuang = 9;
  if (has_huangzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->huangzhuang(), target);
  }
  
  // optional .rpc.JieSuanAdditionData addi = 11;
  if (has_addi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->addi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSuanNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool huangZhuang = 9;
    if (has_huangzhuang()) {
      total_size += 1 + 1;
    }
    
    // optional .rpc.JieSuanAdditionData addi = 11;
    if (has_addi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addi());
    }
    
  }
  // repeated .rpc.DaerPlayerJieSuanPattern daerPlayerJieSuanPattern = 1;
  total_size += 1 * this->daerplayerjiesuanpattern_size();
  for (int i = 0; i < this->daerplayerjiesuanpattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daerplayerjiesuanpattern(i));
  }
  
  // repeated .rpc.Card diCards = 7;
  total_size += 1 * this->dicards_size();
  for (int i = 0; i < this->dicards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dicards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSuanNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSuanNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSuanNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSuanNotifyACK::MergeFrom(const JieSuanNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  daerplayerjiesuanpattern_.MergeFrom(from.daerplayerjiesuanpattern_);
  dicards_.MergeFrom(from.dicards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_huangzhuang()) {
      set_huangzhuang(from.huangzhuang());
    }
    if (from.has_addi()) {
      mutable_addi()->::rpc::JieSuanAdditionData::MergeFrom(from.addi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSuanNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSuanNotifyACK::CopyFrom(const JieSuanNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSuanNotifyACK::IsInitialized() const {
  
  for (int i = 0; i < daerplayerjiesuanpattern_size(); i++) {
    if (!this->daerplayerjiesuanpattern(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dicards_size(); i++) {
    if (!this->dicards(i).IsInitialized()) return false;
  }
  if (has_addi()) {
    if (!this->addi().IsInitialized()) return false;
  }
  return true;
}

void JieSuanNotifyACK::Swap(JieSuanNotifyACK* other) {
  if (other != this) {
    daerplayerjiesuanpattern_.Swap(&other->daerplayerjiesuanpattern_);
    dicards_.Swap(&other->dicards_);
    std::swap(huangzhuang_, other->huangzhuang_);
    std::swap(addi_, other->addi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSuanNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSuanNotifyACK_descriptor_;
  metadata.reflection = JieSuanNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSuanAdditionData::kSysTypeFieldNumber;
const int JieSuanAdditionData::kStageEndFieldNumber;
const int JieSuanAdditionData::kSuccessFieldNumber;
const int JieSuanAdditionData::kCoinFieldNumber;
const int JieSuanAdditionData::kJieSuanTimeFieldNumber;
const int JieSuanAdditionData::kCurTimesFieldNumber;
const int JieSuanAdditionData::kContinueTimeFieldNumber;
#endif  // !_MSC_VER

JieSuanAdditionData::JieSuanAdditionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSuanAdditionData::InitAsDefaultInstance() {
}

JieSuanAdditionData::JieSuanAdditionData(const JieSuanAdditionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSuanAdditionData::SharedCtor() {
  _cached_size_ = 0;
  systype_ = 0;
  stageend_ = false;
  success_ = false;
  jiesuantime_ = GOOGLE_LONGLONG(0);
  curtimes_ = 0;
  continuetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSuanAdditionData::~JieSuanAdditionData() {
  SharedDtor();
}

void JieSuanAdditionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JieSuanAdditionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSuanAdditionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSuanAdditionData_descriptor_;
}

const JieSuanAdditionData& JieSuanAdditionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSuanAdditionData* JieSuanAdditionData::default_instance_ = NULL;

JieSuanAdditionData* JieSuanAdditionData::New() const {
  return new JieSuanAdditionData;
}

void JieSuanAdditionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    systype_ = 0;
    stageend_ = false;
    success_ = false;
    jiesuantime_ = GOOGLE_LONGLONG(0);
    curtimes_ = 0;
    continuetime_ = 0;
  }
  coin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSuanAdditionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sysType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systype_)));
          set_has_systype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stageEnd;
        break;
      }
      
      // optional bool stageEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stageend_)));
          set_has_stageend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }
      
      // optional bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coin;
        break;
      }
      
      // repeated .rpc.JieSuanCoin coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coin;
        if (input->ExpectTag(40)) goto parse_jieSuanTime;
        break;
      }
      
      // optional int64 jieSuanTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jieSuanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiesuantime_)));
          set_has_jiesuantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_curTimes;
        break;
      }
      
      // optional int32 curTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtimes_)));
          set_has_curtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_continueTime;
        break;
      }
      
      // optional int32 continueTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuetime_)));
          set_has_continuetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSuanAdditionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sysType = 1;
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->systype(), output);
  }
  
  // optional bool stageEnd = 2;
  if (has_stageend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stageend(), output);
  }
  
  // optional bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }
  
  // repeated .rpc.JieSuanCoin coin = 4;
  for (int i = 0; i < this->coin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coin(i), output);
  }
  
  // optional int64 jieSuanTime = 5;
  if (has_jiesuantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->jiesuantime(), output);
  }
  
  // optional int32 curTimes = 6;
  if (has_curtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curtimes(), output);
  }
  
  // optional int32 continueTime = 7;
  if (has_continuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->continuetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSuanAdditionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sysType = 1;
  if (has_systype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->systype(), target);
  }
  
  // optional bool stageEnd = 2;
  if (has_stageend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stageend(), target);
  }
  
  // optional bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }
  
  // repeated .rpc.JieSuanCoin coin = 4;
  for (int i = 0; i < this->coin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coin(i), target);
  }
  
  // optional int64 jieSuanTime = 5;
  if (has_jiesuantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->jiesuantime(), target);
  }
  
  // optional int32 curTimes = 6;
  if (has_curtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curtimes(), target);
  }
  
  // optional int32 continueTime = 7;
  if (has_continuetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->continuetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSuanAdditionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sysType = 1;
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systype());
    }
    
    // optional bool stageEnd = 2;
    if (has_stageend()) {
      total_size += 1 + 1;
    }
    
    // optional bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional int64 jieSuanTime = 5;
    if (has_jiesuantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiesuantime());
    }
    
    // optional int32 curTimes = 6;
    if (has_curtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtimes());
    }
    
    // optional int32 continueTime = 7;
    if (has_continuetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuetime());
    }
    
  }
  // repeated .rpc.JieSuanCoin coin = 4;
  total_size += 1 * this->coin_size();
  for (int i = 0; i < this->coin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coin(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSuanAdditionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSuanAdditionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSuanAdditionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSuanAdditionData::MergeFrom(const JieSuanAdditionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  coin_.MergeFrom(from.coin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systype()) {
      set_systype(from.systype());
    }
    if (from.has_stageend()) {
      set_stageend(from.stageend());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_jiesuantime()) {
      set_jiesuantime(from.jiesuantime());
    }
    if (from.has_curtimes()) {
      set_curtimes(from.curtimes());
    }
    if (from.has_continuetime()) {
      set_continuetime(from.continuetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSuanAdditionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSuanAdditionData::CopyFrom(const JieSuanAdditionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSuanAdditionData::IsInitialized() const {
  
  for (int i = 0; i < coin_size(); i++) {
    if (!this->coin(i).IsInitialized()) return false;
  }
  return true;
}

void JieSuanAdditionData::Swap(JieSuanAdditionData* other) {
  if (other != this) {
    std::swap(systype_, other->systype_);
    std::swap(stageend_, other->stageend_);
    std::swap(success_, other->success_);
    coin_.Swap(&other->coin_);
    std::swap(jiesuantime_, other->jiesuantime_);
    std::swap(curtimes_, other->curtimes_);
    std::swap(continuetime_, other->continuetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSuanAdditionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSuanAdditionData_descriptor_;
  metadata.reflection = JieSuanAdditionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalJieSuanNotifyACK::kJieSuanInfoFieldNumber;
#endif  // !_MSC_VER

FinalJieSuanNotifyACK::FinalJieSuanNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalJieSuanNotifyACK::InitAsDefaultInstance() {
  jiesuaninfo_ = const_cast< ::rpc::JieSuanAdditionData*>(&::rpc::JieSuanAdditionData::default_instance());
}

FinalJieSuanNotifyACK::FinalJieSuanNotifyACK(const FinalJieSuanNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalJieSuanNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  jiesuaninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalJieSuanNotifyACK::~FinalJieSuanNotifyACK() {
  SharedDtor();
}

void FinalJieSuanNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete jiesuaninfo_;
  }
}

void FinalJieSuanNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalJieSuanNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalJieSuanNotifyACK_descriptor_;
}

const FinalJieSuanNotifyACK& FinalJieSuanNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FinalJieSuanNotifyACK* FinalJieSuanNotifyACK::default_instance_ = NULL;

FinalJieSuanNotifyACK* FinalJieSuanNotifyACK::New() const {
  return new FinalJieSuanNotifyACK;
}

void FinalJieSuanNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jiesuaninfo()) {
      if (jiesuaninfo_ != NULL) jiesuaninfo_->::rpc::JieSuanAdditionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalJieSuanNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.JieSuanAdditionData jieSuanInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jiesuaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinalJieSuanNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.JieSuanAdditionData jieSuanInfo = 1;
  if (has_jiesuaninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jiesuaninfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalJieSuanNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.JieSuanAdditionData jieSuanInfo = 1;
  if (has_jiesuaninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jiesuaninfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalJieSuanNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.JieSuanAdditionData jieSuanInfo = 1;
    if (has_jiesuaninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jiesuaninfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalJieSuanNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalJieSuanNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalJieSuanNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalJieSuanNotifyACK::MergeFrom(const FinalJieSuanNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jiesuaninfo()) {
      mutable_jiesuaninfo()->::rpc::JieSuanAdditionData::MergeFrom(from.jiesuaninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalJieSuanNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalJieSuanNotifyACK::CopyFrom(const FinalJieSuanNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalJieSuanNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_jiesuaninfo()) {
    if (!this->jiesuaninfo().IsInitialized()) return false;
  }
  return true;
}

void FinalJieSuanNotifyACK::Swap(FinalJieSuanNotifyACK* other) {
  if (other != this) {
    std::swap(jiesuaninfo_, other->jiesuaninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalJieSuanNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalJieSuanNotifyACK_descriptor_;
  metadata.reflection = FinalJieSuanNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJCard::kValueFieldNumber;
const int MJCard::kCTypeFieldNumber;
const int MJCard::kRcTypeFieldNumber;
const int MJCard::kFlagFieldNumber;
#endif  // !_MSC_VER

MJCard::MJCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJCard::InitAsDefaultInstance() {
}

MJCard::MJCard(const MJCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJCard::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ctype_ = 0;
  rctype_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJCard::~MJCard() {
  SharedDtor();
}

void MJCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJCard_descriptor_;
}

const MJCard& MJCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJCard* MJCard::default_instance_ = NULL;

MJCard* MJCard::New() const {
  return new MJCard;
}

void MJCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    ctype_ = 0;
    rctype_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cType;
        break;
      }
      
      // required int32 cType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctype_)));
          set_has_ctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rcType;
        break;
      }
      
      // required int32 rcType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rctype_)));
          set_has_rctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // required int32 cType = 2;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctype(), output);
  }
  
  // required int32 rcType = 3;
  if (has_rctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rctype(), output);
  }
  
  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // required int32 cType = 2;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctype(), target);
  }
  
  // required int32 rcType = 3;
  if (has_rctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rctype(), target);
  }
  
  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required int32 cType = 2;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctype());
    }
    
    // required int32 rcType = 3;
    if (has_rctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rctype());
    }
    
    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJCard::MergeFrom(const MJCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_rctype()) {
      set_rctype(from.rctype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJCard::CopyFrom(const MJCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MJCard::Swap(MJCard* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(ctype_, other->ctype_);
    std::swap(rctype_, other->rctype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJCard_descriptor_;
  metadata.reflection = MJCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJPattern::kPtypeFieldNumber;
const int MJPattern::kCTypeFieldNumber;
const int MJPattern::kCardsFieldNumber;
const int MJPattern::kIsShowFieldNumber;
#endif  // !_MSC_VER

MJPattern::MJPattern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJPattern::InitAsDefaultInstance() {
}

MJPattern::MJPattern(const MJPattern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJPattern::SharedCtor() {
  _cached_size_ = 0;
  ptype_ = 0;
  ctype_ = 0;
  isshow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJPattern::~MJPattern() {
  SharedDtor();
}

void MJPattern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJPattern_descriptor_;
}

const MJPattern& MJPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJPattern* MJPattern::default_instance_ = NULL;

MJPattern* MJPattern::New() const {
  return new MJPattern;
}

void MJPattern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptype_ = 0;
    ctype_ = 0;
    isshow_ = false;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cType;
        break;
      }
      
      // required int32 cType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctype_)));
          set_has_ctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // repeated .rpc.MJCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        if (input->ExpectTag(32)) goto parse_isShow;
        break;
      }
      
      // optional bool isShow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ptype = 1;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ptype(), output);
  }
  
  // required int32 cType = 2;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctype(), output);
  }
  
  // repeated .rpc.MJCard cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(i), output);
  }
  
  // optional bool isShow = 4;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isshow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJPattern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ptype = 1;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ptype(), target);
  }
  
  // required int32 cType = 2;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctype(), target);
  }
  
  // repeated .rpc.MJCard cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(i), target);
  }
  
  // optional bool isShow = 4;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isshow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJPattern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ptype = 1;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptype());
    }
    
    // required int32 cType = 2;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctype());
    }
    
    // optional bool isShow = 4;
    if (has_isshow()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rpc.MJCard cards = 3;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJPattern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJPattern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJPattern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJPattern::MergeFrom(const MJPattern& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJPattern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJPattern::CopyFrom(const MJPattern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJPattern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void MJPattern::Swap(MJPattern* other) {
  if (other != this) {
    std::swap(ptype_, other->ptype_);
    std::swap(ctype_, other->ctype_);
    cards_.Swap(&other->cards_);
    std::swap(isshow_, other->isshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJPattern_descriptor_;
  metadata.reflection = MJPattern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MJQuickEnterRoomREQ::MJQuickEnterRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJQuickEnterRoomREQ::InitAsDefaultInstance() {
}

MJQuickEnterRoomREQ::MJQuickEnterRoomREQ(const MJQuickEnterRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJQuickEnterRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJQuickEnterRoomREQ::~MJQuickEnterRoomREQ() {
  SharedDtor();
}

void MJQuickEnterRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJQuickEnterRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJQuickEnterRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJQuickEnterRoomREQ_descriptor_;
}

const MJQuickEnterRoomREQ& MJQuickEnterRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJQuickEnterRoomREQ* MJQuickEnterRoomREQ::default_instance_ = NULL;

MJQuickEnterRoomREQ* MJQuickEnterRoomREQ::New() const {
  return new MJQuickEnterRoomREQ;
}

void MJQuickEnterRoomREQ::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJQuickEnterRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MJQuickEnterRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJQuickEnterRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJQuickEnterRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJQuickEnterRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJQuickEnterRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJQuickEnterRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJQuickEnterRoomREQ::MergeFrom(const MJQuickEnterRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJQuickEnterRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJQuickEnterRoomREQ::CopyFrom(const MJQuickEnterRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJQuickEnterRoomREQ::IsInitialized() const {
  
  return true;
}

void MJQuickEnterRoomREQ::Swap(MJQuickEnterRoomREQ* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJQuickEnterRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJQuickEnterRoomREQ_descriptor_;
  metadata.reflection = MJQuickEnterRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJEnterRoomACK::kPlayerInfoFieldNumber;
const int MJEnterRoomACK::kLocationFieldNumber;
const int MJEnterRoomACK::kBReadyFieldNumber;
const int MJEnterRoomACK::kCodeFieldNumber;
const int MJEnterRoomACK::kRoomIdFieldNumber;
const int MJEnterRoomACK::kIsNormalReqEnterRoomFieldNumber;
#endif  // !_MSC_VER

MJEnterRoomACK::MJEnterRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJEnterRoomACK::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::rpc::PlayerBaseInfo*>(&::rpc::PlayerBaseInfo::default_instance());
}

MJEnterRoomACK::MJEnterRoomACK(const MJEnterRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJEnterRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  location_ = 0;
  bready_ = false;
  code_ = 0;
  roomid_ = 0;
  isnormalreqenterroom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJEnterRoomACK::~MJEnterRoomACK() {
  SharedDtor();
}

void MJEnterRoomACK::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void MJEnterRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJEnterRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJEnterRoomACK_descriptor_;
}

const MJEnterRoomACK& MJEnterRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJEnterRoomACK* MJEnterRoomACK::default_instance_ = NULL;

MJEnterRoomACK* MJEnterRoomACK::New() const {
  return new MJEnterRoomACK;
}

void MJEnterRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::rpc::PlayerBaseInfo::Clear();
    }
    location_ = 0;
    bready_ = false;
    code_ = 0;
    roomid_ = 0;
    isnormalreqenterroom_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJEnterRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.PlayerBaseInfo playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }
      
      // optional int32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bReady;
        break;
      }
      
      // optional bool bReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bready_)));
          set_has_bready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }
      
      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomId;
        break;
      }
      
      // optional int32 roomId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isNormalReqEnterRoom;
        break;
      }
      
      // optional bool isNormalReqEnterRoom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNormalReqEnterRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnormalreqenterroom_)));
          set_has_isnormalreqenterroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJEnterRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }
  
  // optional int32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location(), output);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bready(), output);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }
  
  // optional bool isNormalReqEnterRoom = 6;
  if (has_isnormalreqenterroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnormalreqenterroom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJEnterRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }
  
  // optional int32 location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location(), target);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bready(), target);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }
  
  // optional bool isNormalReqEnterRoom = 6;
  if (has_isnormalreqenterroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnormalreqenterroom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJEnterRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.PlayerBaseInfo playerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }
    
    // optional int32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }
    
    // optional bool bReady = 3;
    if (has_bready()) {
      total_size += 1 + 1;
    }
    
    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional int32 roomId = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional bool isNormalReqEnterRoom = 6;
    if (has_isnormalreqenterroom()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJEnterRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJEnterRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJEnterRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJEnterRoomACK::MergeFrom(const MJEnterRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::rpc::PlayerBaseInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_bready()) {
      set_bready(from.bready());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isnormalreqenterroom()) {
      set_isnormalreqenterroom(from.isnormalreqenterroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJEnterRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJEnterRoomACK::CopyFrom(const MJEnterRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJEnterRoomACK::IsInitialized() const {
  
  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void MJEnterRoomACK::Swap(MJEnterRoomACK* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(location_, other->location_);
    std::swap(bready_, other->bready_);
    std::swap(code_, other->code_);
    std::swap(roomid_, other->roomid_);
    std::swap(isnormalreqenterroom_, other->isnormalreqenterroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJEnterRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJEnterRoomACK_descriptor_;
  metadata.reflection = MJEnterRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJLeaveRoomREQ::kPlayerIDFieldNumber;
const int MJLeaveRoomREQ::kIsChangeDeskFieldNumber;
#endif  // !_MSC_VER

MJLeaveRoomREQ::MJLeaveRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJLeaveRoomREQ::InitAsDefaultInstance() {
}

MJLeaveRoomREQ::MJLeaveRoomREQ(const MJLeaveRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJLeaveRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ischangedesk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJLeaveRoomREQ::~MJLeaveRoomREQ() {
  SharedDtor();
}

void MJLeaveRoomREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void MJLeaveRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJLeaveRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJLeaveRoomREQ_descriptor_;
}

const MJLeaveRoomREQ& MJLeaveRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJLeaveRoomREQ* MJLeaveRoomREQ::default_instance_ = NULL;

MJLeaveRoomREQ* MJLeaveRoomREQ::New() const {
  return new MJLeaveRoomREQ;
}

void MJLeaveRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    ischangedesk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJLeaveRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isChangeDesk;
        break;
      }
      
      // required bool isChangeDesk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeDesk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedesk_)));
          set_has_ischangedesk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJLeaveRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischangedesk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJLeaveRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ischangedesk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJLeaveRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isChangeDesk = 2;
    if (has_ischangedesk()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJLeaveRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJLeaveRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJLeaveRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJLeaveRoomREQ::MergeFrom(const MJLeaveRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ischangedesk()) {
      set_ischangedesk(from.ischangedesk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJLeaveRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJLeaveRoomREQ::CopyFrom(const MJLeaveRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJLeaveRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MJLeaveRoomREQ::Swap(MJLeaveRoomREQ* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ischangedesk_, other->ischangedesk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJLeaveRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJLeaveRoomREQ_descriptor_;
  metadata.reflection = MJLeaveRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJLeaveRoomACK::kPlayerIDFieldNumber;
const int MJLeaveRoomACK::kIsChangeDeskFieldNumber;
#endif  // !_MSC_VER

MJLeaveRoomACK::MJLeaveRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJLeaveRoomACK::InitAsDefaultInstance() {
}

MJLeaveRoomACK::MJLeaveRoomACK(const MJLeaveRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJLeaveRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ischangedesk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJLeaveRoomACK::~MJLeaveRoomACK() {
  SharedDtor();
}

void MJLeaveRoomACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void MJLeaveRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJLeaveRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJLeaveRoomACK_descriptor_;
}

const MJLeaveRoomACK& MJLeaveRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJLeaveRoomACK* MJLeaveRoomACK::default_instance_ = NULL;

MJLeaveRoomACK* MJLeaveRoomACK::New() const {
  return new MJLeaveRoomACK;
}

void MJLeaveRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    ischangedesk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJLeaveRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isChangeDesk;
        break;
      }
      
      // required bool isChangeDesk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeDesk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedesk_)));
          set_has_ischangedesk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJLeaveRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischangedesk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJLeaveRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required bool isChangeDesk = 2;
  if (has_ischangedesk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ischangedesk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJLeaveRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isChangeDesk = 2;
    if (has_ischangedesk()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJLeaveRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJLeaveRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJLeaveRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJLeaveRoomACK::MergeFrom(const MJLeaveRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ischangedesk()) {
      set_ischangedesk(from.ischangedesk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJLeaveRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJLeaveRoomACK::CopyFrom(const MJLeaveRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJLeaveRoomACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MJLeaveRoomACK::Swap(MJLeaveRoomACK* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ischangedesk_, other->ischangedesk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJLeaveRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJLeaveRoomACK_descriptor_;
  metadata.reflection = MJLeaveRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJCountDown::kPlayerIDFieldNumber;
const int MJCountDown::kCurrentCountDownFieldNumber;
#endif  // !_MSC_VER

MJCountDown::MJCountDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJCountDown::InitAsDefaultInstance() {
}

MJCountDown::MJCountDown(const MJCountDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJCountDown::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentcountdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJCountDown::~MJCountDown() {
  SharedDtor();
}

void MJCountDown::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void MJCountDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJCountDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJCountDown_descriptor_;
}

const MJCountDown& MJCountDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJCountDown* MJCountDown::default_instance_ = NULL;

MJCountDown* MJCountDown::New() const {
  return new MJCountDown;
}

void MJCountDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    currentcountdown_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJCountDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentCountDown;
        break;
      }
      
      // optional int32 currentCountDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCountDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcountdown_)));
          set_has_currentcountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJCountDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentcountdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJCountDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentcountdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJCountDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 currentCountDown = 2;
    if (has_currentcountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcountdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJCountDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJCountDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJCountDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJCountDown::MergeFrom(const MJCountDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_currentcountdown()) {
      set_currentcountdown(from.currentcountdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJCountDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJCountDown::CopyFrom(const MJCountDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJCountDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MJCountDown::Swap(MJCountDown* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(currentcountdown_, other->currentcountdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJCountDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJCountDown_descriptor_;
  metadata.reflection = MJCountDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJFightPlayerInfo::kPlayerIDFieldNumber;
const int MJFightPlayerInfo::kHandCardsFieldNumber;
const int MJFightPlayerInfo::kShowPatternsFieldNumber;
const int MJFightPlayerInfo::kChuCardsFieldNumber;
const int MJFightPlayerInfo::kBZhuangFieldNumber;
const int MJFightPlayerInfo::kBBaoFieldNumber;
const int MJFightPlayerInfo::kBTuoGuanFieldNumber;
const int MJFightPlayerInfo::kHandCardCountFieldNumber;
const int MJFightPlayerInfo::kAlreadyCardArgFieldNumber;
#endif  // !_MSC_VER

MJFightPlayerInfo::MJFightPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJFightPlayerInfo::InitAsDefaultInstance() {
  alreadycardarg_ = const_cast< ::rpc::MJCard*>(&::rpc::MJCard::default_instance());
}

MJFightPlayerInfo::MJFightPlayerInfo(const MJFightPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJFightPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bzhuang_ = false;
  bbao_ = false;
  btuoguan_ = false;
  handcardcount_ = 0;
  alreadycardarg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJFightPlayerInfo::~MJFightPlayerInfo() {
  SharedDtor();
}

void MJFightPlayerInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete alreadycardarg_;
  }
}

void MJFightPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJFightPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJFightPlayerInfo_descriptor_;
}

const MJFightPlayerInfo& MJFightPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJFightPlayerInfo* MJFightPlayerInfo::default_instance_ = NULL;

MJFightPlayerInfo* MJFightPlayerInfo::New() const {
  return new MJFightPlayerInfo;
}

void MJFightPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    bzhuang_ = false;
    bbao_ = false;
    btuoguan_ = false;
    handcardcount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_alreadycardarg()) {
      if (alreadycardarg_ != NULL) alreadycardarg_->::rpc::MJCard::Clear();
    }
  }
  handcards_.Clear();
  showpatterns_.Clear();
  chucards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJFightPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handCards;
        break;
      }
      
      // repeated .rpc.MJCard handCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handCards;
        if (input->ExpectTag(34)) goto parse_showPatterns;
        break;
      }
      
      // repeated .rpc.MJPattern showPatterns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showPatterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showpatterns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_showPatterns;
        if (input->ExpectTag(50)) goto parse_chuCards;
        break;
      }
      
      // repeated .rpc.MJCard chuCards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chuCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chucards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chuCards;
        if (input->ExpectTag(72)) goto parse_bZhuang;
        break;
      }
      
      // optional bool bZhuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuang_)));
          set_has_bzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bBao;
        break;
      }
      
      // optional bool bBao = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bBao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbao_)));
          set_has_bbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bTuoGuan;
        break;
      }
      
      // optional bool bTuoGuan = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bTuoGuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btuoguan_)));
          set_has_btuoguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_handCardCount;
        break;
      }
      
      // optional int32 handCardCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcardcount_)));
          set_has_handcardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_alreadyCardArg;
        break;
      }
      
      // optional .rpc.MJCard alreadyCardArg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alreadyCardArg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alreadycardarg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJFightPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // repeated .rpc.MJCard handCards = 2;
  for (int i = 0; i < this->handcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->handcards(i), output);
  }
  
  // repeated .rpc.MJPattern showPatterns = 4;
  for (int i = 0; i < this->showpatterns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->showpatterns(i), output);
  }
  
  // repeated .rpc.MJCard chuCards = 6;
  for (int i = 0; i < this->chucards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chucards(i), output);
  }
  
  // optional bool bZhuang = 9;
  if (has_bzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bzhuang(), output);
  }
  
  // optional bool bBao = 10;
  if (has_bbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbao(), output);
  }
  
  // optional bool bTuoGuan = 11;
  if (has_btuoguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->btuoguan(), output);
  }
  
  // optional int32 handCardCount = 12;
  if (has_handcardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->handcardcount(), output);
  }
  
  // optional .rpc.MJCard alreadyCardArg = 13;
  if (has_alreadycardarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->alreadycardarg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJFightPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // repeated .rpc.MJCard handCards = 2;
  for (int i = 0; i < this->handcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->handcards(i), target);
  }
  
  // repeated .rpc.MJPattern showPatterns = 4;
  for (int i = 0; i < this->showpatterns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->showpatterns(i), target);
  }
  
  // repeated .rpc.MJCard chuCards = 6;
  for (int i = 0; i < this->chucards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chucards(i), target);
  }
  
  // optional bool bZhuang = 9;
  if (has_bzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bzhuang(), target);
  }
  
  // optional bool bBao = 10;
  if (has_bbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbao(), target);
  }
  
  // optional bool bTuoGuan = 11;
  if (has_btuoguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->btuoguan(), target);
  }
  
  // optional int32 handCardCount = 12;
  if (has_handcardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->handcardcount(), target);
  }
  
  // optional .rpc.MJCard alreadyCardArg = 13;
  if (has_alreadycardarg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->alreadycardarg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJFightPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional bool bZhuang = 9;
    if (has_bzhuang()) {
      total_size += 1 + 1;
    }
    
    // optional bool bBao = 10;
    if (has_bbao()) {
      total_size += 1 + 1;
    }
    
    // optional bool bTuoGuan = 11;
    if (has_btuoguan()) {
      total_size += 1 + 1;
    }
    
    // optional int32 handCardCount = 12;
    if (has_handcardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcardcount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rpc.MJCard alreadyCardArg = 13;
    if (has_alreadycardarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alreadycardarg());
    }
    
  }
  // repeated .rpc.MJCard handCards = 2;
  total_size += 1 * this->handcards_size();
  for (int i = 0; i < this->handcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handcards(i));
  }
  
  // repeated .rpc.MJPattern showPatterns = 4;
  total_size += 1 * this->showpatterns_size();
  for (int i = 0; i < this->showpatterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showpatterns(i));
  }
  
  // repeated .rpc.MJCard chuCards = 6;
  total_size += 1 * this->chucards_size();
  for (int i = 0; i < this->chucards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chucards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJFightPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJFightPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJFightPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJFightPlayerInfo::MergeFrom(const MJFightPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcards_.MergeFrom(from.handcards_);
  showpatterns_.MergeFrom(from.showpatterns_);
  chucards_.MergeFrom(from.chucards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_bzhuang()) {
      set_bzhuang(from.bzhuang());
    }
    if (from.has_bbao()) {
      set_bbao(from.bbao());
    }
    if (from.has_btuoguan()) {
      set_btuoguan(from.btuoguan());
    }
    if (from.has_handcardcount()) {
      set_handcardcount(from.handcardcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alreadycardarg()) {
      mutable_alreadycardarg()->::rpc::MJCard::MergeFrom(from.alreadycardarg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJFightPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJFightPlayerInfo::CopyFrom(const MJFightPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJFightPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < handcards_size(); i++) {
    if (!this->handcards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < showpatterns_size(); i++) {
    if (!this->showpatterns(i).IsInitialized()) return false;
  }
  for (int i = 0; i < chucards_size(); i++) {
    if (!this->chucards(i).IsInitialized()) return false;
  }
  if (has_alreadycardarg()) {
    if (!this->alreadycardarg().IsInitialized()) return false;
  }
  return true;
}

void MJFightPlayerInfo::Swap(MJFightPlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    handcards_.Swap(&other->handcards_);
    showpatterns_.Swap(&other->showpatterns_);
    chucards_.Swap(&other->chucards_);
    std::swap(bzhuang_, other->bzhuang_);
    std::swap(bbao_, other->bbao_);
    std::swap(btuoguan_, other->btuoguan_);
    std::swap(handcardcount_, other->handcardcount_);
    std::swap(alreadycardarg_, other->alreadycardarg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJFightPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJFightPlayerInfo_descriptor_;
  metadata.reflection = MJFightPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJFightCurrentStateInfo::kCurrentCountDownFieldNumber;
const int MJFightCurrentStateInfo::kActivePlayerIDFieldNumber;
const int MJFightCurrentStateInfo::kLastActivePlayerIDFieldNumber;
const int MJFightCurrentStateInfo::kCurrentDeskRemainCardFieldNumber;
#endif  // !_MSC_VER

MJFightCurrentStateInfo::MJFightCurrentStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJFightCurrentStateInfo::InitAsDefaultInstance() {
}

MJFightCurrentStateInfo::MJFightCurrentStateInfo(const MJFightCurrentStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJFightCurrentStateInfo::SharedCtor() {
  _cached_size_ = 0;
  currentcountdown_ = 0;
  activeplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastactiveplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentdeskremaincard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJFightCurrentStateInfo::~MJFightCurrentStateInfo() {
  SharedDtor();
}

void MJFightCurrentStateInfo::SharedDtor() {
  if (activeplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeplayerid_;
  }
  if (lastactiveplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete lastactiveplayerid_;
  }
  if (this != default_instance_) {
  }
}

void MJFightCurrentStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJFightCurrentStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJFightCurrentStateInfo_descriptor_;
}

const MJFightCurrentStateInfo& MJFightCurrentStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJFightCurrentStateInfo* MJFightCurrentStateInfo::default_instance_ = NULL;

MJFightCurrentStateInfo* MJFightCurrentStateInfo::New() const {
  return new MJFightCurrentStateInfo;
}

void MJFightCurrentStateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentcountdown_ = 0;
    if (has_activeplayerid()) {
      if (activeplayerid_ != &::google::protobuf::internal::kEmptyString) {
        activeplayerid_->clear();
      }
    }
    if (has_lastactiveplayerid()) {
      if (lastactiveplayerid_ != &::google::protobuf::internal::kEmptyString) {
        lastactiveplayerid_->clear();
      }
    }
    currentdeskremaincard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJFightCurrentStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currentCountDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcountdown_)));
          set_has_currentcountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activePlayerID;
        break;
      }
      
      // required string activePlayerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activePlayerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activeplayerid().data(), this->activeplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lastActivePlayerID;
        break;
      }
      
      // optional string lastActivePlayerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastActivePlayerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastactiveplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastactiveplayerid().data(), this->lastactiveplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentDeskRemainCard;
        break;
      }
      
      // required int32 currentDeskRemainCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentDeskRemainCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdeskremaincard_)));
          set_has_currentdeskremaincard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJFightCurrentStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentcountdown(), output);
  }
  
  // required string activePlayerID = 3;
  if (has_activeplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeplayerid().data(), this->activeplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->activeplayerid(), output);
  }
  
  // optional string lastActivePlayerID = 4;
  if (has_lastactiveplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastactiveplayerid().data(), this->lastactiveplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lastactiveplayerid(), output);
  }
  
  // required int32 currentDeskRemainCard = 5;
  if (has_currentdeskremaincard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentdeskremaincard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJFightCurrentStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 currentCountDown = 2;
  if (has_currentcountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentcountdown(), target);
  }
  
  // required string activePlayerID = 3;
  if (has_activeplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activeplayerid().data(), this->activeplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->activeplayerid(), target);
  }
  
  // optional string lastActivePlayerID = 4;
  if (has_lastactiveplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastactiveplayerid().data(), this->lastactiveplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lastactiveplayerid(), target);
  }
  
  // required int32 currentDeskRemainCard = 5;
  if (has_currentdeskremaincard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentdeskremaincard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJFightCurrentStateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 currentCountDown = 2;
    if (has_currentcountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcountdown());
    }
    
    // required string activePlayerID = 3;
    if (has_activeplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activeplayerid());
    }
    
    // optional string lastActivePlayerID = 4;
    if (has_lastactiveplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastactiveplayerid());
    }
    
    // required int32 currentDeskRemainCard = 5;
    if (has_currentdeskremaincard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdeskremaincard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJFightCurrentStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJFightCurrentStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJFightCurrentStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJFightCurrentStateInfo::MergeFrom(const MJFightCurrentStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentcountdown()) {
      set_currentcountdown(from.currentcountdown());
    }
    if (from.has_activeplayerid()) {
      set_activeplayerid(from.activeplayerid());
    }
    if (from.has_lastactiveplayerid()) {
      set_lastactiveplayerid(from.lastactiveplayerid());
    }
    if (from.has_currentdeskremaincard()) {
      set_currentdeskremaincard(from.currentdeskremaincard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJFightCurrentStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJFightCurrentStateInfo::CopyFrom(const MJFightCurrentStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJFightCurrentStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void MJFightCurrentStateInfo::Swap(MJFightCurrentStateInfo* other) {
  if (other != this) {
    std::swap(currentcountdown_, other->currentcountdown_);
    std::swap(activeplayerid_, other->activeplayerid_);
    std::swap(lastactiveplayerid_, other->lastactiveplayerid_);
    std::swap(currentdeskremaincard_, other->currentdeskremaincard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJFightCurrentStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJFightCurrentStateInfo_descriptor_;
  metadata.reflection = MJFightCurrentStateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJGameStartACK::kFightPlayersInfoFieldNumber;
const int MJGameStartACK::kCurrentFightStateFieldNumber;
const int MJGameStartACK::kFightStateFieldNumber;
#endif  // !_MSC_VER

MJGameStartACK::MJGameStartACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJGameStartACK::InitAsDefaultInstance() {
  currentfightstate_ = const_cast< ::rpc::MJFightCurrentStateInfo*>(&::rpc::MJFightCurrentStateInfo::default_instance());
}

MJGameStartACK::MJGameStartACK(const MJGameStartACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJGameStartACK::SharedCtor() {
  _cached_size_ = 0;
  currentfightstate_ = NULL;
  fightstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJGameStartACK::~MJGameStartACK() {
  SharedDtor();
}

void MJGameStartACK::SharedDtor() {
  if (this != default_instance_) {
    delete currentfightstate_;
  }
}

void MJGameStartACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJGameStartACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJGameStartACK_descriptor_;
}

const MJGameStartACK& MJGameStartACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJGameStartACK* MJGameStartACK::default_instance_ = NULL;

MJGameStartACK* MJGameStartACK::New() const {
  return new MJGameStartACK;
}

void MJGameStartACK::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_currentfightstate()) {
      if (currentfightstate_ != NULL) currentfightstate_->::rpc::MJFightCurrentStateInfo::Clear();
    }
    fightstate_ = 0;
  }
  fightplayersinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJGameStartACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.MJFightPlayerInfo fightPlayersInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightPlayersInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightplayersinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fightPlayersInfo;
        if (input->ExpectTag(18)) goto parse_currentFightState;
        break;
      }
      
      // optional .rpc.MJFightCurrentStateInfo currentFightState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentFightState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentfightstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fightState;
        break;
      }
      
      // optional int32 fightState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightstate_)));
          set_has_fightstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJGameStartACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.MJFightPlayerInfo fightPlayersInfo = 1;
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fightplayersinfo(i), output);
  }
  
  // optional .rpc.MJFightCurrentStateInfo currentFightState = 2;
  if (has_currentfightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentfightstate(), output);
  }
  
  // optional int32 fightState = 5;
  if (has_fightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fightstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJGameStartACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.MJFightPlayerInfo fightPlayersInfo = 1;
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fightplayersinfo(i), target);
  }
  
  // optional .rpc.MJFightCurrentStateInfo currentFightState = 2;
  if (has_currentfightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentfightstate(), target);
  }
  
  // optional int32 fightState = 5;
  if (has_fightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fightstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJGameStartACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rpc.MJFightCurrentStateInfo currentFightState = 2;
    if (has_currentfightstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentfightstate());
    }
    
    // optional int32 fightState = 5;
    if (has_fightstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightstate());
    }
    
  }
  // repeated .rpc.MJFightPlayerInfo fightPlayersInfo = 1;
  total_size += 1 * this->fightplayersinfo_size();
  for (int i = 0; i < this->fightplayersinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightplayersinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJGameStartACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJGameStartACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJGameStartACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJGameStartACK::MergeFrom(const MJGameStartACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightplayersinfo_.MergeFrom(from.fightplayersinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_currentfightstate()) {
      mutable_currentfightstate()->::rpc::MJFightCurrentStateInfo::MergeFrom(from.currentfightstate());
    }
    if (from.has_fightstate()) {
      set_fightstate(from.fightstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJGameStartACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJGameStartACK::CopyFrom(const MJGameStartACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJGameStartACK::IsInitialized() const {
  
  for (int i = 0; i < fightplayersinfo_size(); i++) {
    if (!this->fightplayersinfo(i).IsInitialized()) return false;
  }
  if (has_currentfightstate()) {
    if (!this->currentfightstate().IsInitialized()) return false;
  }
  return true;
}

void MJGameStartACK::Swap(MJGameStartACK* other) {
  if (other != this) {
    fightplayersinfo_.Swap(&other->fightplayersinfo_);
    std::swap(currentfightstate_, other->currentfightstate_);
    std::swap(fightstate_, other->fightstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJGameStartACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJGameStartACK_descriptor_;
  metadata.reflection = MJGameStartACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJActionACK::kActionFieldNumber;
const int MJActionACK::kPlayerIDFieldNumber;
const int MJActionACK::kCardArgsFieldNumber;
const int MJActionACK::kPengGangPatternFieldNumber;
const int MJActionACK::kCurrenDeskRemianCardFieldNumber;
const int MJActionACK::kResultFieldNumber;
#endif  // !_MSC_VER

MJActionACK::MJActionACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJActionACK::InitAsDefaultInstance() {
  cardargs_ = const_cast< ::rpc::MJCard*>(&::rpc::MJCard::default_instance());
}

MJActionACK::MJActionACK(const MJActionACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJActionACK::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardargs_ = NULL;
  currendeskremiancard_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJActionACK::~MJActionACK() {
  SharedDtor();
}

void MJActionACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete cardargs_;
  }
}

void MJActionACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJActionACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJActionACK_descriptor_;
}

const MJActionACK& MJActionACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJActionACK* MJActionACK::default_instance_ = NULL;

MJActionACK* MJActionACK::New() const {
  return new MJActionACK;
}

void MJActionACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_cardargs()) {
      if (cardargs_ != NULL) cardargs_->::rpc::MJCard::Clear();
    }
    currendeskremiancard_ = 0;
    result_ = 0;
  }
  penggangpattern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJActionACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerID;
        break;
      }
      
      // optional string playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardArgs;
        break;
      }
      
      // optional .rpc.MJCard cardArgs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pengGangPattern;
        break;
      }
      
      // repeated .rpc.MJPattern pengGangPattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pengGangPattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_penggangpattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pengGangPattern;
        if (input->ExpectTag(64)) goto parse_currenDeskRemianCard;
        break;
      }
      
      // optional int32 currenDeskRemianCard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currenDeskRemianCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currendeskremiancard_)));
          set_has_currendeskremiancard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }
      
      // required int32 result = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJActionACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  // optional string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playerid(), output);
  }
  
  // optional .rpc.MJCard cardArgs = 4;
  if (has_cardargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cardargs(), output);
  }
  
  // repeated .rpc.MJPattern pengGangPattern = 6;
  for (int i = 0; i < this->penggangpattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->penggangpattern(i), output);
  }
  
  // optional int32 currenDeskRemianCard = 8;
  if (has_currendeskremiancard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currendeskremiancard(), output);
  }
  
  // required int32 result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJActionACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  // optional string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }
  
  // optional .rpc.MJCard cardArgs = 4;
  if (has_cardargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cardargs(), target);
  }
  
  // repeated .rpc.MJPattern pengGangPattern = 6;
  for (int i = 0; i < this->penggangpattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->penggangpattern(i), target);
  }
  
  // optional int32 currenDeskRemianCard = 8;
  if (has_currendeskremiancard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currendeskremiancard(), target);
  }
  
  // required int32 result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJActionACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // optional string playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional .rpc.MJCard cardArgs = 4;
    if (has_cardargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardargs());
    }
    
    // optional int32 currenDeskRemianCard = 8;
    if (has_currendeskremiancard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currendeskremiancard());
    }
    
    // required int32 result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  // repeated .rpc.MJPattern pengGangPattern = 6;
  total_size += 1 * this->penggangpattern_size();
  for (int i = 0; i < this->penggangpattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->penggangpattern(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJActionACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJActionACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJActionACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJActionACK::MergeFrom(const MJActionACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  penggangpattern_.MergeFrom(from.penggangpattern_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_cardargs()) {
      mutable_cardargs()->::rpc::MJCard::MergeFrom(from.cardargs());
    }
    if (from.has_currendeskremiancard()) {
      set_currendeskremiancard(from.currendeskremiancard());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJActionACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJActionACK::CopyFrom(const MJActionACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJActionACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  
  if (has_cardargs()) {
    if (!this->cardargs().IsInitialized()) return false;
  }
  for (int i = 0; i < penggangpattern_size(); i++) {
    if (!this->penggangpattern(i).IsInitialized()) return false;
  }
  return true;
}

void MJActionACK::Swap(MJActionACK* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(playerid_, other->playerid_);
    std::swap(cardargs_, other->cardargs_);
    penggangpattern_.Swap(&other->penggangpattern_);
    std::swap(currendeskremiancard_, other->currendeskremiancard_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJActionACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJActionACK_descriptor_;
  metadata.reflection = MJActionACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJActionArgs::kActionFieldNumber;
const int MJActionArgs::kCardsArgsFieldNumber;
#endif  // !_MSC_VER

MJActionArgs::MJActionArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJActionArgs::InitAsDefaultInstance() {
}

MJActionArgs::MJActionArgs(const MJActionArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJActionArgs::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJActionArgs::~MJActionArgs() {
  SharedDtor();
}

void MJActionArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJActionArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJActionArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJActionArgs_descriptor_;
}

const MJActionArgs& MJActionArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJActionArgs* MJActionArgs::default_instance_ = NULL;

MJActionArgs* MJActionArgs::New() const {
  return new MJActionArgs;
}

void MJActionArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  cardsargs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJActionArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardsArgs;
        break;
      }
      
      // repeated .rpc.MJCard cardsArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardsArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardsargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardsArgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJActionArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  // repeated .rpc.MJCard cardsArgs = 3;
  for (int i = 0; i < this->cardsargs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardsargs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJActionArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  // repeated .rpc.MJCard cardsArgs = 3;
  for (int i = 0; i < this->cardsargs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardsargs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJActionArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
  }
  // repeated .rpc.MJCard cardsArgs = 3;
  total_size += 1 * this->cardsargs_size();
  for (int i = 0; i < this->cardsargs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardsargs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJActionArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJActionArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJActionArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJActionArgs::MergeFrom(const MJActionArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsargs_.MergeFrom(from.cardsargs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJActionArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJActionArgs::CopyFrom(const MJActionArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJActionArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cardsargs_size(); i++) {
    if (!this->cardsargs(i).IsInitialized()) return false;
  }
  return true;
}

void MJActionArgs::Swap(MJActionArgs* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    cardsargs_.Swap(&other->cardsargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJActionArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJActionArgs_descriptor_;
  metadata.reflection = MJActionArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJActionNotifyACK::kActionsFieldNumber;
#endif  // !_MSC_VER

MJActionNotifyACK::MJActionNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJActionNotifyACK::InitAsDefaultInstance() {
}

MJActionNotifyACK::MJActionNotifyACK(const MJActionNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJActionNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJActionNotifyACK::~MJActionNotifyACK() {
  SharedDtor();
}

void MJActionNotifyACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJActionNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJActionNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJActionNotifyACK_descriptor_;
}

const MJActionNotifyACK& MJActionNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJActionNotifyACK* MJActionNotifyACK::default_instance_ = NULL;

MJActionNotifyACK* MJActionNotifyACK::New() const {
  return new MJActionNotifyACK;
}

void MJActionNotifyACK::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJActionNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.MJActionArgs actions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJActionNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.MJActionArgs actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJActionNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.MJActionArgs actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJActionNotifyACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.MJActionArgs actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJActionNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJActionNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJActionNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJActionNotifyACK::MergeFrom(const MJActionNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJActionNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJActionNotifyACK::CopyFrom(const MJActionNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJActionNotifyACK::IsInitialized() const {
  
  for (int i = 0; i < actions_size(); i++) {
    if (!this->actions(i).IsInitialized()) return false;
  }
  return true;
}

void MJActionNotifyACK::Swap(MJActionNotifyACK* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJActionNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJActionNotifyACK_descriptor_;
  metadata.reflection = MJActionNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJCountdownNotifyACK::kCountDownFieldNumber;
#endif  // !_MSC_VER

MJCountdownNotifyACK::MJCountdownNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJCountdownNotifyACK::InitAsDefaultInstance() {
  countdown_ = const_cast< ::rpc::MJCountDown*>(&::rpc::MJCountDown::default_instance());
}

MJCountdownNotifyACK::MJCountdownNotifyACK(const MJCountdownNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJCountdownNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  countdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJCountdownNotifyACK::~MJCountdownNotifyACK() {
  SharedDtor();
}

void MJCountdownNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete countdown_;
  }
}

void MJCountdownNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJCountdownNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJCountdownNotifyACK_descriptor_;
}

const MJCountdownNotifyACK& MJCountdownNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJCountdownNotifyACK* MJCountdownNotifyACK::default_instance_ = NULL;

MJCountdownNotifyACK* MJCountdownNotifyACK::New() const {
  return new MJCountdownNotifyACK;
}

void MJCountdownNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_countdown()) {
      if (countdown_ != NULL) countdown_->::rpc::MJCountDown::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJCountdownNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.MJCountDown countDown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countdown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJCountdownNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.MJCountDown countDown = 1;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJCountdownNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.MJCountDown countDown = 1;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJCountdownNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.MJCountDown countDown = 1;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->countdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJCountdownNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJCountdownNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJCountdownNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJCountdownNotifyACK::MergeFrom(const MJCountdownNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countdown()) {
      mutable_countdown()->::rpc::MJCountDown::MergeFrom(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJCountdownNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJCountdownNotifyACK::CopyFrom(const MJCountdownNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJCountdownNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_countdown()) {
    if (!this->countdown().IsInitialized()) return false;
  }
  return true;
}

void MJCountdownNotifyACK::Swap(MJCountdownNotifyACK* other) {
  if (other != this) {
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJCountdownNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJCountdownNotifyACK_descriptor_;
  metadata.reflection = MJCountdownNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJRemoveCardNotifyACK::kPlayerIDFieldNumber;
const int MJRemoveCardNotifyACK::kIsRemoveHandCardFieldNumber;
const int MJRemoveCardNotifyACK::kCardFieldNumber;
#endif  // !_MSC_VER

MJRemoveCardNotifyACK::MJRemoveCardNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJRemoveCardNotifyACK::InitAsDefaultInstance() {
  card_ = const_cast< ::rpc::MJCard*>(&::rpc::MJCard::default_instance());
}

MJRemoveCardNotifyACK::MJRemoveCardNotifyACK(const MJRemoveCardNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJRemoveCardNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isremovehandcard_ = false;
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJRemoveCardNotifyACK::~MJRemoveCardNotifyACK() {
  SharedDtor();
}

void MJRemoveCardNotifyACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete card_;
  }
}

void MJRemoveCardNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJRemoveCardNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJRemoveCardNotifyACK_descriptor_;
}

const MJRemoveCardNotifyACK& MJRemoveCardNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJRemoveCardNotifyACK* MJRemoveCardNotifyACK::default_instance_ = NULL;

MJRemoveCardNotifyACK* MJRemoveCardNotifyACK::New() const {
  return new MJRemoveCardNotifyACK;
}

void MJRemoveCardNotifyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    isremovehandcard_ = false;
    if (has_card()) {
      if (card_ != NULL) card_->::rpc::MJCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJRemoveCardNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isRemoveHandCard;
        break;
      }
      
      // required bool isRemoveHandCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRemoveHandCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isremovehandcard_)));
          set_has_isremovehandcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }
      
      // required .rpc.MJCard card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJRemoveCardNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required bool isRemoveHandCard = 2;
  if (has_isremovehandcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isremovehandcard(), output);
  }
  
  // required .rpc.MJCard card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJRemoveCardNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required bool isRemoveHandCard = 2;
  if (has_isremovehandcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isremovehandcard(), target);
  }
  
  // required .rpc.MJCard card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJRemoveCardNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isRemoveHandCard = 2;
    if (has_isremovehandcard()) {
      total_size += 1 + 1;
    }
    
    // required .rpc.MJCard card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJRemoveCardNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJRemoveCardNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJRemoveCardNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJRemoveCardNotifyACK::MergeFrom(const MJRemoveCardNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isremovehandcard()) {
      set_isremovehandcard(from.isremovehandcard());
    }
    if (from.has_card()) {
      mutable_card()->::rpc::MJCard::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJRemoveCardNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJRemoveCardNotifyACK::CopyFrom(const MJRemoveCardNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJRemoveCardNotifyACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_card()) {
    if (!this->card().IsInitialized()) return false;
  }
  return true;
}

void MJRemoveCardNotifyACK::Swap(MJRemoveCardNotifyACK* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(isremovehandcard_, other->isremovehandcard_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJRemoveCardNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJRemoveCardNotifyACK_descriptor_;
  metadata.reflection = MJRemoveCardNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJTieGuiREQ::kBTieGuiFieldNumber;
const int MJTieGuiREQ::kPlayerIDFieldNumber;
const int MJTieGuiREQ::kSysTypeFieldNumber;
#endif  // !_MSC_VER

MJTieGuiREQ::MJTieGuiREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJTieGuiREQ::InitAsDefaultInstance() {
}

MJTieGuiREQ::MJTieGuiREQ(const MJTieGuiREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJTieGuiREQ::SharedCtor() {
  _cached_size_ = 0;
  btiegui_ = false;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJTieGuiREQ::~MJTieGuiREQ() {
  SharedDtor();
}

void MJTieGuiREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void MJTieGuiREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJTieGuiREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJTieGuiREQ_descriptor_;
}

const MJTieGuiREQ& MJTieGuiREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJTieGuiREQ* MJTieGuiREQ::default_instance_ = NULL;

MJTieGuiREQ* MJTieGuiREQ::New() const {
  return new MJTieGuiREQ;
}

void MJTieGuiREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btiegui_ = false;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    systype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJTieGuiREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bTieGui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btiegui_)));
          set_has_btiegui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerID;
        break;
      }
      
      // required string playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sysType;
        break;
      }
      
      // required int32 sysType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systype_)));
          set_has_systype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJTieGuiREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool bTieGui = 1;
  if (has_btiegui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->btiegui(), output);
  }
  
  // required string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playerid(), output);
  }
  
  // required int32 sysType = 6;
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->systype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJTieGuiREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool bTieGui = 1;
  if (has_btiegui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->btiegui(), target);
  }
  
  // required string playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }
  
  // required int32 sysType = 6;
  if (has_systype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->systype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJTieGuiREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bTieGui = 1;
    if (has_btiegui()) {
      total_size += 1 + 1;
    }
    
    // required string playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int32 sysType = 6;
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJTieGuiREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJTieGuiREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJTieGuiREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJTieGuiREQ::MergeFrom(const MJTieGuiREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btiegui()) {
      set_btiegui(from.btiegui());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_systype()) {
      set_systype(from.systype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJTieGuiREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJTieGuiREQ::CopyFrom(const MJTieGuiREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJTieGuiREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MJTieGuiREQ::Swap(MJTieGuiREQ* other) {
  if (other != this) {
    std::swap(btiegui_, other->btiegui_);
    std::swap(playerid_, other->playerid_);
    std::swap(systype_, other->systype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJTieGuiREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJTieGuiREQ_descriptor_;
  metadata.reflection = MJTieGuiREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJMingTang::kMingTangFieldNumber;
const int MJMingTang::kValueFieldNumber;
#endif  // !_MSC_VER

MJMingTang::MJMingTang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJMingTang::InitAsDefaultInstance() {
}

MJMingTang::MJMingTang(const MJMingTang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJMingTang::SharedCtor() {
  _cached_size_ = 0;
  mingtang_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJMingTang::~MJMingTang() {
  SharedDtor();
}

void MJMingTang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJMingTang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJMingTang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJMingTang_descriptor_;
}

const MJMingTang& MJMingTang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJMingTang* MJMingTang::default_instance_ = NULL;

MJMingTang* MJMingTang::New() const {
  return new MJMingTang;
}

void MJMingTang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mingtang_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJMingTang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mingTang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingtang_)));
          set_has_mingtang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJMingTang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mingTang = 1;
  if (has_mingtang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mingtang(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJMingTang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mingTang = 1;
  if (has_mingtang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mingtang(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJMingTang::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mingTang = 1;
    if (has_mingtang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingtang());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJMingTang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJMingTang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJMingTang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJMingTang::MergeFrom(const MJMingTang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mingtang()) {
      set_mingtang(from.mingtang());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJMingTang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJMingTang::CopyFrom(const MJMingTang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJMingTang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MJMingTang::Swap(MJMingTang* other) {
  if (other != this) {
    std::swap(mingtang_, other->mingtang_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJMingTang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJMingTang_descriptor_;
  metadata.reflection = MJMingTang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJPlayerJieSuanInfo::kPlayerIDFieldNumber;
const int MJPlayerJieSuanInfo::kCoinFieldNumber;
const int MJPlayerJieSuanInfo::kPatternsFieldNumber;
const int MJPlayerJieSuanInfo::kMingTangFieldNumber;
const int MJPlayerJieSuanInfo::kTagFieldNumber;
#endif  // !_MSC_VER

MJPlayerJieSuanInfo::MJPlayerJieSuanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJPlayerJieSuanInfo::InitAsDefaultInstance() {
}

MJPlayerJieSuanInfo::MJPlayerJieSuanInfo(const MJPlayerJieSuanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJPlayerJieSuanInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coin_ = 0;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJPlayerJieSuanInfo::~MJPlayerJieSuanInfo() {
  SharedDtor();
}

void MJPlayerJieSuanInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void MJPlayerJieSuanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJPlayerJieSuanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJPlayerJieSuanInfo_descriptor_;
}

const MJPlayerJieSuanInfo& MJPlayerJieSuanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJPlayerJieSuanInfo* MJPlayerJieSuanInfo::default_instance_ = NULL;

MJPlayerJieSuanInfo* MJPlayerJieSuanInfo::New() const {
  return new MJPlayerJieSuanInfo;
}

void MJPlayerJieSuanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    coin_ = 0;
    tag_ = 0;
  }
  patterns_.Clear();
  mingtang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJPlayerJieSuanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }
      
      // optional int32 tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patterns;
        break;
      }
      
      // repeated .rpc.MJPattern patterns = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patterns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patterns;
        if (input->ExpectTag(82)) goto parse_mingTang;
        break;
      }
      
      // repeated .rpc.MJMingTang mingTang = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mingTang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mingtang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mingTang;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJPlayerJieSuanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin(), output);
  }
  
  // optional int32 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }
  
  // repeated .rpc.MJPattern patterns = 6;
  for (int i = 0; i < this->patterns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->patterns(i), output);
  }
  
  // repeated .rpc.MJMingTang mingTang = 10;
  for (int i = 0; i < this->mingtang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mingtang(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJPlayerJieSuanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin(), target);
  }
  
  // optional int32 tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag(), target);
  }
  
  // repeated .rpc.MJPattern patterns = 6;
  for (int i = 0; i < this->patterns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->patterns(i), target);
  }
  
  // repeated .rpc.MJMingTang mingTang = 10;
  for (int i = 0; i < this->mingtang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mingtang(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJPlayerJieSuanInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }
    
  }
  // repeated .rpc.MJPattern patterns = 6;
  total_size += 1 * this->patterns_size();
  for (int i = 0; i < this->patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patterns(i));
  }
  
  // repeated .rpc.MJMingTang mingTang = 10;
  total_size += 1 * this->mingtang_size();
  for (int i = 0; i < this->mingtang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mingtang(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJPlayerJieSuanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJPlayerJieSuanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJPlayerJieSuanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJPlayerJieSuanInfo::MergeFrom(const MJPlayerJieSuanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  patterns_.MergeFrom(from.patterns_);
  mingtang_.MergeFrom(from.mingtang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJPlayerJieSuanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJPlayerJieSuanInfo::CopyFrom(const MJPlayerJieSuanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJPlayerJieSuanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < patterns_size(); i++) {
    if (!this->patterns(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mingtang_size(); i++) {
    if (!this->mingtang(i).IsInitialized()) return false;
  }
  return true;
}

void MJPlayerJieSuanInfo::Swap(MJPlayerJieSuanInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(coin_, other->coin_);
    patterns_.Swap(&other->patterns_);
    mingtang_.Swap(&other->mingtang_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJPlayerJieSuanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJPlayerJieSuanInfo_descriptor_;
  metadata.reflection = MJPlayerJieSuanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJJieSuanNotifyACK::kPlayerJieSuanInfoFieldNumber;
const int MJJieSuanNotifyACK::kHuangZhuangFieldNumber;
const int MJJieSuanNotifyACK::kAddiFieldNumber;
#endif  // !_MSC_VER

MJJieSuanNotifyACK::MJJieSuanNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MJJieSuanNotifyACK::InitAsDefaultInstance() {
  addi_ = const_cast< ::rpc::JieSuanAdditionData*>(&::rpc::JieSuanAdditionData::default_instance());
}

MJJieSuanNotifyACK::MJJieSuanNotifyACK(const MJJieSuanNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MJJieSuanNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  huangzhuang_ = false;
  addi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJJieSuanNotifyACK::~MJJieSuanNotifyACK() {
  SharedDtor();
}

void MJJieSuanNotifyACK::SharedDtor() {
  if (this != default_instance_) {
    delete addi_;
  }
}

void MJJieSuanNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJJieSuanNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJJieSuanNotifyACK_descriptor_;
}

const MJJieSuanNotifyACK& MJJieSuanNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MJJieSuanNotifyACK* MJJieSuanNotifyACK::default_instance_ = NULL;

MJJieSuanNotifyACK* MJJieSuanNotifyACK::New() const {
  return new MJJieSuanNotifyACK;
}

void MJJieSuanNotifyACK::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    huangzhuang_ = false;
    if (has_addi()) {
      if (addi_ != NULL) addi_->::rpc::JieSuanAdditionData::Clear();
    }
  }
  playerjiesuaninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJJieSuanNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.MJPlayerJieSuanInfo playerJieSuanInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerJieSuanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerjiesuaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerJieSuanInfo;
        if (input->ExpectTag(72)) goto parse_huangZhuang;
        break;
      }
      
      // optional bool huangZhuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huangZhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &huangzhuang_)));
          set_has_huangzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_addi;
        break;
      }
      
      // optional .rpc.JieSuanAdditionData addi = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MJJieSuanNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.MJPlayerJieSuanInfo playerJieSuanInfo = 3;
  for (int i = 0; i < this->playerjiesuaninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerjiesuaninfo(i), output);
  }
  
  // optional bool huangZhuang = 9;
  if (has_huangzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->huangzhuang(), output);
  }
  
  // optional .rpc.JieSuanAdditionData addi = 11;
  if (has_addi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->addi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MJJieSuanNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.MJPlayerJieSuanInfo playerJieSuanInfo = 3;
  for (int i = 0; i < this->playerjiesuaninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerjiesuaninfo(i), target);
  }
  
  // optional bool huangZhuang = 9;
  if (has_huangzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->huangzhuang(), target);
  }
  
  // optional .rpc.JieSuanAdditionData addi = 11;
  if (has_addi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->addi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MJJieSuanNotifyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool huangZhuang = 9;
    if (has_huangzhuang()) {
      total_size += 1 + 1;
    }
    
    // optional .rpc.JieSuanAdditionData addi = 11;
    if (has_addi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addi());
    }
    
  }
  // repeated .rpc.MJPlayerJieSuanInfo playerJieSuanInfo = 3;
  total_size += 1 * this->playerjiesuaninfo_size();
  for (int i = 0; i < this->playerjiesuaninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerjiesuaninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJJieSuanNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJJieSuanNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJJieSuanNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJJieSuanNotifyACK::MergeFrom(const MJJieSuanNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerjiesuaninfo_.MergeFrom(from.playerjiesuaninfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_huangzhuang()) {
      set_huangzhuang(from.huangzhuang());
    }
    if (from.has_addi()) {
      mutable_addi()->::rpc::JieSuanAdditionData::MergeFrom(from.addi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJJieSuanNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJJieSuanNotifyACK::CopyFrom(const MJJieSuanNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJJieSuanNotifyACK::IsInitialized() const {
  
  for (int i = 0; i < playerjiesuaninfo_size(); i++) {
    if (!this->playerjiesuaninfo(i).IsInitialized()) return false;
  }
  if (has_addi()) {
    if (!this->addi().IsInitialized()) return false;
  }
  return true;
}

void MJJieSuanNotifyACK::Swap(MJJieSuanNotifyACK* other) {
  if (other != this) {
    playerjiesuaninfo_.Swap(&other->playerjiesuaninfo_);
    std::swap(huangzhuang_, other->huangzhuang_);
    std::swap(addi_, other->addi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJJieSuanNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJJieSuanNotifyACK_descriptor_;
  metadata.reflection = MJJieSuanNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomREQ::kCurrencyTypeFieldNumber;
const int CreateRoomREQ::kGameTypeFieldNumber;
const int CreateRoomREQ::kDifenFieldNumber;
const int CreateRoomREQ::kLimitCoinFieldNumber;
const int CreateRoomREQ::kTimesFieldNumber;
const int CreateRoomREQ::kMaxMultipleFieldNumber;
const int CreateRoomREQ::kIsDaiGuiFieldNumber;
const int CreateRoomREQ::kTiYongAmountFieldNumber;
const int CreateRoomREQ::kQiHuKeAmountFieldNumber;
#endif  // !_MSC_VER

CreateRoomREQ::CreateRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomREQ::InitAsDefaultInstance() {
}

CreateRoomREQ::CreateRoomREQ(const CreateRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  currencytype_ = 0;
  gametype_ = 0;
  difen_ = 0;
  limitcoin_ = 0;
  times_ = 0;
  maxmultiple_ = 0;
  isdaigui_ = false;
  tiyongamount_ = 0;
  qihukeamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomREQ::~CreateRoomREQ() {
  SharedDtor();
}

void CreateRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomREQ_descriptor_;
}

const CreateRoomREQ& CreateRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CreateRoomREQ* CreateRoomREQ::default_instance_ = NULL;

CreateRoomREQ* CreateRoomREQ::New() const {
  return new CreateRoomREQ;
}

void CreateRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currencytype_ = 0;
    gametype_ = 0;
    difen_ = 0;
    limitcoin_ = 0;
    times_ = 0;
    maxmultiple_ = 0;
    isdaigui_ = false;
    tiyongamount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qihukeamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currencyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameType;
        break;
      }
      
      // required int32 gameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difen;
        break;
      }
      
      // optional int32 difen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limitCoin;
        break;
      }
      
      // optional int32 limitCoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitcoin_)));
          set_has_limitcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }
      
      // optional int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxMultiple;
        break;
      }
      
      // required int32 maxMultiple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmultiple_)));
          set_has_maxmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isDaiGui;
        break;
      }
      
      // optional bool isDaiGui = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDaiGui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdaigui_)));
          set_has_isdaigui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tiYongAmount;
        break;
      }
      
      // optional int32 tiYongAmount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiYongAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiyongamount_)));
          set_has_tiyongamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_qiHuKeAmount;
        break;
      }
      
      // optional int32 qiHuKeAmount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qiHuKeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qihukeamount_)));
          set_has_qihukeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 currencyType = 1;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currencytype(), output);
  }
  
  // required int32 gameType = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gametype(), output);
  }
  
  // optional int32 difen = 4;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difen(), output);
  }
  
  // optional int32 limitCoin = 5;
  if (has_limitcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitcoin(), output);
  }
  
  // optional int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }
  
  // required int32 maxMultiple = 7;
  if (has_maxmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmultiple(), output);
  }
  
  // optional bool isDaiGui = 8;
  if (has_isdaigui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdaigui(), output);
  }
  
  // optional int32 tiYongAmount = 9;
  if (has_tiyongamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tiyongamount(), output);
  }
  
  // optional int32 qiHuKeAmount = 10;
  if (has_qihukeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qihukeamount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 currencyType = 1;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currencytype(), target);
  }
  
  // required int32 gameType = 2;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gametype(), target);
  }
  
  // optional int32 difen = 4;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difen(), target);
  }
  
  // optional int32 limitCoin = 5;
  if (has_limitcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitcoin(), target);
  }
  
  // optional int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }
  
  // required int32 maxMultiple = 7;
  if (has_maxmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmultiple(), target);
  }
  
  // optional bool isDaiGui = 8;
  if (has_isdaigui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdaigui(), target);
  }
  
  // optional int32 tiYongAmount = 9;
  if (has_tiyongamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tiyongamount(), target);
  }
  
  // optional int32 qiHuKeAmount = 10;
  if (has_qihukeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qihukeamount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 currencyType = 1;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }
    
    // required int32 gameType = 2;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
    // optional int32 difen = 4;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }
    
    // optional int32 limitCoin = 5;
    if (has_limitcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitcoin());
    }
    
    // optional int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // required int32 maxMultiple = 7;
    if (has_maxmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmultiple());
    }
    
    // optional bool isDaiGui = 8;
    if (has_isdaigui()) {
      total_size += 1 + 1;
    }
    
    // optional int32 tiYongAmount = 9;
    if (has_tiyongamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiyongamount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qiHuKeAmount = 10;
    if (has_qihukeamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qihukeamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomREQ::MergeFrom(const CreateRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_limitcoin()) {
      set_limitcoin(from.limitcoin());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_maxmultiple()) {
      set_maxmultiple(from.maxmultiple());
    }
    if (from.has_isdaigui()) {
      set_isdaigui(from.isdaigui());
    }
    if (from.has_tiyongamount()) {
      set_tiyongamount(from.tiyongamount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qihukeamount()) {
      set_qihukeamount(from.qihukeamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomREQ::CopyFrom(const CreateRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  return true;
}

void CreateRoomREQ::Swap(CreateRoomREQ* other) {
  if (other != this) {
    std::swap(currencytype_, other->currencytype_);
    std::swap(gametype_, other->gametype_);
    std::swap(difen_, other->difen_);
    std::swap(limitcoin_, other->limitcoin_);
    std::swap(times_, other->times_);
    std::swap(maxmultiple_, other->maxmultiple_);
    std::swap(isdaigui_, other->isdaigui_);
    std::swap(tiyongamount_, other->tiyongamount_);
    std::swap(qihukeamount_, other->qihukeamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomREQ_descriptor_;
  metadata.reflection = CreateRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kIdFieldNumber;
const int RoomInfo::kCurrencyTypeFieldNumber;
const int RoomInfo::kGameTypeFieldNumber;
const int RoomInfo::kDifenFieldNumber;
const int RoomInfo::kLimitCoinFieldNumber;
const int RoomInfo::kTimesFieldNumber;
const int RoomInfo::kMaxMultipleFieldNumber;
const int RoomInfo::kIsDaiGuiFieldNumber;
const int RoomInfo::kTiYongAmountFieldNumber;
const int RoomInfo::kQiHuKeAmountFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  currencytype_ = 0;
  gametype_ = 0;
  difen_ = 0;
  limitcoin_ = 0;
  times_ = 0;
  maxmultiple_ = 0;
  isdaigui_ = false;
  tiyongamount_ = 0;
  qihukeamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    currencytype_ = 0;
    gametype_ = 0;
    difen_ = 0;
    limitcoin_ = 0;
    times_ = 0;
    maxmultiple_ = 0;
    isdaigui_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tiyongamount_ = 0;
    qihukeamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currencyType;
        break;
      }
      
      // required int32 currencyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameType;
        break;
      }
      
      // required int32 gameType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difen;
        break;
      }
      
      // required int32 difen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limitCoin;
        break;
      }
      
      // required int32 limitCoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitcoin_)));
          set_has_limitcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }
      
      // required int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxMultiple;
        break;
      }
      
      // required int32 maxMultiple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmultiple_)));
          set_has_maxmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isDaiGui;
        break;
      }
      
      // optional bool isDaiGui = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDaiGui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdaigui_)));
          set_has_isdaigui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tiYongAmount;
        break;
      }
      
      // optional int32 tiYongAmount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiYongAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiyongamount_)));
          set_has_tiyongamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_qiHuKeAmount;
        break;
      }
      
      // optional int32 qiHuKeAmount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qiHuKeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qihukeamount_)));
          set_has_qihukeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 currencyType = 2;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currencytype(), output);
  }
  
  // required int32 gameType = 3;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gametype(), output);
  }
  
  // required int32 difen = 4;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difen(), output);
  }
  
  // required int32 limitCoin = 5;
  if (has_limitcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitcoin(), output);
  }
  
  // required int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }
  
  // required int32 maxMultiple = 7;
  if (has_maxmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmultiple(), output);
  }
  
  // optional bool isDaiGui = 8;
  if (has_isdaigui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdaigui(), output);
  }
  
  // optional int32 tiYongAmount = 9;
  if (has_tiyongamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tiyongamount(), output);
  }
  
  // optional int32 qiHuKeAmount = 10;
  if (has_qihukeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qihukeamount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 currencyType = 2;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currencytype(), target);
  }
  
  // required int32 gameType = 3;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gametype(), target);
  }
  
  // required int32 difen = 4;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difen(), target);
  }
  
  // required int32 limitCoin = 5;
  if (has_limitcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitcoin(), target);
  }
  
  // required int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }
  
  // required int32 maxMultiple = 7;
  if (has_maxmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmultiple(), target);
  }
  
  // optional bool isDaiGui = 8;
  if (has_isdaigui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdaigui(), target);
  }
  
  // optional int32 tiYongAmount = 9;
  if (has_tiyongamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tiyongamount(), target);
  }
  
  // optional int32 qiHuKeAmount = 10;
  if (has_qihukeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qihukeamount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 currencyType = 2;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }
    
    // required int32 gameType = 3;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
    // required int32 difen = 4;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }
    
    // required int32 limitCoin = 5;
    if (has_limitcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitcoin());
    }
    
    // required int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // required int32 maxMultiple = 7;
    if (has_maxmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmultiple());
    }
    
    // optional bool isDaiGui = 8;
    if (has_isdaigui()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tiYongAmount = 9;
    if (has_tiyongamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiyongamount());
    }
    
    // optional int32 qiHuKeAmount = 10;
    if (has_qihukeamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qihukeamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_limitcoin()) {
      set_limitcoin(from.limitcoin());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_maxmultiple()) {
      set_maxmultiple(from.maxmultiple());
    }
    if (from.has_isdaigui()) {
      set_isdaigui(from.isdaigui());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tiyongamount()) {
      set_tiyongamount(from.tiyongamount());
    }
    if (from.has_qihukeamount()) {
      set_qihukeamount(from.qihukeamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(gametype_, other->gametype_);
    std::swap(difen_, other->difen_);
    std::swap(limitcoin_, other->limitcoin_);
    std::swap(times_, other->times_);
    std::swap(maxmultiple_, other->maxmultiple_);
    std::swap(isdaigui_, other->isdaigui_);
    std::swap(tiyongamount_, other->tiyongamount_);
    std::swap(qihukeamount_, other->qihukeamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomACK::kRoomFieldNumber;
const int CreateRoomACK::kCodeFieldNumber;
#endif  // !_MSC_VER

CreateRoomACK::CreateRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomACK::InitAsDefaultInstance() {
  room_ = const_cast< ::rpc::RoomInfo*>(&::rpc::RoomInfo::default_instance());
}

CreateRoomACK::CreateRoomACK(const CreateRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomACK::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomACK::~CreateRoomACK() {
  SharedDtor();
}

void CreateRoomACK::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void CreateRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomACK_descriptor_;
}

const CreateRoomACK& CreateRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CreateRoomACK* CreateRoomACK::default_instance_ = NULL;

CreateRoomACK* CreateRoomACK::New() const {
  return new CreateRoomACK;
}

void CreateRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::rpc::RoomInfo::Clear();
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.RoomInfo room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.RoomInfo room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.RoomInfo room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.RoomInfo room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomACK::MergeFrom(const CreateRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::rpc::RoomInfo::MergeFrom(from.room());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomACK::CopyFrom(const CreateRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void CreateRoomACK::Swap(CreateRoomACK* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomACK_descriptor_;
  metadata.reflection = CreateRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomListREQ::RoomListREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListREQ::InitAsDefaultInstance() {
}

RoomListREQ::RoomListREQ(const RoomListREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListREQ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListREQ::~RoomListREQ() {
  SharedDtor();
}

void RoomListREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListREQ_descriptor_;
}

const RoomListREQ& RoomListREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RoomListREQ* RoomListREQ::default_instance_ = NULL;

RoomListREQ* RoomListREQ::New() const {
  return new RoomListREQ;
}

void RoomListREQ::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoomListREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListREQ::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListREQ::MergeFrom(const RoomListREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListREQ::CopyFrom(const RoomListREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListREQ::IsInitialized() const {
  
  return true;
}

void RoomListREQ::Swap(RoomListREQ* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListREQ_descriptor_;
  metadata.reflection = RoomListREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomListACK::kRoomListFieldNumber;
#endif  // !_MSC_VER

RoomListACK::RoomListACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListACK::InitAsDefaultInstance() {
}

RoomListACK::RoomListACK(const RoomListACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListACK::~RoomListACK() {
  SharedDtor();
}

void RoomListACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListACK_descriptor_;
}

const RoomListACK& RoomListACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

RoomListACK* RoomListACK::default_instance_ = NULL;

RoomListACK* RoomListACK::New() const {
  return new RoomListACK;
}

void RoomListACK::Clear() {
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.RoomInfo roomList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomListACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.RoomInfo roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.RoomInfo roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.RoomInfo roomList = 1;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListACK::MergeFrom(const RoomListACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListACK::CopyFrom(const RoomListACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListACK::IsInitialized() const {
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  return true;
}

void RoomListACK::Swap(RoomListACK* other) {
  if (other != this) {
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListACK_descriptor_;
  metadata.reflection = RoomListACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSanRoomREQ::kOperatorStatusFieldNumber;
#endif  // !_MSC_VER

JieSanRoomREQ::JieSanRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSanRoomREQ::InitAsDefaultInstance() {
}

JieSanRoomREQ::JieSanRoomREQ(const JieSanRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSanRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  operatorstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSanRoomREQ::~JieSanRoomREQ() {
  SharedDtor();
}

void JieSanRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JieSanRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSanRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSanRoomREQ_descriptor_;
}

const JieSanRoomREQ& JieSanRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSanRoomREQ* JieSanRoomREQ::default_instance_ = NULL;

JieSanRoomREQ* JieSanRoomREQ::New() const {
  return new JieSanRoomREQ;
}

void JieSanRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operatorstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSanRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operatorStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatorstatus_)));
          set_has_operatorstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSanRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operatorStatus = 3;
  if (has_operatorstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operatorstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSanRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operatorStatus = 3;
  if (has_operatorstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operatorstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSanRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operatorStatus = 3;
    if (has_operatorstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatorstatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSanRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSanRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSanRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSanRoomREQ::MergeFrom(const JieSanRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatorstatus()) {
      set_operatorstatus(from.operatorstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSanRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSanRoomREQ::CopyFrom(const JieSanRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSanRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void JieSanRoomREQ::Swap(JieSanRoomREQ* other) {
  if (other != this) {
    std::swap(operatorstatus_, other->operatorstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSanRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSanRoomREQ_descriptor_;
  metadata.reflection = JieSanRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSanPlayerInfo::kPlayerIDFieldNumber;
const int JieSanPlayerInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

JieSanPlayerInfo::JieSanPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSanPlayerInfo::InitAsDefaultInstance() {
}

JieSanPlayerInfo::JieSanPlayerInfo(const JieSanPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSanPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSanPlayerInfo::~JieSanPlayerInfo() {
  SharedDtor();
}

void JieSanPlayerInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void JieSanPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSanPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSanPlayerInfo_descriptor_;
}

const JieSanPlayerInfo& JieSanPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSanPlayerInfo* JieSanPlayerInfo::default_instance_ = NULL;

JieSanPlayerInfo* JieSanPlayerInfo::New() const {
  return new JieSanPlayerInfo;
}

void JieSanPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSanPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSanPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSanPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSanPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSanPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSanPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSanPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSanPlayerInfo::MergeFrom(const JieSanPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSanPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSanPlayerInfo::CopyFrom(const JieSanPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSanPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void JieSanPlayerInfo::Swap(JieSanPlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSanPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSanPlayerInfo_descriptor_;
  metadata.reflection = JieSanPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSanRoomNotify::kJieSanPlayerInfoFieldNumber;
const int JieSanRoomNotify::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

JieSanRoomNotify::JieSanRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSanRoomNotify::InitAsDefaultInstance() {
}

JieSanRoomNotify::JieSanRoomNotify(const JieSanRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSanRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSanRoomNotify::~JieSanRoomNotify() {
  SharedDtor();
}

void JieSanRoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JieSanRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSanRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSanRoomNotify_descriptor_;
}

const JieSanRoomNotify& JieSanRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSanRoomNotify* JieSanRoomNotify::default_instance_ = NULL;

JieSanRoomNotify* JieSanRoomNotify::New() const {
  return new JieSanRoomNotify;
}

void JieSanRoomNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    remaintime_ = 0;
  }
  jiesanplayerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSanRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jieSanPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jiesanplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jieSanPlayerInfo;
        if (input->ExpectTag(24)) goto parse_remainTime;
        break;
      }
      
      // required int32 remainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSanRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
  for (int i = 0; i < this->jiesanplayerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jiesanplayerinfo(i), output);
  }
  
  // required int32 remainTime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSanRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
  for (int i = 0; i < this->jiesanplayerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jiesanplayerinfo(i), target);
  }
  
  // required int32 remainTime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSanRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 remainTime = 3;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }
    
  }
  // repeated .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
  total_size += 1 * this->jiesanplayerinfo_size();
  for (int i = 0; i < this->jiesanplayerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jiesanplayerinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSanRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSanRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSanRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSanRoomNotify::MergeFrom(const JieSanRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  jiesanplayerinfo_.MergeFrom(from.jiesanplayerinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSanRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSanRoomNotify::CopyFrom(const JieSanRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSanRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < jiesanplayerinfo_size(); i++) {
    if (!this->jiesanplayerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void JieSanRoomNotify::Swap(JieSanRoomNotify* other) {
  if (other != this) {
    jiesanplayerinfo_.Swap(&other->jiesanplayerinfo_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSanRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSanRoomNotify_descriptor_;
  metadata.reflection = JieSanRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JieSanRoomUpdateStatusNotify::kJieSanPlayerInfoFieldNumber;
#endif  // !_MSC_VER

JieSanRoomUpdateStatusNotify::JieSanRoomUpdateStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JieSanRoomUpdateStatusNotify::InitAsDefaultInstance() {
  jiesanplayerinfo_ = const_cast< ::rpc::JieSanPlayerInfo*>(&::rpc::JieSanPlayerInfo::default_instance());
}

JieSanRoomUpdateStatusNotify::JieSanRoomUpdateStatusNotify(const JieSanRoomUpdateStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JieSanRoomUpdateStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  jiesanplayerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JieSanRoomUpdateStatusNotify::~JieSanRoomUpdateStatusNotify() {
  SharedDtor();
}

void JieSanRoomUpdateStatusNotify::SharedDtor() {
  if (this != default_instance_) {
    delete jiesanplayerinfo_;
  }
}

void JieSanRoomUpdateStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JieSanRoomUpdateStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JieSanRoomUpdateStatusNotify_descriptor_;
}

const JieSanRoomUpdateStatusNotify& JieSanRoomUpdateStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

JieSanRoomUpdateStatusNotify* JieSanRoomUpdateStatusNotify::default_instance_ = NULL;

JieSanRoomUpdateStatusNotify* JieSanRoomUpdateStatusNotify::New() const {
  return new JieSanRoomUpdateStatusNotify;
}

void JieSanRoomUpdateStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jiesanplayerinfo()) {
      if (jiesanplayerinfo_ != NULL) jiesanplayerinfo_->::rpc::JieSanPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JieSanRoomUpdateStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jiesanplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JieSanRoomUpdateStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
  if (has_jiesanplayerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jiesanplayerinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JieSanRoomUpdateStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
  if (has_jiesanplayerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jiesanplayerinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JieSanRoomUpdateStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.JieSanPlayerInfo jieSanPlayerInfo = 1;
    if (has_jiesanplayerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jiesanplayerinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JieSanRoomUpdateStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JieSanRoomUpdateStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JieSanRoomUpdateStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JieSanRoomUpdateStatusNotify::MergeFrom(const JieSanRoomUpdateStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jiesanplayerinfo()) {
      mutable_jiesanplayerinfo()->::rpc::JieSanPlayerInfo::MergeFrom(from.jiesanplayerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JieSanRoomUpdateStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JieSanRoomUpdateStatusNotify::CopyFrom(const JieSanRoomUpdateStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JieSanRoomUpdateStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_jiesanplayerinfo()) {
    if (!this->jiesanplayerinfo().IsInitialized()) return false;
  }
  return true;
}

void JieSanRoomUpdateStatusNotify::Swap(JieSanRoomUpdateStatusNotify* other) {
  if (other != this) {
    std::swap(jiesanplayerinfo_, other->jiesanplayerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JieSanRoomUpdateStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JieSanRoomUpdateStatusNotify_descriptor_;
  metadata.reflection = JieSanRoomUpdateStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterCustomRoomREQ::kGameTypeFieldNumber;
const int EnterCustomRoomREQ::kIdFieldNumber;
const int EnterCustomRoomREQ::kPwdFieldNumber;
#endif  // !_MSC_VER

EnterCustomRoomREQ::EnterCustomRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterCustomRoomREQ::InitAsDefaultInstance() {
}

EnterCustomRoomREQ::EnterCustomRoomREQ(const EnterCustomRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterCustomRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterCustomRoomREQ::~EnterCustomRoomREQ() {
  SharedDtor();
}

void EnterCustomRoomREQ::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void EnterCustomRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterCustomRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterCustomRoomREQ_descriptor_;
}

const EnterCustomRoomREQ& EnterCustomRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnterCustomRoomREQ* EnterCustomRoomREQ::default_instance_ = NULL;

EnterCustomRoomREQ* EnterCustomRoomREQ::New() const {
  return new EnterCustomRoomREQ;
}

void EnterCustomRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    id_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterCustomRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterCustomRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gametype(), output);
  }
  
  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterCustomRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gameType = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gametype(), target);
  }
  
  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterCustomRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameType = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterCustomRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterCustomRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterCustomRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterCustomRoomREQ::MergeFrom(const EnterCustomRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterCustomRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterCustomRoomREQ::CopyFrom(const EnterCustomRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterCustomRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EnterCustomRoomREQ::Swap(EnterCustomRoomREQ* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(id_, other->id_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterCustomRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterCustomRoomREQ_descriptor_;
  metadata.reflection = EnterCustomRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterCustomRoomACK::kPlayerInfoFieldNumber;
const int EnterCustomRoomACK::kShangjiaTypeFieldNumber;
const int EnterCustomRoomACK::kLocationFieldNumber;
const int EnterCustomRoomACK::kBReadyFieldNumber;
const int EnterCustomRoomACK::kCodeFieldNumber;
const int EnterCustomRoomACK::kRoomIdFieldNumber;
const int EnterCustomRoomACK::kGameTypeFieldNumber;
const int EnterCustomRoomACK::kTimesFieldNumber;
const int EnterCustomRoomACK::kCurTimesFieldNumber;
const int EnterCustomRoomACK::kIsOwnerFieldNumber;
const int EnterCustomRoomACK::kCurrencyTypeFieldNumber;
const int EnterCustomRoomACK::kDifenFieldNumber;
const int EnterCustomRoomACK::kQiHuKeAmountFieldNumber;
const int EnterCustomRoomACK::kTiYongAmountFieldNumber;
#endif  // !_MSC_VER

EnterCustomRoomACK::EnterCustomRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterCustomRoomACK::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::rpc::PlayerBaseInfo*>(&::rpc::PlayerBaseInfo::default_instance());
}

EnterCustomRoomACK::EnterCustomRoomACK(const EnterCustomRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterCustomRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  shangjiatype_ = 0;
  location_ = 0;
  bready_ = false;
  code_ = 0;
  roomid_ = 0;
  gametype_ = 0;
  times_ = 0;
  curtimes_ = 0;
  isowner_ = false;
  currencytype_ = 0;
  difen_ = 0;
  qihukeamount_ = 0;
  tiyongamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterCustomRoomACK::~EnterCustomRoomACK() {
  SharedDtor();
}

void EnterCustomRoomACK::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void EnterCustomRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterCustomRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterCustomRoomACK_descriptor_;
}

const EnterCustomRoomACK& EnterCustomRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnterCustomRoomACK* EnterCustomRoomACK::default_instance_ = NULL;

EnterCustomRoomACK* EnterCustomRoomACK::New() const {
  return new EnterCustomRoomACK;
}

void EnterCustomRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::rpc::PlayerBaseInfo::Clear();
    }
    shangjiatype_ = 0;
    location_ = 0;
    bready_ = false;
    code_ = 0;
    roomid_ = 0;
    gametype_ = 0;
    times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curtimes_ = 0;
    isowner_ = false;
    currencytype_ = 0;
    difen_ = 0;
    qihukeamount_ = 0;
    tiyongamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterCustomRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.PlayerBaseInfo playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shangjiaType;
        break;
      }
      
      // optional int32 shangjiaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangjiaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shangjiatype_)));
          set_has_shangjiatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bReady;
        break;
      }
      
      // optional bool bReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bready_)));
          set_has_bready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }
      
      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomId;
        break;
      }
      
      // optional int32 roomId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gameType;
        break;
      }
      
      // optional int32 gameType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }
      
      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curTimes;
        break;
      }
      
      // optional int32 curTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtimes_)));
          set_has_curtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isOwner;
        break;
      }
      
      // optional bool isOwner = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOwner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isowner_)));
          set_has_isowner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_currencyType;
        break;
      }
      
      // optional int32 currencyType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_difen;
        break;
      }
      
      // optional int32 difen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_qiHuKeAmount;
        break;
      }
      
      // optional int32 qiHuKeAmount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qiHuKeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qihukeamount_)));
          set_has_qihukeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tiYongAmount;
        break;
      }
      
      // optional int32 tiYongAmount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiYongAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiyongamount_)));
          set_has_tiyongamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_location;
        break;
      }
      
      // optional int32 location = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterCustomRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }
  
  // optional int32 shangjiaType = 2;
  if (has_shangjiatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shangjiatype(), output);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bready(), output);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }
  
  // optional int32 gameType = 6;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gametype(), output);
  }
  
  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }
  
  // optional int32 curTimes = 8;
  if (has_curtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curtimes(), output);
  }
  
  // optional bool isOwner = 9;
  if (has_isowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isowner(), output);
  }
  
  // optional int32 currencyType = 10;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->currencytype(), output);
  }
  
  // optional int32 difen = 11;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->difen(), output);
  }
  
  // optional int32 qiHuKeAmount = 12;
  if (has_qihukeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->qihukeamount(), output);
  }
  
  // optional int32 tiYongAmount = 13;
  if (has_tiyongamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tiyongamount(), output);
  }
  
  // optional int32 location = 20;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterCustomRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.PlayerBaseInfo playerInfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }
  
  // optional int32 shangjiaType = 2;
  if (has_shangjiatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shangjiatype(), target);
  }
  
  // optional bool bReady = 3;
  if (has_bready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bready(), target);
  }
  
  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }
  
  // optional int32 roomId = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }
  
  // optional int32 gameType = 6;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gametype(), target);
  }
  
  // optional int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }
  
  // optional int32 curTimes = 8;
  if (has_curtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curtimes(), target);
  }
  
  // optional bool isOwner = 9;
  if (has_isowner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isowner(), target);
  }
  
  // optional int32 currencyType = 10;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->currencytype(), target);
  }
  
  // optional int32 difen = 11;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->difen(), target);
  }
  
  // optional int32 qiHuKeAmount = 12;
  if (has_qihukeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->qihukeamount(), target);
  }
  
  // optional int32 tiYongAmount = 13;
  if (has_tiyongamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tiyongamount(), target);
  }
  
  // optional int32 location = 20;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterCustomRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.PlayerBaseInfo playerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }
    
    // optional int32 shangjiaType = 2;
    if (has_shangjiatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shangjiatype());
    }
    
    // optional int32 location = 20;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }
    
    // optional bool bReady = 3;
    if (has_bready()) {
      total_size += 1 + 1;
    }
    
    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional int32 roomId = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional int32 gameType = 6;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 curTimes = 8;
    if (has_curtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtimes());
    }
    
    // optional bool isOwner = 9;
    if (has_isowner()) {
      total_size += 1 + 1;
    }
    
    // optional int32 currencyType = 10;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }
    
    // optional int32 difen = 11;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }
    
    // optional int32 qiHuKeAmount = 12;
    if (has_qihukeamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qihukeamount());
    }
    
    // optional int32 tiYongAmount = 13;
    if (has_tiyongamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiyongamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterCustomRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterCustomRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterCustomRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterCustomRoomACK::MergeFrom(const EnterCustomRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::rpc::PlayerBaseInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_shangjiatype()) {
      set_shangjiatype(from.shangjiatype());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_bready()) {
      set_bready(from.bready());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curtimes()) {
      set_curtimes(from.curtimes());
    }
    if (from.has_isowner()) {
      set_isowner(from.isowner());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_qihukeamount()) {
      set_qihukeamount(from.qihukeamount());
    }
    if (from.has_tiyongamount()) {
      set_tiyongamount(from.tiyongamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterCustomRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterCustomRoomACK::CopyFrom(const EnterCustomRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterCustomRoomACK::IsInitialized() const {
  
  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void EnterCustomRoomACK::Swap(EnterCustomRoomACK* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(shangjiatype_, other->shangjiatype_);
    std::swap(location_, other->location_);
    std::swap(bready_, other->bready_);
    std::swap(code_, other->code_);
    std::swap(roomid_, other->roomid_);
    std::swap(gametype_, other->gametype_);
    std::swap(times_, other->times_);
    std::swap(curtimes_, other->curtimes_);
    std::swap(isowner_, other->isowner_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(difen_, other->difen_);
    std::swap(qihukeamount_, other->qihukeamount_);
    std::swap(tiyongamount_, other->tiyongamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterCustomRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterCustomRoomACK_descriptor_;
  metadata.reflection = EnterCustomRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveCustomRoomREQ::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

LeaveCustomRoomREQ::LeaveCustomRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveCustomRoomREQ::InitAsDefaultInstance() {
}

LeaveCustomRoomREQ::LeaveCustomRoomREQ(const LeaveCustomRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveCustomRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveCustomRoomREQ::~LeaveCustomRoomREQ() {
  SharedDtor();
}

void LeaveCustomRoomREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void LeaveCustomRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveCustomRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveCustomRoomREQ_descriptor_;
}

const LeaveCustomRoomREQ& LeaveCustomRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LeaveCustomRoomREQ* LeaveCustomRoomREQ::default_instance_ = NULL;

LeaveCustomRoomREQ* LeaveCustomRoomREQ::New() const {
  return new LeaveCustomRoomREQ;
}

void LeaveCustomRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveCustomRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveCustomRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveCustomRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveCustomRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveCustomRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveCustomRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveCustomRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveCustomRoomREQ::MergeFrom(const LeaveCustomRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveCustomRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveCustomRoomREQ::CopyFrom(const LeaveCustomRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveCustomRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveCustomRoomREQ::Swap(LeaveCustomRoomREQ* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveCustomRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveCustomRoomREQ_descriptor_;
  metadata.reflection = LeaveCustomRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveCustomRoomACK::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

LeaveCustomRoomACK::LeaveCustomRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveCustomRoomACK::InitAsDefaultInstance() {
}

LeaveCustomRoomACK::LeaveCustomRoomACK(const LeaveCustomRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveCustomRoomACK::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveCustomRoomACK::~LeaveCustomRoomACK() {
  SharedDtor();
}

void LeaveCustomRoomACK::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void LeaveCustomRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveCustomRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveCustomRoomACK_descriptor_;
}

const LeaveCustomRoomACK& LeaveCustomRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LeaveCustomRoomACK* LeaveCustomRoomACK::default_instance_ = NULL;

LeaveCustomRoomACK* LeaveCustomRoomACK::New() const {
  return new LeaveCustomRoomACK;
}

void LeaveCustomRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveCustomRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveCustomRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveCustomRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveCustomRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveCustomRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveCustomRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveCustomRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveCustomRoomACK::MergeFrom(const LeaveCustomRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveCustomRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveCustomRoomACK::CopyFrom(const LeaveCustomRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveCustomRoomACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveCustomRoomACK::Swap(LeaveCustomRoomACK* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveCustomRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveCustomRoomACK_descriptor_;
  metadata.reflection = LeaveCustomRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindRoomREQ::kIdFieldNumber;
const int FindRoomREQ::kNameFieldNumber;
#endif  // !_MSC_VER

FindRoomREQ::FindRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindRoomREQ::InitAsDefaultInstance() {
}

FindRoomREQ::FindRoomREQ(const FindRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindRoomREQ::~FindRoomREQ() {
  SharedDtor();
}

void FindRoomREQ::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FindRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindRoomREQ_descriptor_;
}

const FindRoomREQ& FindRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FindRoomREQ* FindRoomREQ::default_instance_ = NULL;

FindRoomREQ* FindRoomREQ::New() const {
  return new FindRoomREQ;
}

void FindRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindRoomREQ::MergeFrom(const FindRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindRoomREQ::CopyFrom(const FindRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindRoomREQ::IsInitialized() const {
  
  return true;
}

void FindRoomREQ::Swap(FindRoomREQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindRoomREQ_descriptor_;
  metadata.reflection = FindRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindRoomACK::kRoomFieldNumber;
const int FindRoomACK::kCodeFieldNumber;
#endif  // !_MSC_VER

FindRoomACK::FindRoomACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindRoomACK::InitAsDefaultInstance() {
  room_ = const_cast< ::rpc::RoomInfo*>(&::rpc::RoomInfo::default_instance());
}

FindRoomACK::FindRoomACK(const FindRoomACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindRoomACK::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindRoomACK::~FindRoomACK() {
  SharedDtor();
}

void FindRoomACK::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void FindRoomACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindRoomACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindRoomACK_descriptor_;
}

const FindRoomACK& FindRoomACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

FindRoomACK* FindRoomACK::default_instance_ = NULL;

FindRoomACK* FindRoomACK::New() const {
  return new FindRoomACK;
}

void FindRoomACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::rpc::RoomInfo::Clear();
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindRoomACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.RoomInfo room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindRoomACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.RoomInfo room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindRoomACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.RoomInfo room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindRoomACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.RoomInfo room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindRoomACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindRoomACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindRoomACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindRoomACK::MergeFrom(const FindRoomACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::rpc::RoomInfo::MergeFrom(from.room());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindRoomACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindRoomACK::CopyFrom(const FindRoomACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindRoomACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void FindRoomACK::Swap(FindRoomACK* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindRoomACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindRoomACK_descriptor_;
  metadata.reflection = FindRoomACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceLeaveRoomREQ::kIdFieldNumber;
const int ForceLeaveRoomREQ::kSysTypeFieldNumber;
const int ForceLeaveRoomREQ::kGameTypeFieldNumber;
#endif  // !_MSC_VER

ForceLeaveRoomREQ::ForceLeaveRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceLeaveRoomREQ::InitAsDefaultInstance() {
}

ForceLeaveRoomREQ::ForceLeaveRoomREQ(const ForceLeaveRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceLeaveRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systype_ = 0;
  gametype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceLeaveRoomREQ::~ForceLeaveRoomREQ() {
  SharedDtor();
}

void ForceLeaveRoomREQ::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ForceLeaveRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceLeaveRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceLeaveRoomREQ_descriptor_;
}

const ForceLeaveRoomREQ& ForceLeaveRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ForceLeaveRoomREQ* ForceLeaveRoomREQ::default_instance_ = NULL;

ForceLeaveRoomREQ* ForceLeaveRoomREQ::New() const {
  return new ForceLeaveRoomREQ;
}

void ForceLeaveRoomREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    systype_ = 0;
    gametype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceLeaveRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sysType;
        break;
      }
      
      // required int32 sysType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systype_)));
          set_has_systype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameType;
        break;
      }
      
      // required int32 gameType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceLeaveRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 sysType = 2;
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systype(), output);
  }
  
  // required int32 gameType = 3;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gametype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceLeaveRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 sysType = 2;
  if (has_systype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systype(), target);
  }
  
  // required int32 gameType = 3;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gametype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceLeaveRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 sysType = 2;
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systype());
    }
    
    // required int32 gameType = 3;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceLeaveRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceLeaveRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceLeaveRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceLeaveRoomREQ::MergeFrom(const ForceLeaveRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_systype()) {
      set_systype(from.systype());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceLeaveRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceLeaveRoomREQ::CopyFrom(const ForceLeaveRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceLeaveRoomREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ForceLeaveRoomREQ::Swap(ForceLeaveRoomREQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(systype_, other->systype_);
    std::swap(gametype_, other->gametype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceLeaveRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceLeaveRoomREQ_descriptor_;
  metadata.reflection = ForceLeaveRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteFirendsJionCustomRoomREQ::kPlayerIDFieldNumber;
const int InviteFirendsJionCustomRoomREQ::kCurrencyTypeFieldNumber;
#endif  // !_MSC_VER

InviteFirendsJionCustomRoomREQ::InviteFirendsJionCustomRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteFirendsJionCustomRoomREQ::InitAsDefaultInstance() {
}

InviteFirendsJionCustomRoomREQ::InviteFirendsJionCustomRoomREQ(const InviteFirendsJionCustomRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteFirendsJionCustomRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  currencytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFirendsJionCustomRoomREQ::~InviteFirendsJionCustomRoomREQ() {
  SharedDtor();
}

void InviteFirendsJionCustomRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteFirendsJionCustomRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFirendsJionCustomRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFirendsJionCustomRoomREQ_descriptor_;
}

const InviteFirendsJionCustomRoomREQ& InviteFirendsJionCustomRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

InviteFirendsJionCustomRoomREQ* InviteFirendsJionCustomRoomREQ::default_instance_ = NULL;

InviteFirendsJionCustomRoomREQ* InviteFirendsJionCustomRoomREQ::New() const {
  return new InviteFirendsJionCustomRoomREQ;
}

void InviteFirendsJionCustomRoomREQ::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    currencytype_ = 0;
  }
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFirendsJionCustomRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid(0).data(), this->playerid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerID;
        if (input->ExpectTag(16)) goto parse_currencyType;
        break;
      }
      
      // optional int32 currencyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFirendsJionCustomRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->playerid(i).data(), this->playerid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(i), output);
  }
  
  // optional int32 currencyType = 2;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currencytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFirendsJionCustomRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid(i).data(), this->playerid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->playerid(i), target);
  }
  
  // optional int32 currencyType = 2;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currencytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFirendsJionCustomRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 currencyType = 2;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }
    
  }
  // repeated string playerID = 1;
  total_size += 1 * this->playerid_size();
  for (int i = 0; i < this->playerid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->playerid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFirendsJionCustomRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFirendsJionCustomRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFirendsJionCustomRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFirendsJionCustomRoomREQ::MergeFrom(const InviteFirendsJionCustomRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFirendsJionCustomRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFirendsJionCustomRoomREQ::CopyFrom(const InviteFirendsJionCustomRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFirendsJionCustomRoomREQ::IsInitialized() const {
  
  return true;
}

void InviteFirendsJionCustomRoomREQ::Swap(InviteFirendsJionCustomRoomREQ* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFirendsJionCustomRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFirendsJionCustomRoomREQ_descriptor_;
  metadata.reflection = InviteFirendsJionCustomRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteFirendsJionCustomRoomNotify::kCodeFieldNumber;
const int InviteFirendsJionCustomRoomNotify::kGameTypeFieldNumber;
const int InviteFirendsJionCustomRoomNotify::kRoomIDFieldNumber;
const int InviteFirendsJionCustomRoomNotify::kInvitePlayerNameFieldNumber;
const int InviteFirendsJionCustomRoomNotify::kCurrencyTypeFieldNumber;
#endif  // !_MSC_VER

InviteFirendsJionCustomRoomNotify::InviteFirendsJionCustomRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteFirendsJionCustomRoomNotify::InitAsDefaultInstance() {
}

InviteFirendsJionCustomRoomNotify::InviteFirendsJionCustomRoomNotify(const InviteFirendsJionCustomRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteFirendsJionCustomRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomid_ = 0;
  inviteplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currencytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFirendsJionCustomRoomNotify::~InviteFirendsJionCustomRoomNotify() {
  SharedDtor();
}

void InviteFirendsJionCustomRoomNotify::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (inviteplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete inviteplayername_;
  }
  if (this != default_instance_) {
  }
}

void InviteFirendsJionCustomRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFirendsJionCustomRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFirendsJionCustomRoomNotify_descriptor_;
}

const InviteFirendsJionCustomRoomNotify& InviteFirendsJionCustomRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

InviteFirendsJionCustomRoomNotify* InviteFirendsJionCustomRoomNotify::default_instance_ = NULL;

InviteFirendsJionCustomRoomNotify* InviteFirendsJionCustomRoomNotify::New() const {
  return new InviteFirendsJionCustomRoomNotify;
}

void InviteFirendsJionCustomRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    roomid_ = 0;
    if (has_inviteplayername()) {
      if (inviteplayername_ != &::google::protobuf::internal::kEmptyString) {
        inviteplayername_->clear();
      }
    }
    currencytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFirendsJionCustomRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameType;
        break;
      }
      
      // optional string gameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }
      
      // optional int32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_invitePlayerName;
        break;
      }
      
      // optional string invitePlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitePlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviteplayername().data(), this->inviteplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currencyType;
        break;
      }
      
      // optional int32 currencyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFirendsJionCustomRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  // optional string gameType = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gametype(), output);
  }
  
  // optional int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }
  
  // optional string invitePlayerName = 4;
  if (has_inviteplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviteplayername().data(), this->inviteplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inviteplayername(), output);
  }
  
  // optional int32 currencyType = 5;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currencytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFirendsJionCustomRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  // optional string gameType = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gametype(), target);
  }
  
  // optional int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }
  
  // optional string invitePlayerName = 4;
  if (has_inviteplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviteplayername().data(), this->inviteplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inviteplayername(), target);
  }
  
  // optional int32 currencyType = 5;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currencytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFirendsJionCustomRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional string gameType = 2;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // optional int32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional string invitePlayerName = 4;
    if (has_inviteplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviteplayername());
    }
    
    // optional int32 currencyType = 5;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFirendsJionCustomRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFirendsJionCustomRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFirendsJionCustomRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFirendsJionCustomRoomNotify::MergeFrom(const InviteFirendsJionCustomRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_inviteplayername()) {
      set_inviteplayername(from.inviteplayername());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFirendsJionCustomRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFirendsJionCustomRoomNotify::CopyFrom(const InviteFirendsJionCustomRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFirendsJionCustomRoomNotify::IsInitialized() const {
  
  return true;
}

void InviteFirendsJionCustomRoomNotify::Swap(InviteFirendsJionCustomRoomNotify* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(inviteplayername_, other->inviteplayername_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFirendsJionCustomRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFirendsJionCustomRoomNotify_descriptor_;
  metadata.reflection = InviteFirendsJionCustomRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherPlayerInfo::kUserIDFieldNumber;
const int OtherPlayerInfo::kUserNameFieldNumber;
const int OtherPlayerInfo::kUserHeadIDFieldNumber;
const int OtherPlayerInfo::kUserwechatHeadURLFieldNumber;
const int OtherPlayerInfo::kWinNumFieldNumber;
const int OtherPlayerInfo::kLoseNumFieldNumber;
const int OtherPlayerInfo::kLvFieldNumber;
const int OtherPlayerInfo::kCoinFieldNumber;
#endif  // !_MSC_VER

OtherPlayerInfo::OtherPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherPlayerInfo::InitAsDefaultInstance() {
}

OtherPlayerInfo::OtherPlayerInfo(const OtherPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = 0;
  userheadid_ = 0;
  userwechatheadurl_ = 0;
  winnum_ = 0;
  losenum_ = 0;
  lv_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherPlayerInfo::~OtherPlayerInfo() {
  SharedDtor();
}

void OtherPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherPlayerInfo_descriptor_;
}

const OtherPlayerInfo& OtherPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OtherPlayerInfo* OtherPlayerInfo::default_instance_ = NULL;

OtherPlayerInfo* OtherPlayerInfo::New() const {
  return new OtherPlayerInfo;
}

void OtherPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    username_ = 0;
    userheadid_ = 0;
    userwechatheadurl_ = 0;
    winnum_ = 0;
    losenum_ = 0;
    lv_ = 0;
    coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userName;
        break;
      }
      
      // required int32 userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &username_)));
          set_has_username();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userHeadID;
        break;
      }
      
      // optional int32 userHeadID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userHeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userheadid_)));
          set_has_userheadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userwechatHeadURL;
        break;
      }
      
      // optional int32 userwechatHeadURL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userwechatHeadURL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userwechatheadurl_)));
          set_has_userwechatheadurl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winNum;
        break;
      }
      
      // optional int32 winNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseNum;
        break;
      }
      
      // optional int32 loseNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // required int32 userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->username(), output);
  }
  
  // optional int32 userHeadID = 3;
  if (has_userheadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userheadid(), output);
  }
  
  // optional int32 userwechatHeadURL = 4;
  if (has_userwechatheadurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userwechatheadurl(), output);
  }
  
  // optional int32 winNum = 5;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winnum(), output);
  }
  
  // optional int32 loseNum = 6;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->losenum(), output);
  }
  
  // optional int32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lv(), output);
  }
  
  // optional int32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // required int32 userName = 2;
  if (has_username()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->username(), target);
  }
  
  // optional int32 userHeadID = 3;
  if (has_userheadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userheadid(), target);
  }
  
  // optional int32 userwechatHeadURL = 4;
  if (has_userwechatheadurl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userwechatheadurl(), target);
  }
  
  // optional int32 winNum = 5;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winnum(), target);
  }
  
  // optional int32 loseNum = 6;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->losenum(), target);
  }
  
  // optional int32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lv(), target);
  }
  
  // optional int32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // required int32 userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->username());
    }
    
    // optional int32 userHeadID = 3;
    if (has_userheadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userheadid());
    }
    
    // optional int32 userwechatHeadURL = 4;
    if (has_userwechatheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userwechatheadurl());
    }
    
    // optional int32 winNum = 5;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }
    
    // optional int32 loseNum = 6;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losenum());
    }
    
    // optional int32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // optional int32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherPlayerInfo::MergeFrom(const OtherPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userheadid()) {
      set_userheadid(from.userheadid());
    }
    if (from.has_userwechatheadurl()) {
      set_userwechatheadurl(from.userwechatheadurl());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherPlayerInfo::CopyFrom(const OtherPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OtherPlayerInfo::Swap(OtherPlayerInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(userheadid_, other->userheadid_);
    std::swap(userwechatheadurl_, other->userwechatheadurl_);
    std::swap(winnum_, other->winnum_);
    std::swap(losenum_, other->losenum_);
    std::swap(lv_, other->lv_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherPlayerInfo_descriptor_;
  metadata.reflection = OtherPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherPlayerInfoREQ::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

OtherPlayerInfoREQ::OtherPlayerInfoREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherPlayerInfoREQ::InitAsDefaultInstance() {
}

OtherPlayerInfoREQ::OtherPlayerInfoREQ(const OtherPlayerInfoREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherPlayerInfoREQ::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherPlayerInfoREQ::~OtherPlayerInfoREQ() {
  SharedDtor();
}

void OtherPlayerInfoREQ::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void OtherPlayerInfoREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherPlayerInfoREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherPlayerInfoREQ_descriptor_;
}

const OtherPlayerInfoREQ& OtherPlayerInfoREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OtherPlayerInfoREQ* OtherPlayerInfoREQ::default_instance_ = NULL;

OtherPlayerInfoREQ* OtherPlayerInfoREQ::New() const {
  return new OtherPlayerInfoREQ;
}

void OtherPlayerInfoREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherPlayerInfoREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherPlayerInfoREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherPlayerInfoREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherPlayerInfoREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherPlayerInfoREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherPlayerInfoREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherPlayerInfoREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherPlayerInfoREQ::MergeFrom(const OtherPlayerInfoREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherPlayerInfoREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherPlayerInfoREQ::CopyFrom(const OtherPlayerInfoREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherPlayerInfoREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OtherPlayerInfoREQ::Swap(OtherPlayerInfoREQ* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherPlayerInfoREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherPlayerInfoREQ_descriptor_;
  metadata.reflection = OtherPlayerInfoREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchListREQ::MatchListREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchListREQ::InitAsDefaultInstance() {
}

MatchListREQ::MatchListREQ(const MatchListREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchListREQ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchListREQ::~MatchListREQ() {
  SharedDtor();
}

void MatchListREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchListREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchListREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchListREQ_descriptor_;
}

const MatchListREQ& MatchListREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MatchListREQ* MatchListREQ::default_instance_ = NULL;

MatchListREQ* MatchListREQ::New() const {
  return new MatchListREQ;
}

void MatchListREQ::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchListREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchListREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchListREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchListREQ::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchListREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchListREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchListREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchListREQ::MergeFrom(const MatchListREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchListREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchListREQ::CopyFrom(const MatchListREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchListREQ::IsInitialized() const {
  
  return true;
}

void MatchListREQ::Swap(MatchListREQ* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchListREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchListREQ_descriptor_;
  metadata.reflection = MatchListREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchListACK::kMatchesFieldNumber;
#endif  // !_MSC_VER

MatchListACK::MatchListACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchListACK::InitAsDefaultInstance() {
}

MatchListACK::MatchListACK(const MatchListACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchListACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchListACK::~MatchListACK() {
  SharedDtor();
}

void MatchListACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchListACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchListACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchListACK_descriptor_;
}

const MatchListACK& MatchListACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

MatchListACK* MatchListACK::default_instance_ = NULL;

MatchListACK* MatchListACK::New() const {
  return new MatchListACK;
}

void MatchListACK::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchListACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Match matches = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchListACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Match matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchListACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Match matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchListACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Match matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchListACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchListACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchListACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchListACK::MergeFrom(const MatchListACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchListACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchListACK::CopyFrom(const MatchListACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchListACK::IsInitialized() const {
  
  for (int i = 0; i < matches_size(); i++) {
    if (!this->matches(i).IsInitialized()) return false;
  }
  return true;
}

void MatchListACK::Swap(MatchListACK* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchListACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchListACK_descriptor_;
  metadata.reflection = MatchListACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match::kIdFieldNumber;
const int Match::kEnrollAmountFieldNumber;
const int Match::kCountdownFieldNumber;
#endif  // !_MSC_VER

Match::Match()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match::InitAsDefaultInstance() {
}

Match::Match(const Match& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  enrollamount_ = 0;
  countdown_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match::~Match() {
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Match* Match::default_instance_ = NULL;

Match* Match::New() const {
  return new Match;
}

void Match::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    enrollamount_ = 0;
    countdown_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enrollAmount;
        break;
      }
      
      // required int32 enrollAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enrollAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enrollamount_)));
          set_has_enrollamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_countdown;
        break;
      }
      
      // optional int64 countdown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 enrollAmount = 2;
  if (has_enrollamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enrollamount(), output);
  }
  
  // optional int64 countdown = 3;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->countdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 enrollAmount = 2;
  if (has_enrollamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enrollamount(), target);
  }
  
  // optional int64 countdown = 3;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->countdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 enrollAmount = 2;
    if (has_enrollamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enrollamount());
    }
    
    // optional int64 countdown = 3;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->countdown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enrollamount()) {
      set_enrollamount(from.enrollamount());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Match::Swap(Match* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enrollamount_, other->enrollamount_);
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnrollREQ::kIdFieldNumber;
#endif  // !_MSC_VER

EnrollREQ::EnrollREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnrollREQ::InitAsDefaultInstance() {
}

EnrollREQ::EnrollREQ(const EnrollREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnrollREQ::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnrollREQ::~EnrollREQ() {
  SharedDtor();
}

void EnrollREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnrollREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnrollREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnrollREQ_descriptor_;
}

const EnrollREQ& EnrollREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnrollREQ* EnrollREQ::default_instance_ = NULL;

EnrollREQ* EnrollREQ::New() const {
  return new EnrollREQ;
}

void EnrollREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnrollREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnrollREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnrollREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnrollREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnrollREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnrollREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnrollREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnrollREQ::MergeFrom(const EnrollREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnrollREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollREQ::CopyFrom(const EnrollREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnrollREQ::Swap(EnrollREQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnrollREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnrollREQ_descriptor_;
  metadata.reflection = EnrollREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnrollACK::kResultFieldNumber;
#endif  // !_MSC_VER

EnrollACK::EnrollACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnrollACK::InitAsDefaultInstance() {
}

EnrollACK::EnrollACK(const EnrollACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnrollACK::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnrollACK::~EnrollACK() {
  SharedDtor();
}

void EnrollACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnrollACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnrollACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnrollACK_descriptor_;
}

const EnrollACK& EnrollACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

EnrollACK* EnrollACK::default_instance_ = NULL;

EnrollACK* EnrollACK::New() const {
  return new EnrollACK;
}

void EnrollACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnrollACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnrollACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnrollACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnrollACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnrollACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnrollACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnrollACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnrollACK::MergeFrom(const EnrollACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnrollACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollACK::CopyFrom(const EnrollACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnrollACK::Swap(EnrollACK* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnrollACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnrollACK_descriptor_;
  metadata.reflection = EnrollACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithdrawREQ::kIdFieldNumber;
#endif  // !_MSC_VER

WithdrawREQ::WithdrawREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawREQ::InitAsDefaultInstance() {
}

WithdrawREQ::WithdrawREQ(const WithdrawREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawREQ::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawREQ::~WithdrawREQ() {
  SharedDtor();
}

void WithdrawREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WithdrawREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawREQ_descriptor_;
}

const WithdrawREQ& WithdrawREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

WithdrawREQ* WithdrawREQ::default_instance_ = NULL;

WithdrawREQ* WithdrawREQ::New() const {
  return new WithdrawREQ;
}

void WithdrawREQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawREQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawREQ::MergeFrom(const WithdrawREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawREQ::CopyFrom(const WithdrawREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawREQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WithdrawREQ::Swap(WithdrawREQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawREQ_descriptor_;
  metadata.reflection = WithdrawREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithdrawACK::kResultFieldNumber;
#endif  // !_MSC_VER

WithdrawACK::WithdrawACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawACK::InitAsDefaultInstance() {
}

WithdrawACK::WithdrawACK(const WithdrawACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawACK::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawACK::~WithdrawACK() {
  SharedDtor();
}

void WithdrawACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WithdrawACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawACK_descriptor_;
}

const WithdrawACK& WithdrawACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

WithdrawACK* WithdrawACK::default_instance_ = NULL;

WithdrawACK* WithdrawACK::New() const {
  return new WithdrawACK;
}

void WithdrawACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawACK::MergeFrom(const WithdrawACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawACK::CopyFrom(const WithdrawACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WithdrawACK::Swap(WithdrawACK* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawACK_descriptor_;
  metadata.reflection = WithdrawACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AmountChangeNotifyACK::kMatchesFieldNumber;
#endif  // !_MSC_VER

AmountChangeNotifyACK::AmountChangeNotifyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AmountChangeNotifyACK::InitAsDefaultInstance() {
}

AmountChangeNotifyACK::AmountChangeNotifyACK(const AmountChangeNotifyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AmountChangeNotifyACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmountChangeNotifyACK::~AmountChangeNotifyACK() {
  SharedDtor();
}

void AmountChangeNotifyACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AmountChangeNotifyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmountChangeNotifyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmountChangeNotifyACK_descriptor_;
}

const AmountChangeNotifyACK& AmountChangeNotifyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

AmountChangeNotifyACK* AmountChangeNotifyACK::default_instance_ = NULL;

AmountChangeNotifyACK* AmountChangeNotifyACK::New() const {
  return new AmountChangeNotifyACK;
}

void AmountChangeNotifyACK::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmountChangeNotifyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Match matches = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmountChangeNotifyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Match matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmountChangeNotifyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Match matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmountChangeNotifyACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Match matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmountChangeNotifyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmountChangeNotifyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmountChangeNotifyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmountChangeNotifyACK::MergeFrom(const AmountChangeNotifyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmountChangeNotifyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmountChangeNotifyACK::CopyFrom(const AmountChangeNotifyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmountChangeNotifyACK::IsInitialized() const {
  
  for (int i = 0; i < matches_size(); i++) {
    if (!this->matches(i).IsInitialized()) return false;
  }
  return true;
}

void AmountChangeNotifyACK::Swap(AmountChangeNotifyACK* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmountChangeNotifyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmountChangeNotifyACK_descriptor_;
  metadata.reflection = AmountChangeNotifyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartEntranceACK::kMatchFieldNumber;
#endif  // !_MSC_VER

StartEntranceACK::StartEntranceACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartEntranceACK::InitAsDefaultInstance() {
  match_ = const_cast< ::rpc::Match*>(&::rpc::Match::default_instance());
}

StartEntranceACK::StartEntranceACK(const StartEntranceACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartEntranceACK::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEntranceACK::~StartEntranceACK() {
  SharedDtor();
}

void StartEntranceACK::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
  }
}

void StartEntranceACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartEntranceACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartEntranceACK_descriptor_;
}

const StartEntranceACK& StartEntranceACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

StartEntranceACK* StartEntranceACK::default_instance_ = NULL;

StartEntranceACK* StartEntranceACK::New() const {
  return new StartEntranceACK;
}

void StartEntranceACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_match()) {
      if (match_ != NULL) match_->::rpc::Match::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartEntranceACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.Match match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartEntranceACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.Match match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartEntranceACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.Match match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartEntranceACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.Match match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEntranceACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartEntranceACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartEntranceACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartEntranceACK::MergeFrom(const StartEntranceACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::rpc::Match::MergeFrom(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartEntranceACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartEntranceACK::CopyFrom(const StartEntranceACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEntranceACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_match()) {
    if (!this->match().IsInitialized()) return false;
  }
  return true;
}

void StartEntranceACK::Swap(StartEntranceACK* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartEntranceACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartEntranceACK_descriptor_;
  metadata.reflection = StartEntranceACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfoNofity::kPartnerIdFieldNumber;
const int OrderInfoNofity::kPrepayIdFieldNumber;
const int OrderInfoNofity::kPackageFieldNumber;
const int OrderInfoNofity::kNonceStrFieldNumber;
const int OrderInfoNofity::kTimeStampFieldNumber;
const int OrderInfoNofity::kSignFieldNumber;
const int OrderInfoNofity::kAppIdFieldNumber;
#endif  // !_MSC_VER

OrderInfoNofity::OrderInfoNofity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderInfoNofity::InitAsDefaultInstance() {
}

OrderInfoNofity::OrderInfoNofity(const OrderInfoNofity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderInfoNofity::SharedCtor() {
  _cached_size_ = 0;
  partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prepayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noncestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfoNofity::~OrderInfoNofity() {
  SharedDtor();
}

void OrderInfoNofity::SharedDtor() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (prepayid_ != &::google::protobuf::internal::kEmptyString) {
    delete prepayid_;
  }
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (noncestr_ != &::google::protobuf::internal::kEmptyString) {
    delete noncestr_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void OrderInfoNofity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfoNofity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfoNofity_descriptor_;
}

const OrderInfoNofity& OrderInfoNofity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

OrderInfoNofity* OrderInfoNofity::default_instance_ = NULL;

OrderInfoNofity* OrderInfoNofity::New() const {
  return new OrderInfoNofity;
}

void OrderInfoNofity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partnerid()) {
      if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
        partnerid_->clear();
      }
    }
    if (has_prepayid()) {
      if (prepayid_ != &::google::protobuf::internal::kEmptyString) {
        prepayid_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kEmptyString) {
        package_->clear();
      }
    }
    if (has_noncestr()) {
      if (noncestr_ != &::google::protobuf::internal::kEmptyString) {
        noncestr_->clear();
      }
    }
    timestamp_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderInfoNofity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string partnerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerid().data(), this->partnerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prepayId;
        break;
      }
      
      // optional string prepayId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepayId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prepayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prepayid().data(), this->prepayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_package;
        break;
      }
      
      // optional string package = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nonceStr;
        break;
      }
      
      // optional string nonceStr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nonceStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noncestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->noncestr().data(), this->noncestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeStamp;
        break;
      }
      
      // optional int32 timeStamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }
      
      // optional string sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_appId;
        break;
      }
      
      // optional string appId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderInfoNofity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string partnerId = 1;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->partnerid(), output);
  }
  
  // optional string prepayId = 2;
  if (has_prepayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prepayid().data(), this->prepayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prepayid(), output);
  }
  
  // optional string package = 3;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->package(), output);
  }
  
  // optional string nonceStr = 4;
  if (has_noncestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noncestr().data(), this->noncestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->noncestr(), output);
  }
  
  // optional int32 timeStamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timestamp(), output);
  }
  
  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sign(), output);
  }
  
  // optional string appId = 7;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->appid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderInfoNofity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string partnerId = 1;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partnerid(), target);
  }
  
  // optional string prepayId = 2;
  if (has_prepayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prepayid().data(), this->prepayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prepayid(), target);
  }
  
  // optional string package = 3;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->package(), target);
  }
  
  // optional string nonceStr = 4;
  if (has_noncestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noncestr().data(), this->noncestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->noncestr(), target);
  }
  
  // optional int32 timeStamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timestamp(), target);
  }
  
  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }
  
  // optional string appId = 7;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->appid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderInfoNofity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string partnerId = 1;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }
    
    // optional string prepayId = 2;
    if (has_prepayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prepayid());
    }
    
    // optional string package = 3;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }
    
    // optional string nonceStr = 4;
    if (has_noncestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noncestr());
    }
    
    // optional int32 timeStamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }
    
    // optional string appId = 7;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfoNofity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderInfoNofity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderInfoNofity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderInfoNofity::MergeFrom(const OrderInfoNofity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_prepayid()) {
      set_prepayid(from.prepayid());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_noncestr()) {
      set_noncestr(from.noncestr());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderInfoNofity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfoNofity::CopyFrom(const OrderInfoNofity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfoNofity::IsInitialized() const {
  
  return true;
}

void OrderInfoNofity::Swap(OrderInfoNofity* other) {
  if (other != this) {
    std::swap(partnerid_, other->partnerid_);
    std::swap(prepayid_, other->prepayid_);
    std::swap(package_, other->package_);
    std::swap(noncestr_, other->noncestr_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sign_, other->sign_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderInfoNofity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfoNofity_descriptor_;
  metadata.reflection = OrderInfoNofity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayResultNotify::kPartnerIdFieldNumber;
const int PayResultNotify::kResultFieldNumber;
const int PayResultNotify::kErrorDescFieldNumber;
const int PayResultNotify::kVipDayFieldNumber;
#endif  // !_MSC_VER

PayResultNotify::PayResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayResultNotify::InitAsDefaultInstance() {
}

PayResultNotify::PayResultNotify(const PayResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayResultNotify::SharedCtor() {
  _cached_size_ = 0;
  partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  error_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vipday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayResultNotify::~PayResultNotify() {
  SharedDtor();
}

void PayResultNotify::SharedDtor() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (error_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete error_desc_;
  }
  if (this != default_instance_) {
  }
}

void PayResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayResultNotify_descriptor_;
}

const PayResultNotify& PayResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PayResultNotify* PayResultNotify::default_instance_ = NULL;

PayResultNotify* PayResultNotify::New() const {
  return new PayResultNotify;
}

void PayResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partnerid()) {
      if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
        partnerid_->clear();
      }
    }
    result_ = false;
    if (has_error_desc()) {
      if (error_desc_ != &::google::protobuf::internal::kEmptyString) {
        error_desc_->clear();
      }
    }
    vipday_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string partnerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerid().data(), this->partnerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_desc;
        break;
      }
      
      // optional string error_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipDay;
        break;
      }
      
      // optional int32 vipDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipday_)));
          set_has_vipday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string partnerId = 1;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->partnerid(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional string error_desc = 3;
  if (has_error_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_desc(), output);
  }
  
  // optional int32 vipDay = 4;
  if (has_vipday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vipday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string partnerId = 1;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partnerid(), target);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional string error_desc = 3;
  if (has_error_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_desc(), target);
  }
  
  // optional int32 vipDay = 4;
  if (has_vipday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vipday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string partnerId = 1;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional string error_desc = 3;
    if (has_error_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_desc());
    }
    
    // optional int32 vipDay = 4;
    if (has_vipday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayResultNotify::MergeFrom(const PayResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_desc()) {
      set_error_desc(from.error_desc());
    }
    if (from.has_vipday()) {
      set_vipday(from.vipday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayResultNotify::CopyFrom(const PayResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayResultNotify::IsInitialized() const {
  
  return true;
}

void PayResultNotify::Swap(PayResultNotify* other) {
  if (other != this) {
    std::swap(partnerid_, other->partnerid_);
    std::swap(result_, other->result_);
    std::swap(error_desc_, other->error_desc_);
    std::swap(vipday_, other->vipday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayResultNotify_descriptor_;
  metadata.reflection = PayResultNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PokerQuickEnterRoomREQ::PokerQuickEnterRoomREQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PokerQuickEnterRoomREQ::InitAsDefaultInstance() {
}

PokerQuickEnterRoomREQ::PokerQuickEnterRoomREQ(const PokerQuickEnterRoomREQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PokerQuickEnterRoomREQ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerQuickEnterRoomREQ::~PokerQuickEnterRoomREQ() {
  SharedDtor();
}

void PokerQuickEnterRoomREQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerQuickEnterRoomREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokerQuickEnterRoomREQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerQuickEnterRoomREQ_descriptor_;
}

const PokerQuickEnterRoomREQ& PokerQuickEnterRoomREQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PokerQuickEnterRoomREQ* PokerQuickEnterRoomREQ::default_instance_ = NULL;

PokerQuickEnterRoomREQ* PokerQuickEnterRoomREQ::New() const {
  return new PokerQuickEnterRoomREQ;
}

void PokerQuickEnterRoomREQ::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerQuickEnterRoomREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PokerQuickEnterRoomREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PokerQuickEnterRoomREQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PokerQuickEnterRoomREQ::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerQuickEnterRoomREQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerQuickEnterRoomREQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PokerQuickEnterRoomREQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerQuickEnterRoomREQ::MergeFrom(const PokerQuickEnterRoomREQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerQuickEnterRoomREQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerQuickEnterRoomREQ::CopyFrom(const PokerQuickEnterRoomREQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerQuickEnterRoomREQ::IsInitialized() const {
  
  return true;
}

void PokerQuickEnterRoomREQ::Swap(PokerQuickEnterRoomREQ* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PokerQuickEnterRoomREQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokerQuickEnterRoomREQ_descriptor_;
  metadata.reflection = PokerQuickEnterRoomREQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePockerRoomReq::kUidFieldNumber;
const int CreatePockerRoomReq::kBlindIdFieldNumber;
const int CreatePockerRoomReq::kLimIdFieldNumber;
#endif  // !_MSC_VER

CreatePockerRoomReq::CreatePockerRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePockerRoomReq::InitAsDefaultInstance() {
}

CreatePockerRoomReq::CreatePockerRoomReq(const CreatePockerRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePockerRoomReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blindid_ = 0;
  limid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePockerRoomReq::~CreatePockerRoomReq() {
  SharedDtor();
}

void CreatePockerRoomReq::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CreatePockerRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePockerRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePockerRoomReq_descriptor_;
}

const CreatePockerRoomReq& CreatePockerRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CreatePockerRoomReq* CreatePockerRoomReq::default_instance_ = NULL;

CreatePockerRoomReq* CreatePockerRoomReq::New() const {
  return new CreatePockerRoomReq;
}

void CreatePockerRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    blindid_ = 0;
    limid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePockerRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BlindId;
        break;
      }
      
      // optional int32 BlindId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BlindId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blindid_)));
          set_has_blindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LimId;
        break;
      }
      
      // optional int32 LimId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limid_)));
          set_has_limid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePockerRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional int32 BlindId = 2;
  if (has_blindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blindid(), output);
  }
  
  // optional int32 LimId = 3;
  if (has_limid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePockerRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional int32 BlindId = 2;
  if (has_blindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blindid(), target);
  }
  
  // optional int32 LimId = 3;
  if (has_limid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePockerRoomReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional int32 BlindId = 2;
    if (has_blindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blindid());
    }
    
    // optional int32 LimId = 3;
    if (has_limid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePockerRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePockerRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePockerRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePockerRoomReq::MergeFrom(const CreatePockerRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_blindid()) {
      set_blindid(from.blindid());
    }
    if (from.has_limid()) {
      set_limid(from.limid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePockerRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePockerRoomReq::CopyFrom(const CreatePockerRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePockerRoomReq::IsInitialized() const {
  
  return true;
}

void CreatePockerRoomReq::Swap(CreatePockerRoomReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(blindid_, other->blindid_);
    std::swap(limid_, other->limid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePockerRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePockerRoomReq_descriptor_;
  metadata.reflection = CreatePockerRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePockerRoomAck::kRoomNoFieldNumber;
#endif  // !_MSC_VER

CreatePockerRoomAck::CreatePockerRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePockerRoomAck::InitAsDefaultInstance() {
}

CreatePockerRoomAck::CreatePockerRoomAck(const CreatePockerRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePockerRoomAck::SharedCtor() {
  _cached_size_ = 0;
  roomno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePockerRoomAck::~CreatePockerRoomAck() {
  SharedDtor();
}

void CreatePockerRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatePockerRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePockerRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePockerRoomAck_descriptor_;
}

const CreatePockerRoomAck& CreatePockerRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CreatePockerRoomAck* CreatePockerRoomAck::default_instance_ = NULL;

CreatePockerRoomAck* CreatePockerRoomAck::New() const {
  return new CreatePockerRoomAck;
}

void CreatePockerRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePockerRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomno_)));
          set_has_roomno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePockerRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomNo = 1;
  if (has_roomno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePockerRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomNo = 1;
  if (has_roomno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePockerRoomAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomNo = 1;
    if (has_roomno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePockerRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePockerRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePockerRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePockerRoomAck::MergeFrom(const CreatePockerRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomno()) {
      set_roomno(from.roomno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePockerRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePockerRoomAck::CopyFrom(const CreatePockerRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePockerRoomAck::IsInitialized() const {
  
  return true;
}

void CreatePockerRoomAck::Swap(CreatePockerRoomAck* other) {
  if (other != this) {
    std::swap(roomno_, other->roomno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePockerRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePockerRoomAck_descriptor_;
  metadata.reflection = CreatePockerRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SAction::kActFieldNumber;
const int C2SAction::kUidFieldNumber;
const int C2SAction::kRaiseFieldNumber;
const int C2SAction::kBaseFieldNumber;
#endif  // !_MSC_VER

C2SAction::C2SAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SAction::InitAsDefaultInstance() {
  base_ = const_cast< ::rpc::PlayerBaseInfo*>(&::rpc::PlayerBaseInfo::default_instance());
}

C2SAction::C2SAction(const C2SAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SAction::SharedCtor() {
  _cached_size_ = 0;
  act_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raise_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SAction::~C2SAction() {
  SharedDtor();
}

void C2SAction::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void C2SAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SAction_descriptor_;
}

const C2SAction& C2SAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

C2SAction* C2SAction::default_instance_ = NULL;

C2SAction* C2SAction::New() const {
  return new C2SAction;
}

void C2SAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    raise_ = 0;
    if (has_base()) {
      if (base_ != NULL) base_->::rpc::PlayerBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }
      
      // optional string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raise;
        break;
      }
      
      // optional int32 raise = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raise_)));
          set_has_raise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }
      
      // optional .rpc.PlayerBaseInfo base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act = 1;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act(), output);
  }
  
  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }
  
  // optional int32 raise = 3;
  if (has_raise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->raise(), output);
  }
  
  // optional .rpc.PlayerBaseInfo base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act = 1;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act(), target);
  }
  
  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }
  
  // optional int32 raise = 3;
  if (has_raise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->raise(), target);
  }
  
  // optional .rpc.PlayerBaseInfo base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act = 1;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act());
    }
    
    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional int32 raise = 3;
    if (has_raise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raise());
    }
    
    // optional .rpc.PlayerBaseInfo base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SAction::MergeFrom(const C2SAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_raise()) {
      set_raise(from.raise());
    }
    if (from.has_base()) {
      mutable_base()->::rpc::PlayerBaseInfo::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SAction::CopyFrom(const C2SAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SAction::IsInitialized() const {
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void C2SAction::Swap(C2SAction* other) {
  if (other != this) {
    std::swap(act_, other->act_);
    std::swap(uid_, other->uid_);
    std::swap(raise_, other->raise_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SAction_descriptor_;
  metadata.reflection = C2SAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CAction::kOperaterFieldNumber;
const int S2CAction::kActFieldNumber;
const int S2CAction::kRaiseFieldNumber;
const int S2CAction::kPockersFieldNumber;
const int S2CAction::kCombineNumFieldNumber;
const int S2CAction::kCountdownEndFieldNumber;
const int S2CAction::kPotsFieldNumber;
const int S2CAction::kWinnersFieldNumber;
const int S2CAction::kInfosFieldNumber;
const int S2CAction::kBeginInfoFieldNumber;
const int S2CAction::kComparePlayersFieldNumber;
#endif  // !_MSC_VER

S2CAction::S2CAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CAction::InitAsDefaultInstance() {
  begininfo_ = const_cast< ::rpc::PockerBegin*>(&::rpc::PockerBegin::default_instance());
}

S2CAction::S2CAction(const S2CAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CAction::SharedCtor() {
  _cached_size_ = 0;
  operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  act_ = 0;
  raise_ = 0;
  combinenum_ = 0;
  countdownend_ = 0;
  begininfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CAction::~S2CAction() {
  SharedDtor();
}

void S2CAction::SharedDtor() {
  if (operater_ != &::google::protobuf::internal::kEmptyString) {
    delete operater_;
  }
  if (this != default_instance_) {
    delete begininfo_;
  }
}

void S2CAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CAction_descriptor_;
}

const S2CAction& S2CAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

S2CAction* S2CAction::default_instance_ = NULL;

S2CAction* S2CAction::New() const {
  return new S2CAction;
}

void S2CAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operater()) {
      if (operater_ != &::google::protobuf::internal::kEmptyString) {
        operater_->clear();
      }
    }
    act_ = 0;
    raise_ = 0;
    combinenum_ = 0;
    countdownend_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_begininfo()) {
      if (begininfo_ != NULL) begininfo_->::rpc::PockerBegin::Clear();
    }
  }
  pockers_.Clear();
  pots_.Clear();
  winners_.Clear();
  infos_.Clear();
  compareplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operater = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operater().data(), this->operater().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act;
        break;
      }
      
      // optional int32 act = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raise;
        break;
      }
      
      // optional int32 raise = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raise_)));
          set_has_raise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pockers;
        break;
      }
      
      // repeated .rpc.Pocker pockers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pockers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pockers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pockers;
        if (input->ExpectTag(40)) goto parse_combineNum;
        break;
      }
      
      // optional int32 combineNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinenum_)));
          set_has_combinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_countdownEnd;
        break;
      }
      
      // optional int32 countdownEnd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countdownEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdownend_)));
          set_has_countdownend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pots;
        break;
      }
      
      // repeated int32 pots = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_pots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pots;
        if (input->ExpectTag(66)) goto parse_winners;
        break;
      }
      
      // repeated string winners = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_winners()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winners(0).data(), this->winners(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_winners;
        if (input->ExpectTag(74)) goto parse_infos;
        break;
      }
      
      // repeated .rpc.PockerManBase infos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_infos;
        if (input->ExpectTag(82)) goto parse_beginInfo;
        break;
      }
      
      // optional .rpc.PockerBegin beginInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beginInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_comparePlayers;
        break;
      }
      
      // repeated .rpc.ComparePokerPlayer comparePlayers = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comparePlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compareplayers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_comparePlayers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string operater = 1;
  if (has_operater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operater().data(), this->operater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->operater(), output);
  }
  
  // optional int32 act = 2;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->act(), output);
  }
  
  // optional int32 raise = 3;
  if (has_raise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->raise(), output);
  }
  
  // repeated .rpc.Pocker pockers = 4;
  for (int i = 0; i < this->pockers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pockers(i), output);
  }
  
  // optional int32 combineNum = 5;
  if (has_combinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->combinenum(), output);
  }
  
  // optional int32 countdownEnd = 6;
  if (has_countdownend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->countdownend(), output);
  }
  
  // repeated int32 pots = 7;
  for (int i = 0; i < this->pots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->pots(i), output);
  }
  
  // repeated string winners = 8;
  for (int i = 0; i < this->winners_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->winners(i).data(), this->winners(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->winners(i), output);
  }
  
  // repeated .rpc.PockerManBase infos = 9;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->infos(i), output);
  }
  
  // optional .rpc.PockerBegin beginInfo = 10;
  if (has_begininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->begininfo(), output);
  }
  
  // repeated .rpc.ComparePokerPlayer comparePlayers = 11;
  for (int i = 0; i < this->compareplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->compareplayers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string operater = 1;
  if (has_operater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operater().data(), this->operater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operater(), target);
  }
  
  // optional int32 act = 2;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->act(), target);
  }
  
  // optional int32 raise = 3;
  if (has_raise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->raise(), target);
  }
  
  // repeated .rpc.Pocker pockers = 4;
  for (int i = 0; i < this->pockers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pockers(i), target);
  }
  
  // optional int32 combineNum = 5;
  if (has_combinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->combinenum(), target);
  }
  
  // optional int32 countdownEnd = 6;
  if (has_countdownend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->countdownend(), target);
  }
  
  // repeated int32 pots = 7;
  for (int i = 0; i < this->pots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->pots(i), target);
  }
  
  // repeated string winners = 8;
  for (int i = 0; i < this->winners_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winners(i).data(), this->winners(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->winners(i), target);
  }
  
  // repeated .rpc.PockerManBase infos = 9;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->infos(i), target);
  }
  
  // optional .rpc.PockerBegin beginInfo = 10;
  if (has_begininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->begininfo(), target);
  }
  
  // repeated .rpc.ComparePokerPlayer comparePlayers = 11;
  for (int i = 0; i < this->compareplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->compareplayers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string operater = 1;
    if (has_operater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operater());
    }
    
    // optional int32 act = 2;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act());
    }
    
    // optional int32 raise = 3;
    if (has_raise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raise());
    }
    
    // optional int32 combineNum = 5;
    if (has_combinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinenum());
    }
    
    // optional int32 countdownEnd = 6;
    if (has_countdownend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdownend());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .rpc.PockerBegin beginInfo = 10;
    if (has_begininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begininfo());
    }
    
  }
  // repeated .rpc.Pocker pockers = 4;
  total_size += 1 * this->pockers_size();
  for (int i = 0; i < this->pockers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pockers(i));
  }
  
  // repeated int32 pots = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pots(i));
    }
    total_size += 1 * this->pots_size() + data_size;
  }
  
  // repeated string winners = 8;
  total_size += 1 * this->winners_size();
  for (int i = 0; i < this->winners_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->winners(i));
  }
  
  // repeated .rpc.PockerManBase infos = 9;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  // repeated .rpc.ComparePokerPlayer comparePlayers = 11;
  total_size += 1 * this->compareplayers_size();
  for (int i = 0; i < this->compareplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compareplayers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CAction::MergeFrom(const S2CAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  pockers_.MergeFrom(from.pockers_);
  pots_.MergeFrom(from.pots_);
  winners_.MergeFrom(from.winners_);
  infos_.MergeFrom(from.infos_);
  compareplayers_.MergeFrom(from.compareplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operater()) {
      set_operater(from.operater());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_raise()) {
      set_raise(from.raise());
    }
    if (from.has_combinenum()) {
      set_combinenum(from.combinenum());
    }
    if (from.has_countdownend()) {
      set_countdownend(from.countdownend());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_begininfo()) {
      mutable_begininfo()->::rpc::PockerBegin::MergeFrom(from.begininfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CAction::CopyFrom(const S2CAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CAction::IsInitialized() const {
  
  for (int i = 0; i < pockers_size(); i++) {
    if (!this->pockers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < compareplayers_size(); i++) {
    if (!this->compareplayers(i).IsInitialized()) return false;
  }
  return true;
}

void S2CAction::Swap(S2CAction* other) {
  if (other != this) {
    std::swap(operater_, other->operater_);
    std::swap(act_, other->act_);
    std::swap(raise_, other->raise_);
    pockers_.Swap(&other->pockers_);
    std::swap(combinenum_, other->combinenum_);
    std::swap(countdownend_, other->countdownend_);
    pots_.Swap(&other->pots_);
    winners_.Swap(&other->winners_);
    infos_.Swap(&other->infos_);
    std::swap(begininfo_, other->begininfo_);
    compareplayers_.Swap(&other->compareplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CAction_descriptor_;
  metadata.reflection = S2CAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComparePokerPlayer::kUidFieldNumber;
const int ComparePokerPlayer::kPockersFieldNumber;
const int ComparePokerPlayer::kCombinePockersFieldNumber;
const int ComparePokerPlayer::kCombineNumFieldNumber;
#endif  // !_MSC_VER

ComparePokerPlayer::ComparePokerPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComparePokerPlayer::InitAsDefaultInstance() {
}

ComparePokerPlayer::ComparePokerPlayer(const ComparePokerPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComparePokerPlayer::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComparePokerPlayer::~ComparePokerPlayer() {
  SharedDtor();
}

void ComparePokerPlayer::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void ComparePokerPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparePokerPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComparePokerPlayer_descriptor_;
}

const ComparePokerPlayer& ComparePokerPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ComparePokerPlayer* ComparePokerPlayer::default_instance_ = NULL;

ComparePokerPlayer* ComparePokerPlayer::New() const {
  return new ComparePokerPlayer;
}

void ComparePokerPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    combinenum_ = 0;
  }
  pockers_.Clear();
  combinepockers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComparePokerPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pockers;
        break;
      }
      
      // repeated .rpc.Pocker pockers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pockers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pockers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pockers;
        if (input->ExpectTag(26)) goto parse_combinePockers;
        break;
      }
      
      // repeated .rpc.Pocker combinePockers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinePockers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combinepockers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_combinePockers;
        if (input->ExpectTag(32)) goto parse_combineNum;
        break;
      }
      
      // optional int32 combineNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinenum_)));
          set_has_combinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComparePokerPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // repeated .rpc.Pocker pockers = 2;
  for (int i = 0; i < this->pockers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pockers(i), output);
  }
  
  // repeated .rpc.Pocker combinePockers = 3;
  for (int i = 0; i < this->combinepockers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->combinepockers(i), output);
  }
  
  // optional int32 combineNum = 4;
  if (has_combinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->combinenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComparePokerPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // repeated .rpc.Pocker pockers = 2;
  for (int i = 0; i < this->pockers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pockers(i), target);
  }
  
  // repeated .rpc.Pocker combinePockers = 3;
  for (int i = 0; i < this->combinepockers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->combinepockers(i), target);
  }
  
  // optional int32 combineNum = 4;
  if (has_combinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->combinenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComparePokerPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional int32 combineNum = 4;
    if (has_combinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinenum());
    }
    
  }
  // repeated .rpc.Pocker pockers = 2;
  total_size += 1 * this->pockers_size();
  for (int i = 0; i < this->pockers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pockers(i));
  }
  
  // repeated .rpc.Pocker combinePockers = 3;
  total_size += 1 * this->combinepockers_size();
  for (int i = 0; i < this->combinepockers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combinepockers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparePokerPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComparePokerPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComparePokerPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComparePokerPlayer::MergeFrom(const ComparePokerPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pockers_.MergeFrom(from.pockers_);
  combinepockers_.MergeFrom(from.combinepockers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_combinenum()) {
      set_combinenum(from.combinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComparePokerPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparePokerPlayer::CopyFrom(const ComparePokerPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparePokerPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < pockers_size(); i++) {
    if (!this->pockers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < combinepockers_size(); i++) {
    if (!this->combinepockers(i).IsInitialized()) return false;
  }
  return true;
}

void ComparePokerPlayer::Swap(ComparePokerPlayer* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    pockers_.Swap(&other->pockers_);
    combinepockers_.Swap(&other->combinepockers_);
    std::swap(combinenum_, other->combinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComparePokerPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComparePokerPlayer_descriptor_;
  metadata.reflection = ComparePokerPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PockerBegin::kDealerUidFieldNumber;
const int PockerBegin::kSmBlindUidFieldNumber;
const int PockerBegin::kBigBlindUidFieldNumber;
const int PockerBegin::kAttendUidsFieldNumber;
#endif  // !_MSC_VER

PockerBegin::PockerBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PockerBegin::InitAsDefaultInstance() {
}

PockerBegin::PockerBegin(const PockerBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PockerBegin::SharedCtor() {
  _cached_size_ = 0;
  dealeruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smblinduid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bigblinduid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PockerBegin::~PockerBegin() {
  SharedDtor();
}

void PockerBegin::SharedDtor() {
  if (dealeruid_ != &::google::protobuf::internal::kEmptyString) {
    delete dealeruid_;
  }
  if (smblinduid_ != &::google::protobuf::internal::kEmptyString) {
    delete smblinduid_;
  }
  if (bigblinduid_ != &::google::protobuf::internal::kEmptyString) {
    delete bigblinduid_;
  }
  if (this != default_instance_) {
  }
}

void PockerBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PockerBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PockerBegin_descriptor_;
}

const PockerBegin& PockerBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PockerBegin* PockerBegin::default_instance_ = NULL;

PockerBegin* PockerBegin::New() const {
  return new PockerBegin;
}

void PockerBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dealeruid()) {
      if (dealeruid_ != &::google::protobuf::internal::kEmptyString) {
        dealeruid_->clear();
      }
    }
    if (has_smblinduid()) {
      if (smblinduid_ != &::google::protobuf::internal::kEmptyString) {
        smblinduid_->clear();
      }
    }
    if (has_bigblinduid()) {
      if (bigblinduid_ != &::google::protobuf::internal::kEmptyString) {
        bigblinduid_->clear();
      }
    }
  }
  attenduids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PockerBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dealerUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealeruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealeruid().data(), this->dealeruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_smBlindUid;
        break;
      }
      
      // optional string smBlindUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smBlindUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smblinduid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->smblinduid().data(), this->smblinduid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bigBlindUid;
        break;
      }
      
      // optional string bigBlindUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigBlindUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigblinduid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bigblinduid().data(), this->bigblinduid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attendUids;
        break;
      }
      
      // repeated string attendUids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attendUids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attenduids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attenduids(0).data(), this->attenduids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attendUids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PockerBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dealerUid = 1;
  if (has_dealeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealeruid().data(), this->dealeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dealeruid(), output);
  }
  
  // optional string smBlindUid = 2;
  if (has_smblinduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smblinduid().data(), this->smblinduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->smblinduid(), output);
  }
  
  // optional string bigBlindUid = 3;
  if (has_bigblinduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bigblinduid().data(), this->bigblinduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bigblinduid(), output);
  }
  
  // repeated string attendUids = 4;
  for (int i = 0; i < this->attenduids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attenduids(i).data(), this->attenduids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attenduids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PockerBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dealerUid = 1;
  if (has_dealeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealeruid().data(), this->dealeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dealeruid(), target);
  }
  
  // optional string smBlindUid = 2;
  if (has_smblinduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smblinduid().data(), this->smblinduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->smblinduid(), target);
  }
  
  // optional string bigBlindUid = 3;
  if (has_bigblinduid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bigblinduid().data(), this->bigblinduid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bigblinduid(), target);
  }
  
  // repeated string attendUids = 4;
  for (int i = 0; i < this->attenduids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attenduids(i).data(), this->attenduids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->attenduids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PockerBegin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dealerUid = 1;
    if (has_dealeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealeruid());
    }
    
    // optional string smBlindUid = 2;
    if (has_smblinduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smblinduid());
    }
    
    // optional string bigBlindUid = 3;
    if (has_bigblinduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigblinduid());
    }
    
  }
  // repeated string attendUids = 4;
  total_size += 1 * this->attenduids_size();
  for (int i = 0; i < this->attenduids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attenduids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PockerBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PockerBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PockerBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PockerBegin::MergeFrom(const PockerBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  attenduids_.MergeFrom(from.attenduids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealeruid()) {
      set_dealeruid(from.dealeruid());
    }
    if (from.has_smblinduid()) {
      set_smblinduid(from.smblinduid());
    }
    if (from.has_bigblinduid()) {
      set_bigblinduid(from.bigblinduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PockerBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PockerBegin::CopyFrom(const PockerBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PockerBegin::IsInitialized() const {
  
  return true;
}

void PockerBegin::Swap(PockerBegin* other) {
  if (other != this) {
    std::swap(dealeruid_, other->dealeruid_);
    std::swap(smblinduid_, other->smblinduid_);
    std::swap(bigblinduid_, other->bigblinduid_);
    attenduids_.Swap(&other->attenduids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PockerBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PockerBegin_descriptor_;
  metadata.reflection = PockerBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CPockerManInfo::kHeaderUrlFieldNumber;
const int S2CPockerManInfo::kNameFieldNumber;
const int S2CPockerManInfo::kSexFieldNumber;
const int S2CPockerManInfo::kCoinFieldNumber;
const int S2CPockerManInfo::kGemFieldNumber;
const int S2CPockerManInfo::kRoleIdFieldNumber;
const int S2CPockerManInfo::kBestPockerFieldNumber;
const int S2CPockerManInfo::kLvFieldNumber;
#endif  // !_MSC_VER

S2CPockerManInfo::S2CPockerManInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CPockerManInfo::InitAsDefaultInstance() {
}

S2CPockerManInfo::S2CPockerManInfo(const S2CPockerManInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CPockerManInfo::SharedCtor() {
  _cached_size_ = 0;
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  coin_ = 0;
  gem_ = 0;
  roleid_ = 0;
  bestpocker_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CPockerManInfo::~S2CPockerManInfo() {
  SharedDtor();
}

void S2CPockerManInfo::SharedDtor() {
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void S2CPockerManInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CPockerManInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CPockerManInfo_descriptor_;
}

const S2CPockerManInfo& S2CPockerManInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

S2CPockerManInfo* S2CPockerManInfo::default_instance_ = NULL;

S2CPockerManInfo* S2CPockerManInfo::New() const {
  return new S2CPockerManInfo;
}

void S2CPockerManInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    coin_ = 0;
    gem_ = 0;
    roleid_ = 0;
    bestpocker_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CPockerManInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string headerUrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gem;
        break;
      }
      
      // optional int32 gem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleId;
        break;
      }
      
      // optional int32 roleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bestPocker;
        break;
      }
      
      // optional int32 bestPocker = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bestPocker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestpocker_)));
          set_has_bestpocker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CPockerManInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string headerUrl = 1;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->headerurl(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // optional int32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }
  
  // optional int32 gem = 5;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gem(), output);
  }
  
  // optional int32 roleId = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }
  
  // optional int32 bestPocker = 7;
  if (has_bestpocker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bestpocker(), output);
  }
  
  // optional int32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CPockerManInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string headerUrl = 1;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headerurl(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // optional int32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }
  
  // optional int32 gem = 5;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gem(), target);
  }
  
  // optional int32 roleId = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleid(), target);
  }
  
  // optional int32 bestPocker = 7;
  if (has_bestpocker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bestpocker(), target);
  }
  
  // optional int32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CPockerManInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string headerUrl = 1;
    if (has_headerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 gem = 5;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }
    
    // optional int32 roleId = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }
    
    // optional int32 bestPocker = 7;
    if (has_bestpocker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestpocker());
    }
    
    // optional int32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CPockerManInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CPockerManInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CPockerManInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CPockerManInfo::MergeFrom(const S2CPockerManInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_bestpocker()) {
      set_bestpocker(from.bestpocker());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CPockerManInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CPockerManInfo::CopyFrom(const S2CPockerManInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CPockerManInfo::IsInitialized() const {
  
  return true;
}

void S2CPockerManInfo::Swap(S2CPockerManInfo* other) {
  if (other != this) {
    std::swap(headerurl_, other->headerurl_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(coin_, other->coin_);
    std::swap(gem_, other->gem_);
    std::swap(roleid_, other->roleid_);
    std::swap(bestpocker_, other->bestpocker_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CPockerManInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CPockerManInfo_descriptor_;
  metadata.reflection = S2CPockerManInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PockerManBase::kUidFieldNumber;
const int PockerManBase::kHeaderUrlFieldNumber;
const int PockerManBase::kCoinFieldNumber;
const int PockerManBase::kDropsFieldNumber;
const int PockerManBase::kStatusFieldNumber;
const int PockerManBase::kPockersFieldNumber;
const int PockerManBase::kDeskIdxFieldNumber;
const int PockerManBase::kNickNameFieldNumber;
const int PockerManBase::kEndTimeFieldNumber;
const int PockerManBase::kSexFieldNumber;
#endif  // !_MSC_VER

PockerManBase::PockerManBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PockerManBase::InitAsDefaultInstance() {
}

PockerManBase::PockerManBase(const PockerManBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PockerManBase::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coin_ = 0;
  drops_ = 0;
  status_ = 0;
  deskidx_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PockerManBase::~PockerManBase() {
  SharedDtor();
}

void PockerManBase::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headerurl_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void PockerManBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PockerManBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PockerManBase_descriptor_;
}

const PockerManBase& PockerManBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PockerManBase* PockerManBase::default_instance_ = NULL;

PockerManBase* PockerManBase::New() const {
  return new PockerManBase;
}

void PockerManBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_headerurl()) {
      if (headerurl_ != &::google::protobuf::internal::kEmptyString) {
        headerurl_->clear();
      }
    }
    coin_ = 0;
    drops_ = 0;
    status_ = 0;
    deskidx_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    endtime_ = 0;
    sex_ = 0;
  }
  pockers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PockerManBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headerUrl;
        break;
      }
      
      // optional string headerUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headerurl().data(), this->headerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drops;
        break;
      }
      
      // optional int32 drops = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drops_)));
          set_has_drops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pockers;
        break;
      }
      
      // repeated .rpc.Pocker pockers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pockers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pockers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pockers;
        if (input->ExpectTag(56)) goto parse_deskIdx;
        break;
      }
      
      // optional int32 deskIdx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskidx_)));
          set_has_deskidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nickName;
        break;
      }
      
      // optional string nickName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PockerManBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string headerUrl = 2;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headerurl(), output);
  }
  
  // optional int32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }
  
  // optional int32 drops = 4;
  if (has_drops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->drops(), output);
  }
  
  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // repeated .rpc.Pocker pockers = 6;
  for (int i = 0; i < this->pockers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pockers(i), output);
  }
  
  // optional int32 deskIdx = 7;
  if (has_deskidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deskidx(), output);
  }
  
  // optional string nickName = 8;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nickname(), output);
  }
  
  // optional int32 endTime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->endtime(), output);
  }
  
  // optional int32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PockerManBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string headerUrl = 2;
  if (has_headerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headerurl().data(), this->headerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headerurl(), target);
  }
  
  // optional int32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }
  
  // optional int32 drops = 4;
  if (has_drops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->drops(), target);
  }
  
  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // repeated .rpc.Pocker pockers = 6;
  for (int i = 0; i < this->pockers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pockers(i), target);
  }
  
  // optional int32 deskIdx = 7;
  if (has_deskidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deskidx(), target);
  }
  
  // optional string nickName = 8;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nickname(), target);
  }
  
  // optional int32 endTime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->endtime(), target);
  }
  
  // optional int32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PockerManBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string headerUrl = 2;
    if (has_headerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headerurl());
    }
    
    // optional int32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 drops = 4;
    if (has_drops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drops());
    }
    
    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 deskIdx = 7;
    if (has_deskidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskidx());
    }
    
    // optional string nickName = 8;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 endTime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // optional int32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  // repeated .rpc.Pocker pockers = 6;
  total_size += 1 * this->pockers_size();
  for (int i = 0; i < this->pockers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pockers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PockerManBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PockerManBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PockerManBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PockerManBase::MergeFrom(const PockerManBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  pockers_.MergeFrom(from.pockers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_headerurl()) {
      set_headerurl(from.headerurl());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_drops()) {
      set_drops(from.drops());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_deskidx()) {
      set_deskidx(from.deskidx());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PockerManBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PockerManBase::CopyFrom(const PockerManBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PockerManBase::IsInitialized() const {
  
  for (int i = 0; i < pockers_size(); i++) {
    if (!this->pockers(i).IsInitialized()) return false;
  }
  return true;
}

void PockerManBase::Swap(PockerManBase* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(headerurl_, other->headerurl_);
    std::swap(coin_, other->coin_);
    std::swap(drops_, other->drops_);
    std::swap(status_, other->status_);
    pockers_.Swap(&other->pockers_);
    std::swap(deskidx_, other->deskidx_);
    std::swap(nickname_, other->nickname_);
    std::swap(endtime_, other->endtime_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PockerManBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PockerManBase_descriptor_;
  metadata.reflection = PockerManBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pocker::kETypeFieldNumber;
const int Pocker::kNumFieldNumber;
#endif  // !_MSC_VER

Pocker::Pocker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pocker::InitAsDefaultInstance() {
}

Pocker::Pocker(const Pocker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pocker::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pocker::~Pocker() {
  SharedDtor();
}

void Pocker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pocker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pocker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pocker_descriptor_;
}

const Pocker& Pocker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Pocker* Pocker::default_instance_ = NULL;

Pocker* Pocker::New() const {
  return new Pocker;
}

void Pocker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pocker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &etype_)));
          set_has_etype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pocker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->etype(), output);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pocker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->etype(), target);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pocker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etype());
    }
    
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pocker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pocker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pocker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pocker::MergeFrom(const Pocker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pocker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pocker::CopyFrom(const Pocker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pocker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Pocker::Swap(Pocker* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pocker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pocker_descriptor_;
  metadata.reflection = Pocker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PockerRoomBase::kPockersFieldNumber;
const int PockerRoomBase::kPotsFieldNumber;
const int PockerRoomBase::kDealerUidFieldNumber;
const int PockerRoomBase::kRoomIdFieldNumber;
const int PockerRoomBase::kSmallBlindFieldNumber;
const int PockerRoomBase::kBigBlindFieldNumber;
const int PockerRoomBase::kRoomNoFieldNumber;
#endif  // !_MSC_VER

PockerRoomBase::PockerRoomBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PockerRoomBase::InitAsDefaultInstance() {
}

PockerRoomBase::PockerRoomBase(const PockerRoomBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PockerRoomBase::SharedCtor() {
  _cached_size_ = 0;
  dealeruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomid_ = 0;
  smallblind_ = 0;
  bigblind_ = 0;
  roomno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PockerRoomBase::~PockerRoomBase() {
  SharedDtor();
}

void PockerRoomBase::SharedDtor() {
  if (dealeruid_ != &::google::protobuf::internal::kEmptyString) {
    delete dealeruid_;
  }
  if (this != default_instance_) {
  }
}

void PockerRoomBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PockerRoomBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PockerRoomBase_descriptor_;
}

const PockerRoomBase& PockerRoomBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PockerRoomBase* PockerRoomBase::default_instance_ = NULL;

PockerRoomBase* PockerRoomBase::New() const {
  return new PockerRoomBase;
}

void PockerRoomBase::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_dealeruid()) {
      if (dealeruid_ != &::google::protobuf::internal::kEmptyString) {
        dealeruid_->clear();
      }
    }
    roomid_ = 0;
    smallblind_ = 0;
    bigblind_ = 0;
    roomno_ = 0;
  }
  pockers_.Clear();
  pots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PockerRoomBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Pocker pockers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pockers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pockers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pockers;
        if (input->ExpectTag(16)) goto parse_pots;
        break;
      }
      
      // repeated int32 pots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pots;
        if (input->ExpectTag(26)) goto parse_dealerUid;
        break;
      }
      
      // optional string dealerUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealerUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealeruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealeruid().data(), this->dealeruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomId;
        break;
      }
      
      // optional int32 roomId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_smallBlind;
        break;
      }
      
      // optional int32 smallBlind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallblind_)));
          set_has_smallblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bigBlind;
        break;
      }
      
      // optional int32 bigBlind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigblind_)));
          set_has_bigblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomNo;
        break;
      }
      
      // optional int32 roomNo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomno_)));
          set_has_roomno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PockerRoomBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Pocker pockers = 1;
  for (int i = 0; i < this->pockers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pockers(i), output);
  }
  
  // repeated int32 pots = 2;
  for (int i = 0; i < this->pots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pots(i), output);
  }
  
  // optional string dealerUid = 3;
  if (has_dealeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealeruid().data(), this->dealeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dealeruid(), output);
  }
  
  // optional int32 roomId = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomid(), output);
  }
  
  // optional int32 smallBlind = 5;
  if (has_smallblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->smallblind(), output);
  }
  
  // optional int32 bigBlind = 6;
  if (has_bigblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bigblind(), output);
  }
  
  // optional int32 roomNo = 7;
  if (has_roomno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PockerRoomBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Pocker pockers = 1;
  for (int i = 0; i < this->pockers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pockers(i), target);
  }
  
  // repeated int32 pots = 2;
  for (int i = 0; i < this->pots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pots(i), target);
  }
  
  // optional string dealerUid = 3;
  if (has_dealeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealeruid().data(), this->dealeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dealeruid(), target);
  }
  
  // optional int32 roomId = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomid(), target);
  }
  
  // optional int32 smallBlind = 5;
  if (has_smallblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->smallblind(), target);
  }
  
  // optional int32 bigBlind = 6;
  if (has_bigblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bigblind(), target);
  }
  
  // optional int32 roomNo = 7;
  if (has_roomno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PockerRoomBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string dealerUid = 3;
    if (has_dealeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealeruid());
    }
    
    // optional int32 roomId = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional int32 smallBlind = 5;
    if (has_smallblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallblind());
    }
    
    // optional int32 bigBlind = 6;
    if (has_bigblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigblind());
    }
    
    // optional int32 roomNo = 7;
    if (has_roomno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomno());
    }
    
  }
  // repeated .rpc.Pocker pockers = 1;
  total_size += 1 * this->pockers_size();
  for (int i = 0; i < this->pockers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pockers(i));
  }
  
  // repeated int32 pots = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pots(i));
    }
    total_size += 1 * this->pots_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PockerRoomBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PockerRoomBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PockerRoomBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PockerRoomBase::MergeFrom(const PockerRoomBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  pockers_.MergeFrom(from.pockers_);
  pots_.MergeFrom(from.pots_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dealeruid()) {
      set_dealeruid(from.dealeruid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_smallblind()) {
      set_smallblind(from.smallblind());
    }
    if (from.has_bigblind()) {
      set_bigblind(from.bigblind());
    }
    if (from.has_roomno()) {
      set_roomno(from.roomno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PockerRoomBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PockerRoomBase::CopyFrom(const PockerRoomBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PockerRoomBase::IsInitialized() const {
  
  for (int i = 0; i < pockers_size(); i++) {
    if (!this->pockers(i).IsInitialized()) return false;
  }
  return true;
}

void PockerRoomBase::Swap(PockerRoomBase* other) {
  if (other != this) {
    pockers_.Swap(&other->pockers_);
    pots_.Swap(&other->pots_);
    std::swap(dealeruid_, other->dealeruid_);
    std::swap(roomid_, other->roomid_);
    std::swap(smallblind_, other->smallblind_);
    std::swap(bigblind_, other->bigblind_);
    std::swap(roomno_, other->roomno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PockerRoomBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PockerRoomBase_descriptor_;
  metadata.reflection = PockerRoomBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PockerRoomInfo::kPlayersFieldNumber;
const int PockerRoomInfo::kRoombaseFieldNumber;
const int PockerRoomInfo::kCodeFieldNumber;
#endif  // !_MSC_VER

PockerRoomInfo::PockerRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PockerRoomInfo::InitAsDefaultInstance() {
  roombase_ = const_cast< ::rpc::PockerRoomBase*>(&::rpc::PockerRoomBase::default_instance());
}

PockerRoomInfo::PockerRoomInfo(const PockerRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PockerRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roombase_ = NULL;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PockerRoomInfo::~PockerRoomInfo() {
  SharedDtor();
}

void PockerRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roombase_;
  }
}

void PockerRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PockerRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PockerRoomInfo_descriptor_;
}

const PockerRoomInfo& PockerRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

PockerRoomInfo* PockerRoomInfo::default_instance_ = NULL;

PockerRoomInfo* PockerRoomInfo::New() const {
  return new PockerRoomInfo;
}

void PockerRoomInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_roombase()) {
      if (roombase_ != NULL) roombase_->::rpc::PockerRoomBase::Clear();
    }
    code_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PockerRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.PockerManBase players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_roombase;
        break;
      }
      
      // optional .rpc.PockerRoomBase roombase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roombase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roombase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }
      
      // optional int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PockerRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.PockerManBase players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // optional .rpc.PockerRoomBase roombase = 2;
  if (has_roombase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roombase(), output);
  }
  
  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PockerRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.PockerManBase players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // optional .rpc.PockerRoomBase roombase = 2;
  if (has_roombase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roombase(), target);
  }
  
  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PockerRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rpc.PockerRoomBase roombase = 2;
    if (has_roombase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roombase());
    }
    
    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  // repeated .rpc.PockerManBase players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PockerRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PockerRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PockerRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PockerRoomInfo::MergeFrom(const PockerRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roombase()) {
      mutable_roombase()->::rpc::PockerRoomBase::MergeFrom(from.roombase());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PockerRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PockerRoomInfo::CopyFrom(const PockerRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PockerRoomInfo::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  if (has_roombase()) {
    if (!this->roombase().IsInitialized()) return false;
  }
  return true;
}

void PockerRoomInfo::Swap(PockerRoomInfo* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(roombase_, other->roombase_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PockerRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PockerRoomInfo_descriptor_;
  metadata.reflection = PockerRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeavePockerRoom::kUidFieldNumber;
#endif  // !_MSC_VER

LeavePockerRoom::LeavePockerRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeavePockerRoom::InitAsDefaultInstance() {
}

LeavePockerRoom::LeavePockerRoom(const LeavePockerRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeavePockerRoom::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeavePockerRoom::~LeavePockerRoom() {
  SharedDtor();
}

void LeavePockerRoom::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void LeavePockerRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavePockerRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeavePockerRoom_descriptor_;
}

const LeavePockerRoom& LeavePockerRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

LeavePockerRoom* LeavePockerRoom::default_instance_ = NULL;

LeavePockerRoom* LeavePockerRoom::New() const {
  return new LeavePockerRoom;
}

void LeavePockerRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeavePockerRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeavePockerRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeavePockerRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeavePockerRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavePockerRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeavePockerRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeavePockerRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeavePockerRoom::MergeFrom(const LeavePockerRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeavePockerRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavePockerRoom::CopyFrom(const LeavePockerRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavePockerRoom::IsInitialized() const {
  
  return true;
}

void LeavePockerRoom::Swap(LeavePockerRoom* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeavePockerRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeavePockerRoom_descriptor_;
  metadata.reflection = LeavePockerRoom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
